
STMF4_SDIO_controllerTech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009684  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800980c  0800980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009884  08009884  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800988c  0800988c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08009894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  200001c8  08009a5c  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08009a5c  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a250  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af5  00000000  00000000  0003a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0003df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  0003ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dcc  00000000  00000000  0003fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144ce  00000000  00000000  000649bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9bdf  00000000  00000000  00078e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ecc  00000000  00000000  00142abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c8 	.word	0x200001c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097f4 	.word	0x080097f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001cc 	.word	0x200001cc
 80001c4:	080097f4 	.word	0x080097f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa2e 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f808 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8a0 	bl	8000610 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d0:	f008 fb8e 	bl	8008bf0 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80004d4:	f000 f86c 	bl	80005b0 <MX_SDIO_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x18>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f009 f8b2 	bl	8009654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemClock_Config+0xcc>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <SystemClock_Config+0xcc>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	; 0x40
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <SystemClock_Config+0xd0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800054c:	2304      	movs	r3, #4
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000550:	23a8      	movs	r3, #168	; 0xa8
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000558:	2307      	movs	r3, #7
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fed3 	bl	800230c <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800056c:	f000 f894 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2302      	movs	r3, #2
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2105      	movs	r1, #5
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f92c 	bl	80027ec <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059a:	f000 f87d 	bl	8000698 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	; 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_SDIO_SD_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005da:	2205      	movs	r2, #5
 80005dc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80005de:	480a      	ldr	r0, [pc, #40]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005e0:	f002 fad8 	bl	8002b94 <HAL_SD_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80005ea:	f000 f855 	bl	8000698 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80005ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_SDIO_SD_Init+0x58>)
 80005f4:	f003 f8ca 	bl	800378c <HAL_SD_ConfigWideBusOperation>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f84b 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200001f4 	.word	0x200001f4
 800060c:	40012c00 	.word	0x40012c00

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_GPIO_Init+0x84>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <MX_GPIO_Init+0x84>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_GPIO_Init+0x84>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_GPIO_Init+0x84>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <MX_GPIO_Init+0x84>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_GPIO_Init+0x84>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_GPIO_Init+0x84>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <MX_GPIO_Init+0x84>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_GPIO_Init+0x84>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x84>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x84>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x84>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800

080006f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <HAL_SD_MspInit+0xc0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d14a      	bne.n	80007b0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <HAL_SD_MspInit+0xc4>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a26      	ldr	r2, [pc, #152]	; (80007bc <HAL_SD_MspInit+0xc4>)
 8000724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <HAL_SD_MspInit+0xc4>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <HAL_SD_MspInit+0xc4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <HAL_SD_MspInit+0xc4>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <HAL_SD_MspInit+0xc4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_SD_MspInit+0xc4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_SD_MspInit+0xc4>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_SD_MspInit+0xc4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800076e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000772:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000780:	230c      	movs	r3, #12
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <HAL_SD_MspInit+0xc8>)
 800078c:	f000 fa72 	bl	8000c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000790:	2304      	movs	r3, #4
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007a0:	230c      	movs	r3, #12
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <HAL_SD_MspInit+0xcc>)
 80007ac:	f000 fa62 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler+0x4>

080007e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>

080007ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 f8d4 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <OTG_FS_IRQHandler+0x10>)
 800082a:	f000 fd0f 	bl	800124c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000074c 	.word	0x2000074c

08000838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <_sbrk+0x5c>)
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <_sbrk+0x60>)
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x64>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <_sbrk+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d207      	bcs.n	8000878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000868:	f008 feba 	bl	80095e0 <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	220c      	movs	r2, #12
 8000870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	e009      	b.n	800088c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <_sbrk+0x64>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20020000 	.word	0x20020000
 8000898:	00000400 	.word	0x00000400
 800089c:	200001e4 	.word	0x200001e4
 80008a0:	20000b68 	.word	0x20000b68

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SystemInit+0x28>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a07      	ldr	r2, [pc, #28]	; (80008cc <SystemInit+0x28>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SystemInit+0x28>)
 80008ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008be:	609a      	str	r2, [r3, #8]
#endif
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008d6:	e003      	b.n	80008e0 <LoopCopyDataInit>

080008d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008de:	3104      	adds	r1, #4

080008e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008e8:	d3f6      	bcc.n	80008d8 <CopyDataInit>
  ldr  r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008ec:	e002      	b.n	80008f4 <LoopFillZerobss>

080008ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008f0:	f842 3b04 	str.w	r3, [r2], #4

080008f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008f8:	d3f9      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd3 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f008 fe75 	bl	80095ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fddd 	bl	80004c0 <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800090c:	08009894 	.word	0x08009894
  ldr  r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000914:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000918:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 800091c:	20000b64 	.word	0x20000b64

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f94f 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fea6 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f967 	bl	8000c5a <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f92f 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000278 	.word	0x20000278

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000278 	.word	0x20000278

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff ffee 	bl	80009f0 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffde 	bl	80009f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff29 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff3e 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff31 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e16b      	b.n	8000f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 815a 	bne.w	8000f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d00b      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d007      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc2:	2b11      	cmp	r3, #17
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b12      	cmp	r3, #18
 8000ccc:	d130      	bne.n	8000d30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	f003 0201 	and.w	r2, r3, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0xfc>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b12      	cmp	r3, #18
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	69b9      	ldr	r1, [r7, #24]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80b4 	beq.w	8000f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b60      	ldr	r3, [pc, #384]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a5f      	ldr	r2, [pc, #380]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e16:	4a5b      	ldr	r2, [pc, #364]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a52      	ldr	r2, [pc, #328]	; (8000f88 <HAL_GPIO_Init+0x314>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d02b      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a51      	ldr	r2, [pc, #324]	; (8000f8c <HAL_GPIO_Init+0x318>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d025      	beq.n	8000e96 <HAL_GPIO_Init+0x222>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a50      	ldr	r2, [pc, #320]	; (8000f90 <HAL_GPIO_Init+0x31c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01f      	beq.n	8000e92 <HAL_GPIO_Init+0x21e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <HAL_GPIO_Init+0x320>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d019      	beq.n	8000e8e <HAL_GPIO_Init+0x21a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4e      	ldr	r2, [pc, #312]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x216>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4d      	ldr	r2, [pc, #308]	; (8000f9c <HAL_GPIO_Init+0x328>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x212>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <HAL_GPIO_Init+0x32c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x20e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4b      	ldr	r2, [pc, #300]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x20a>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e00e      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e7e:	2308      	movs	r3, #8
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e82:	2306      	movs	r3, #6
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ede:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f ae90 	bls.w	8000c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40021c00 	.word	0x40021c00
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	b08f      	sub	sp, #60	; 0x3c
 8000fb0:	af0a      	add	r7, sp, #40	; 0x28
 8000fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e10f      	b.n	80011de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f007 ffe5 	bl	8008fa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fdbc 	bl	8004b7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	687e      	ldr	r6, [r7, #4]
 800100a:	466d      	mov	r5, sp
 800100c:	f106 0410 	add.w	r4, r6, #16
 8001010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800101c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001020:	1d33      	adds	r3, r6, #4
 8001022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f003 fc93 	bl	8004950 <USB_CoreInit>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e0d0      	b.n	80011de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fdaa 	bl	8004b9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e04a      	b.n	80010e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	333d      	adds	r3, #61	; 0x3d
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	333c      	adds	r3, #60	; 0x3c
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	b298      	uxth	r0, r3
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	3342      	adds	r3, #66	; 0x42
 800108a:	4602      	mov	r2, r0
 800108c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	1a9b      	subs	r3, r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	333f      	adds	r3, #63	; 0x3f
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	3344      	adds	r3, #68	; 0x44
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	3348      	adds	r3, #72	; 0x48
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3350      	adds	r3, #80	; 0x50
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d3af      	bcc.n	800104e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e044      	b.n	800117e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	3301      	adds	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3b5      	bcc.n	80010f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	687e      	ldr	r6, [r7, #4]
 8001190:	466d      	mov	r5, sp
 8001192:	f106 0410 	add.w	r4, r6, #16
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80011a6:	1d33      	adds	r3, r6, #4
 80011a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f003 fd20 	bl	8004bf0 <USB_DevInit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2202      	movs	r2, #2
 80011ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00d      	b.n	80011de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fd68 	bl	8005cac <USB_DevDisconnect>

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_PCD_Start+0x1c>
 80011fe:	2302      	movs	r3, #2
 8001200:	e020      	b.n	8001244 <HAL_PCD_Start+0x5e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	2b01      	cmp	r3, #1
 8001210:	d109      	bne.n	8001226 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fc94 	bl	8004b58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f004 fd18 	bl	8005c6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08d      	sub	sp, #52	; 0x34
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fdd6 	bl	8005e14 <USB_GetMode>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 839d 	bne.w	80019aa <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f004 fd3a 	bl	8005cee <USB_ReadInterrupts>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8393 	beq.w	80019a8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fd31 	bl	8005cee <USB_ReadInterrupts>
 800128c:	4603      	mov	r3, r0
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f002 0202 	and.w	r2, r2, #2
 80012a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fd1f 	bl	8005cee <USB_ReadInterrupts>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d161      	bne.n	800137e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0210 	bic.w	r2, r2, #16
 80012c8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f003 020f 	and.w	r2, r3, #15
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	3304      	adds	r3, #4
 80012e8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	0c5b      	lsrs	r3, r3, #17
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d124      	bne.n	8001340 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d035      	beq.n	800136e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800130c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	6a38      	ldr	r0, [r7, #32]
 8001316:	f004 fb85 	bl	8005a24 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001326:	441a      	add	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	699a      	ldr	r2, [r3, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001338:	441a      	add	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	619a      	str	r2, [r3, #24]
 800133e:	e016      	b.n	800136e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	0c5b      	lsrs	r3, r3, #17
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	2b06      	cmp	r3, #6
 800134a:	d110      	bne.n	800136e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001352:	2208      	movs	r2, #8
 8001354:	4619      	mov	r1, r3
 8001356:	6a38      	ldr	r0, [r7, #32]
 8001358:	f004 fb64 	bl	8005a24 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001368:	441a      	add	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0210 	orr.w	r2, r2, #16
 800137c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f004 fcb3 	bl	8005cee <USB_ReadInterrupts>
 8001388:	4603      	mov	r3, r0
 800138a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800138e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001392:	d16e      	bne.n	8001472 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fcb9 	bl	8005d14 <USB_ReadDevAllOutEpInterrupt>
 80013a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013a4:	e062      	b.n	800146c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d057      	beq.n	8001460 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 fcde 	bl	8005d7c <USB_ReadDevOutEPInterrupt>
 80013c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00c      	beq.n	80013e6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	015a      	lsls	r2, r3, #5
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d8:	461a      	mov	r2, r3
 80013da:	2301      	movs	r3, #1
 80013dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fddd 	bl	8001fa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013fc:	461a      	mov	r2, r3
 80013fe:	2308      	movs	r3, #8
 8001400:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fed7 	bl	80021b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	015a      	lsls	r2, r3, #5
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	4413      	add	r3, r2
 800141c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001420:	461a      	mov	r2, r3
 8001422:	2310      	movs	r3, #16
 8001424:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	4413      	add	r3, r2
 8001438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143c:	461a      	mov	r2, r3
 800143e:	2320      	movs	r3, #32
 8001440:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d009      	beq.n	8001460 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001458:	461a      	mov	r2, r3
 800145a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	3301      	adds	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d199      	bne.n	80013a6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fc39 	bl	8005cee <USB_ReadInterrupts>
 800147c:	4603      	mov	r3, r0
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001486:	f040 80c0 	bne.w	800160a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fc5a 	bl	8005d48 <USB_ReadDevAllInEpInterrupt>
 8001494:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800149a:	e0b2      	b.n	8001602 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80a7 	beq.w	80015f6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f004 fc80 	bl	8005db8 <USB_ReadDevInEPInterrupt>
 80014b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d057      	beq.n	8001574 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	2201      	movs	r2, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69f9      	ldr	r1, [r7, #28]
 80014e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014e4:	4013      	ands	r3, r2
 80014e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f4:	461a      	mov	r2, r3
 80014f6:	2301      	movs	r3, #1
 80014f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d132      	bne.n	8001568 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3348      	adds	r3, #72	; 0x48
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4403      	add	r3, r0
 8001522:	3344      	adds	r3, #68	; 0x44
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4419      	add	r1, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4403      	add	r3, r0
 8001536:	3348      	adds	r3, #72	; 0x48
 8001538:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	2b00      	cmp	r3, #0
 800153e:	d113      	bne.n	8001568 <HAL_PCD_IRQHandler+0x31c>
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3350      	adds	r3, #80	; 0x50
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d108      	bne.n	8001568 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001560:	461a      	mov	r2, r3
 8001562:	2101      	movs	r1, #1
 8001564:	f004 fc88 	bl	8005e78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f007 fd9b 	bl	80090aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	4413      	add	r3, r2
 8001586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800158a:	461a      	mov	r2, r3
 800158c:	2308      	movs	r3, #8
 800158e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a6:	461a      	mov	r2, r3
 80015a8:	2310      	movs	r3, #16
 80015aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c2:	461a      	mov	r2, r3
 80015c4:	2340      	movs	r3, #64	; 0x40
 80015c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	015a      	lsls	r2, r3, #5
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015de:	461a      	mov	r2, r3
 80015e0:	2302      	movs	r3, #2
 80015e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fc48 	bl	8001e86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3301      	adds	r3, #1
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	f47f af49 	bne.w	800149c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f004 fb6d 	bl	8005cee <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800161a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800161e:	d122      	bne.n	8001666 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001646:	2100      	movs	r1, #0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fe53 	bl	80022f4 <HAL_PCDEx_LPM_Callback>
 800164e:	e002      	b.n	8001656 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f007 fda1 	bl	8009198 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fb3f 	bl	8005cee <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800167a:	d112      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f007 fd5d 	bl	800914c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016a0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 fb21 	bl	8005cee <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b6:	f040 80c7 	bne.w	8001848 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2110      	movs	r1, #16
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fbef 	bl	8004eb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016de:	e056      	b.n	800178e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ec:	461a      	mov	r2, r3
 80016ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001704:	0151      	lsls	r1, r2, #5
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	440a      	add	r2, r1
 800170a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800170e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001712:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001724:	0151      	lsls	r1, r2, #5
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	440a      	add	r2, r1
 800172a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800172e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001740:	461a      	mov	r2, r3
 8001742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001746:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	4413      	add	r3, r2
 8001750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001758:	0151      	lsls	r1, r2, #5
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	440a      	add	r2, r1
 800175e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001766:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176a:	015a      	lsls	r2, r3, #5
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001778:	0151      	lsls	r1, r2, #5
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	440a      	add	r2, r1
 800177e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001786:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	3301      	adds	r3, #1
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001794:	429a      	cmp	r2, r3
 8001796:	d3a3      	bcc.n	80016e0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d016      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c4:	f043 030b 	orr.w	r3, r3, #11
 80017c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017da:	f043 030b 	orr.w	r3, r3, #11
 80017de:	6453      	str	r3, [r2, #68]	; 0x44
 80017e0:	e015      	b.n	800180e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001808:	f043 030b 	orr.w	r3, r3, #11
 800180c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001820:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001832:	461a      	mov	r2, r3
 8001834:	f004 fb20 	bl	8005e78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fa4e 	bl	8005cee <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185c:	d124      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fae4 	bl	8005e30 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fb84 	bl	8004f7a <USB_GetDevSpeed>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	f001 f97d 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8001882:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4620      	mov	r0, r4
 800188e:	f003 f8c1 	bl	8004a14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f007 fc31 	bl	80090fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 fa1e 	bl	8005cee <USB_ReadInterrupts>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d10a      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f007 fc0e 	bl	80090de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f002 0208 	and.w	r2, r2, #8
 80018d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f004 fa09 	bl	8005cee <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018e6:	d10f      	bne.n	8001908 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f007 fc70 	bl	80091d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f004 f9ee 	bl	8005cee <USB_ReadInterrupts>
 8001912:	4603      	mov	r3, r0
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800191c:	d10f      	bne.n	800193e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f007 fc43 	bl	80091b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800193c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f004 f9d3 	bl	8005cee <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800194e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001952:	d10a      	bne.n	800196a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f007 fc51 	bl	80091fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f004 f9bd 	bl	8005cee <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b04      	cmp	r3, #4
 800197c:	d115      	bne.n	80019aa <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f007 fc41 	bl	8009218 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	e000      	b.n	80019aa <HAL_PCD_IRQHandler+0x75e>
      return;
 80019a8:	bf00      	nop
    }
  }
}
 80019aa:	3734      	adds	r7, #52	; 0x34
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd90      	pop	{r4, r7, pc}

080019b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_PCD_SetAddress+0x1a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e013      	b.n	80019f2 <HAL_PCD_SetAddress+0x42>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 f91b 	bl	8005c1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	4608      	mov	r0, r1
 8001a04:	4611      	mov	r1, r2
 8001a06:	461a      	mov	r2, r3
 8001a08:	4603      	mov	r3, r0
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	803b      	strh	r3, [r7, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da0f      	bge.n	8001a40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 020f 	and.w	r2, r3, #15
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	3338      	adds	r3, #56	; 0x38
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	3304      	adds	r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	705a      	strb	r2, [r3, #1]
 8001a3e:	e00f      	b.n	8001a60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 020f 	and.w	r2, r3, #15
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	3304      	adds	r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a6c:	883a      	ldrh	r2, [r7, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	78ba      	ldrb	r2, [r7, #2]
 8001a76:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a8a:	78bb      	ldrb	r3, [r7, #2]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d102      	bne.n	8001a96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_EP_Open+0xaa>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e00e      	b.n	8001ac2 <HAL_PCD_EP_Open+0xc8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fa86 	bl	8004fc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da0f      	bge.n	8001afe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	f003 020f 	and.w	r2, r3, #15
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	3338      	adds	r3, #56	; 0x38
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	705a      	strb	r2, [r3, #1]
 8001afc:	e00f      	b.n	8001b1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	f003 020f 	and.w	r2, r3, #15
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_EP_Close+0x6e>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e00e      	b.n	8001b56 <HAL_PCD_EP_Close+0x8c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fac4 	bl	80050d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	f003 fd9f 	bl	8005714 <USB_EP0StartXfer>
 8001bd6:	e008      	b.n	8001bea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	6979      	ldr	r1, [r7, #20]
 8001be6:	f003 fb51 	bl	800528c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 020f 	and.w	r2, r3, #15
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	460b      	mov	r3, r1
 8001c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	f003 020f 	and.w	r2, r3, #15
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	3338      	adds	r3, #56	; 0x38
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2201      	movs	r2, #1
 8001c62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	6979      	ldr	r1, [r7, #20]
 8001c96:	f003 fd3d 	bl	8005714 <USB_EP0StartXfer>
 8001c9a:	e008      	b.n	8001cae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6979      	ldr	r1, [r7, #20]
 8001caa:	f003 faef 	bl	800528c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 020f 	and.w	r2, r3, #15
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d901      	bls.n	8001cd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e050      	b.n	8001d78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da0f      	bge.n	8001cfe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	3338      	adds	r3, #56	; 0x38
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
 8001cfc:	e00d      	b.n	8001d1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	3304      	adds	r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_PCD_EP_SetStall+0x82>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e01e      	b.n	8001d78 <HAL_PCD_EP_SetStall+0xc0>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fe94 	bl	8005a76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	b2d9      	uxtb	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f004 f885 	bl	8005e78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d901      	bls.n	8001d9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e042      	b.n	8001e24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da0f      	bge.n	8001dc6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 020f 	and.w	r2, r3, #15
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	3338      	adds	r3, #56	; 0x38
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	3304      	adds	r3, #4
 8001dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	705a      	strb	r2, [r3, #1]
 8001dc4:	e00f      	b.n	8001de6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_PCD_EP_ClrStall+0x86>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e00e      	b.n	8001e24 <HAL_PCD_EP_ClrStall+0xa4>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fe9c 	bl	8005b52 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_PCD_EP_Flush+0x1a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e01b      	b.n	8001e7e <HAL_PCD_EP_Flush+0x52>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da09      	bge.n	8001e6a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f003 f828 	bl	8004eb8 <USB_FlushTxFifo>
 8001e68:	e004      	b.n	8001e74 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 f848 	bl	8004f04 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b08a      	sub	sp, #40	; 0x28
 8001e8a:	af02      	add	r7, sp, #8
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	3338      	adds	r3, #56	; 0x38
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d901      	bls.n	8001ebe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06c      	b.n	8001f98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d902      	bls.n	8001eda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3303      	adds	r3, #3
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ee2:	e02b      	b.n	8001f3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d902      	bls.n	8001f00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	3303      	adds	r3, #3
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68d9      	ldr	r1, [r3, #12]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f003 fd4b 	bl	80059ba <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	441a      	add	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d809      	bhi.n	8001f66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d203      	bcs.n	8001f66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1be      	bne.n	8001ee4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d811      	bhi.n	8001f96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	2201      	movs	r2, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f92:	4013      	ands	r3, r2
 8001f94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	333c      	adds	r3, #60	; 0x3c
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	f040 80a0 	bne.w	8002118 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4a72      	ldr	r2, [pc, #456]	; (80021b0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f240 80dd 	bls.w	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80d7 	beq.w	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002004:	461a      	mov	r2, r3
 8002006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800200a:	6093      	str	r3, [r2, #8]
 800200c:	e0cb      	b.n	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002024:	461a      	mov	r2, r3
 8002026:	2320      	movs	r3, #32
 8002028:	6093      	str	r3, [r2, #8]
 800202a:	e0bc      	b.n	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 80b7 	bne.w	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a5d      	ldr	r2, [pc, #372]	; (80021b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d90f      	bls.n	8002060 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002056:	461a      	mov	r2, r3
 8002058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205c:	6093      	str	r3, [r2, #8]
 800205e:	e0a2      	b.n	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002072:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	0159      	lsls	r1, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	440b      	add	r3, r1
 800207c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002086:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4403      	add	r3, r0
 8002096:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800209a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4403      	add	r3, r0
 80020be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4419      	add	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4403      	add	r3, r0
 80020d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d114      	bne.n	800210a <PCD_EP_OutXfrComplete_int+0x16a>
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002102:	461a      	mov	r2, r3
 8002104:	2101      	movs	r1, #1
 8002106:	f003 feb7 	bl	8005e78 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f006 ffaf 	bl	8009074 <HAL_PCD_DataOutStageCallback>
 8002116:	e046      	b.n	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d124      	bne.n	800216a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002136:	461a      	mov	r2, r3
 8002138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213c:	6093      	str	r3, [r2, #8]
 800213e:	e032      	b.n	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002156:	461a      	mov	r2, r3
 8002158:	2320      	movs	r3, #32
 800215a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4619      	mov	r1, r3
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f006 ff86 	bl	8009074 <HAL_PCD_DataOutStageCallback>
 8002168:	e01d      	b.n	80021a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d114      	bne.n	800219a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d108      	bne.n	800219a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002192:	461a      	mov	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	f003 fe6f 	bl	8005e78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f006 ff67 	bl	8009074 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	4f54300a 	.word	0x4f54300a
 80021b4:	4f54310a 	.word	0x4f54310a

080021b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	333c      	adds	r3, #60	; 0x3c
 80021d0:	3304      	adds	r3, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a15      	ldr	r2, [pc, #84]	; (8002240 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d90e      	bls.n	800220c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002204:	461a      	mov	r2, r3
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f006 ff1f 	bl	8009050 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <PCD_EP_OutSetupPacket_int+0x88>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d90c      	bls.n	8002234 <PCD_EP_OutSetupPacket_int+0x7c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d108      	bne.n	8002234 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800222c:	461a      	mov	r2, r3
 800222e:	2101      	movs	r1, #1
 8002230:	f003 fe22 	bl	8005e78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	4f54300a 	.word	0x4f54300a

08002244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
 8002250:	4613      	mov	r3, r2
 8002252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002262:	883b      	ldrh	r3, [r7, #0]
 8002264:	0419      	lsls	r1, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	430a      	orrs	r2, r1
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
 8002270:	e028      	b.n	80022c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e00d      	b.n	80022a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3340      	adds	r3, #64	; 0x40
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	3301      	adds	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3ec      	bcc.n	8002286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022ac:	883b      	ldrh	r3, [r7, #0]
 80022ae:	0418      	lsls	r0, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	4302      	orrs	r2, r0
 80022bc:	3340      	adds	r3, #64	; 0x40
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e25b      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d075      	beq.n	8002416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232a:	4ba3      	ldr	r3, [pc, #652]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b04      	cmp	r3, #4
 8002334:	d00c      	beq.n	8002350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002336:	4ba0      	ldr	r3, [pc, #640]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233e:	2b08      	cmp	r3, #8
 8002340:	d112      	bne.n	8002368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002342:	4b9d      	ldr	r3, [pc, #628]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234e:	d10b      	bne.n	8002368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	4b99      	ldr	r3, [pc, #612]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d05b      	beq.n	8002414 <HAL_RCC_OscConfig+0x108>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d157      	bne.n	8002414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e236      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d106      	bne.n	8002380 <HAL_RCC_OscConfig+0x74>
 8002372:	4b91      	ldr	r3, [pc, #580]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a90      	ldr	r2, [pc, #576]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e01d      	b.n	80023bc <HAL_RCC_OscConfig+0xb0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x98>
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a87      	ldr	r2, [pc, #540]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0xb0>
 80023a4:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a83      	ldr	r2, [pc, #524]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a80      	ldr	r2, [pc, #512]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fb14 	bl	80009f0 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fb10 	bl	80009f0 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1fb      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0xc0>
 80023ea:	e014      	b.n	8002416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe fb00 	bl	80009f0 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe fafc 	bl	80009f0 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1e7      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0xe8>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002436:	2b08      	cmp	r3, #8
 8002438:	d11c      	bne.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243a:	4b5f      	ldr	r3, [pc, #380]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x152>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1bb      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4952      	ldr	r1, [pc, #328]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247c:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_RCC_OscConfig+0x2b0>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe fab5 	bl	80009f0 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe fab1 	bl	80009f0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e19c      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4940      	ldr	r1, [pc, #256]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x2b0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fa94 	bl	80009f0 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe fa90 	bl	80009f0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e17b      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d030      	beq.n	8002558 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d016      	beq.n	800252c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fa74 	bl	80009f0 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fa70 	bl	80009f0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e15b      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x200>
 800252a:	e015      	b.n	8002558 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe fa5d 	bl	80009f0 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fa59 	bl	80009f0 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e144      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80a0 	beq.w	80026a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_OscConfig+0x2b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d121      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_RCC_OscConfig+0x2b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_RCC_OscConfig+0x2b8>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7fe fa1f 	bl	80009f0 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e011      	b.n	80025da <HAL_RCC_OscConfig+0x2ce>
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	42470000 	.word	0x42470000
 80025c0:	42470e80 	.word	0x42470e80
 80025c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c8:	f7fe fa12 	bl	80009f0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0fd      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <HAL_RCC_OscConfig+0x4d4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x2f0>
 80025ee:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a7c      	ldr	r2, [pc, #496]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
 80025fa:	e01c      	b.n	8002636 <HAL_RCC_OscConfig+0x32a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x312>
 8002604:	4b77      	ldr	r3, [pc, #476]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a76      	ldr	r2, [pc, #472]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
 8002610:	4b74      	ldr	r3, [pc, #464]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	4a73      	ldr	r2, [pc, #460]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	; 0x70
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0x32a>
 800261e:	4b71      	ldr	r3, [pc, #452]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	4a70      	ldr	r2, [pc, #448]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6713      	str	r3, [r2, #112]	; 0x70
 800262a:	4b6e      	ldr	r3, [pc, #440]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	4a6d      	ldr	r2, [pc, #436]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe f9d7 	bl	80009f0 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe f9d3 	bl	80009f0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0bc      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	4b61      	ldr	r3, [pc, #388]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ee      	beq.n	8002646 <HAL_RCC_OscConfig+0x33a>
 8002668:	e014      	b.n	8002694 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7fe f9c1 	bl	80009f0 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe f9bd 	bl	80009f0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0a6      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ee      	bne.n	8002672 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a51      	ldr	r2, [pc, #324]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8092 	beq.w	80027d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b0:	4b4c      	ldr	r3, [pc, #304]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d05c      	beq.n	8002776 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d141      	bne.n	8002748 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <HAL_RCC_OscConfig+0x4dc>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe f991 	bl	80009f0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe f98d 	bl	80009f0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e078      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e4:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	019b      	lsls	r3, r3, #6
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	4933      	ldr	r1, [pc, #204]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCC_OscConfig+0x4dc>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe f966 	bl	80009f0 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe f962 	bl	80009f0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04d      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x41c>
 8002746:	e045      	b.n	80027d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x4dc>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7fe f94f 	bl	80009f0 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe f94b 	bl	80009f0 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e036      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x44a>
 8002774:	e02e      	b.n	80027d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e029      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_RCC_OscConfig+0x4d8>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	429a      	cmp	r2, r3
 8002794:	d11c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d115      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027aa:	4013      	ands	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40007000 	.word	0x40007000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470060 	.word	0x42470060

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe f888 	bl	80009f0 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe f884 	bl	80009f0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd ffe8 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08009850 	.word	0x08009850
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	2300      	movs	r3, #0
 80029ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d0:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00d      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	f200 80bd 	bhi.w	8002b5c <HAL_RCC_GetSysClockFreq+0x1a4>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ea:	e0b7      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029ee:	60bb      	str	r3, [r7, #8]
       break;
 80029f0:	e0b7      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029f4:	60bb      	str	r3, [r7, #8]
      break;
 80029f6:	e0b4      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f8:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a02:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d04d      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	461a      	mov	r2, r3
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	ea02 0800 	and.w	r8, r2, r0
 8002a26:	ea03 0901 	and.w	r9, r3, r1
 8002a2a:	4640      	mov	r0, r8
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	014b      	lsls	r3, r1, #5
 8002a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a3c:	0142      	lsls	r2, r0, #5
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	ebb0 0008 	subs.w	r0, r0, r8
 8002a46:	eb61 0109 	sbc.w	r1, r1, r9
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	018b      	lsls	r3, r1, #6
 8002a54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a58:	0182      	lsls	r2, r0, #6
 8002a5a:	1a12      	subs	r2, r2, r0
 8002a5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	00d9      	lsls	r1, r3, #3
 8002a6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a6e:	00d0      	lsls	r0, r2, #3
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	eb12 0208 	adds.w	r2, r2, r8
 8002a78:	eb43 0309 	adc.w	r3, r3, r9
 8002a7c:	f04f 0000 	mov.w	r0, #0
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	0259      	lsls	r1, r3, #9
 8002a86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a8a:	0250      	lsls	r0, r2, #9
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f7fd fb94 	bl	80001c8 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e04a      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	ea02 0400 	and.w	r4, r2, r0
 8002ac2:	ea03 0501 	and.w	r5, r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	014b      	lsls	r3, r1, #5
 8002ad4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ad8:	0142      	lsls	r2, r0, #5
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	1b00      	subs	r0, r0, r4
 8002ae0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	018b      	lsls	r3, r1, #6
 8002aee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002af2:	0182      	lsls	r2, r0, #6
 8002af4:	1a12      	subs	r2, r2, r0
 8002af6:	eb63 0301 	sbc.w	r3, r3, r1
 8002afa:	f04f 0000 	mov.w	r0, #0
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	00d9      	lsls	r1, r3, #3
 8002b04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b08:	00d0      	lsls	r0, r2, #3
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	1912      	adds	r2, r2, r4
 8002b10:	eb45 0303 	adc.w	r3, r5, r3
 8002b14:	f04f 0000 	mov.w	r0, #0
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	0299      	lsls	r1, r3, #10
 8002b1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b22:	0290      	lsls	r0, r2, #10
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f7fd fb48 	bl	80001c8 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	60bb      	str	r3, [r7, #8]
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b5e:	60bb      	str	r3, [r7, #8]
      break;
 8002b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b62:	68bb      	ldr	r3, [r7, #8]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e022      	b.n	8002bec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7fd fd9d 	bl	80006f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f814 	bl	8002bf4 <HAL_SD_InitCard>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00a      	b.n	8002bec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002c10:	2376      	movs	r3, #118	; 0x76
 8002c12:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681d      	ldr	r5, [r3, #0]
 8002c18:	466c      	mov	r4, sp
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f001 f92b 	bl	8003e88 <SDIO_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e031      	b.n	8002ca8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_SD_InitCard+0xbc>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 f963 	bl	8003f1a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_SD_InitCard+0xbc>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fefe 	bl	8003a5c <SD_PowerON>
 8002c60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e013      	b.n	8002ca8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fe1f 	bl	80038c4 <SD_InitCard>
 8002c86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3728      	adds	r7, #40	; 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb0:	422580a0 	.word	0x422580a0

08002cb4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b092      	sub	sp, #72	; 0x48
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002cc2:	f7fd fe95 	bl	80009f0 <HAL_GetTick>
 8002cc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1d9      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	f040 81cc 	bne.w	800308c <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	441a      	add	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d907      	bls.n	8002d18 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e1c0      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d002      	beq.n	8002d36 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f97e 	bl	8004040 <SDMMC_CmdBlockLength>
 8002d44:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00f      	beq.n	8002d6c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a9b      	ldr	r2, [pc, #620]	; (8002fc0 <HAL_SD_ReadBlocks+0x30c>)
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e196      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	025b      	lsls	r3, r3, #9
 8002d76:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d78:	2390      	movs	r3, #144	; 0x90
 8002d7a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f107 0214 	add.w	r2, r7, #20
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f928 	bl	8003fe8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d90a      	bls.n	8002db4 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2202      	movs	r2, #2
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 f98c 	bl	80040c8 <SDMMC_CmdReadMultiBlock>
 8002db0:	6478      	str	r0, [r7, #68]	; 0x44
 8002db2:	e009      	b.n	8002dc8 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 f95f 	bl	8004084 <SDMMC_CmdReadSingleBlock>
 8002dc6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7b      	ldr	r2, [pc, #492]	; (8002fc0 <HAL_SD_ReadBlocks+0x30c>)
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e152      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002df8:	e061      	b.n	8002ebe <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d03c      	beq.n	8002e82 <HAL_SD_ReadBlocks+0x1ce>
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d039      	beq.n	8002e82 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
 8002e12:	e033      	b.n	8002e7c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 f860 	bl	8003ede <SDIO_ReadFIFO>
 8002e1e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e30:	3b01      	subs	r3, #1
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	3301      	adds	r3, #1
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	3b01      	subs	r3, #1
 8002e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e56:	3301      	adds	r3, #1
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	0e1b      	lsrs	r3, r3, #24
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	3b01      	subs	r3, #1
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e78:	3301      	adds	r3, #1
 8002e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7e:	2b07      	cmp	r3, #7
 8002e80:	d9c8      	bls.n	8002e14 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e82:	f7fd fdb5 	bl	80009f0 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d902      	bls.n	8002e98 <HAL_SD_ReadBlocks+0x1e4>
 8002e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d112      	bne.n	8002ebe <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <HAL_SD_ReadBlocks+0x30c>)
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0ed      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec4:	f240 332a 	movw	r3, #810	; 0x32a
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d095      	beq.n	8002dfa <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d022      	beq.n	8002f22 <HAL_SD_ReadBlocks+0x26e>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d91f      	bls.n	8002f22 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d01b      	beq.n	8002f22 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f950 	bl	8004194 <SDMMC_CmdStopTransfer>
 8002ef4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <HAL_SD_ReadBlocks+0x30c>)
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0bb      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_SD_ReadBlocks+0x30c>)
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	f043 0208 	orr.w	r2, r3, #8
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0a1      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_SD_ReadBlocks+0x30c>)
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	f043 0202 	orr.w	r2, r3, #2
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e087      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d064      	beq.n	8003062 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_SD_ReadBlocks+0x30c>)
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06d      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
 8002fbe:	bf00      	nop
 8002fc0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 ff88 	bl	8003ede <SDIO_ReadFIFO>
 8002fce:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	3301      	adds	r3, #1
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003002:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	3301      	adds	r3, #1
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300c:	3b01      	subs	r3, #1
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	0e1b      	lsrs	r3, r3, #24
 8003014:	b2da      	uxtb	r2, r3
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	3301      	adds	r3, #1
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003022:	3b01      	subs	r3, #1
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003026:	f7fd fce3 	bl	80009f0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003032:	429a      	cmp	r2, r3
 8003034:	d902      	bls.n	800303c <HAL_SD_ReadBlocks+0x388>
 8003036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003038:	2b00      	cmp	r3, #0
 800303a:	d112      	bne.n	8003062 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <HAL_SD_ReadBlocks+0x3f0>)
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e01b      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SD_ReadBlocks+0x3c2>
 8003070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1a6      	bne.n	8002fc4 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f240 523a 	movw	r2, #1338	; 0x53a
 800307e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e006      	b.n	800309a <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3748      	adds	r7, #72	; 0x48
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	004005ff 	.word	0x004005ff

080030a8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b092      	sub	sp, #72	; 0x48
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80030b6:	f7fd fc9b 	bl	80009f0 <HAL_GetTick>
 80030ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e184      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	f040 8177 	bne.w	80033d6 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	441a      	add	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d907      	bls.n	800310c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e16b      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2203      	movs	r2, #3
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	2b01      	cmp	r3, #1
 8003122:	d002      	beq.n	800312a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	025b      	lsls	r3, r3, #9
 8003128:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003132:	4618      	mov	r0, r3
 8003134:	f000 ff84 	bl	8004040 <SDMMC_CmdBlockLength>
 8003138:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800313a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00f      	beq.n	8003160 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a9d      	ldr	r2, [pc, #628]	; (80033bc <HAL_SD_WriteBlocks+0x314>)
 8003146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314e:	431a      	orrs	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e141      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	025b      	lsls	r3, r3, #9
 800316a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800316c:	2390      	movs	r3, #144	; 0x90
 800316e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003178:	2301      	movs	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f107 0218 	add.w	r2, r7, #24
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f000 ff2e 	bl	8003fe8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d90a      	bls.n	80031a8 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 ffd6 	bl	8004150 <SDMMC_CmdWriteMultiBlock>
 80031a4:	6478      	str	r0, [r7, #68]	; 0x44
 80031a6:	e009      	b.n	80031bc <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2210      	movs	r2, #16
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 ffa9 	bl	800410c <SDMMC_CmdWriteSingleBlock>
 80031ba:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7d      	ldr	r2, [pc, #500]	; (80033bc <HAL_SD_WriteBlocks+0x314>)
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0fd      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80031ec:	e065      	b.n	80032ba <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d040      	beq.n	800327e <HAL_SD_WriteBlocks+0x1d6>
 80031fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03d      	beq.n	800327e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003202:	2300      	movs	r3, #0
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
 8003206:	e037      	b.n	8003278 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	3301      	adds	r3, #1
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003216:	3b01      	subs	r3, #1
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	021a      	lsls	r2, r3, #8
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003228:	3301      	adds	r3, #1
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	3b01      	subs	r3, #1
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	041a      	lsls	r2, r3, #16
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	3301      	adds	r3, #1
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003246:	3b01      	subs	r3, #1
 8003248:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	061a      	lsls	r2, r3, #24
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003258:	3301      	adds	r3, #1
 800325a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	3b01      	subs	r3, #1
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f107 0214 	add.w	r2, r7, #20
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe43 	bl	8003ef8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003274:	3301      	adds	r3, #1
 8003276:	643b      	str	r3, [r7, #64]	; 0x40
 8003278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327a:	2b07      	cmp	r3, #7
 800327c:	d9c4      	bls.n	8003208 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800327e:	f7fd fbb7 	bl	80009f0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800328a:	429a      	cmp	r2, r3
 800328c:	d902      	bls.n	8003294 <HAL_SD_WriteBlocks+0x1ec>
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003290:	2b00      	cmp	r3, #0
 8003292:	d112      	bne.n	80032ba <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a48      	ldr	r2, [pc, #288]	; (80033bc <HAL_SD_WriteBlocks+0x314>)
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e094      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	f240 331a 	movw	r3, #794	; 0x31a
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d091      	beq.n	80031ee <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d022      	beq.n	800331e <HAL_SD_WriteBlocks+0x276>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d91f      	bls.n	800331e <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d01b      	beq.n	800331e <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff52 	bl	8004194 <SDMMC_CmdStopTransfer>
 80032f0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80032f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d012      	beq.n	800331e <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <HAL_SD_WriteBlocks+0x314>)
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	431a      	orrs	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e062      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d012      	beq.n	8003352 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_SD_WriteBlocks+0x314>)
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	f043 0208 	orr.w	r2, r3, #8
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e048      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a15      	ldr	r2, [pc, #84]	; (80033bc <HAL_SD_WriteBlocks+0x314>)
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	f043 0202 	orr.w	r2, r3, #2
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e02e      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_SD_WriteBlocks+0x314>)
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e014      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
 80033ba:	bf00      	nop
 80033bc:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e006      	b.n	80033e4 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3748      	adds	r7, #72	; 0x48
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fa:	0f9b      	lsrs	r3, r3, #30
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003406:	0e9b      	lsrs	r3, r3, #26
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	b2da      	uxtb	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003418:	0e1b      	lsrs	r3, r3, #24
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	b2da      	uxtb	r2, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b2da      	uxtb	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	b2da      	uxtb	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003442:	b2da      	uxtb	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	b29a      	uxth	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	b2da      	uxtb	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346a:	0bdb      	lsrs	r3, r3, #15
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	b2da      	uxtb	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347c:	0b9b      	lsrs	r3, r3, #14
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348e:	0b5b      	lsrs	r3, r3, #13
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a0:	0b1b      	lsrs	r3, r3, #12
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d163      	bne.n	8003584 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	009a      	lsls	r2, r3, #2
 80034c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034cc:	0f92      	lsrs	r2, r2, #30
 80034ce:	431a      	orrs	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	0edb      	lsrs	r3, r3, #27
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	0e1b      	lsrs	r3, r3, #24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fc:	0d5b      	lsrs	r3, r3, #21
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	b2da      	uxtb	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	b2da      	uxtb	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003520:	0bdb      	lsrs	r3, r3, #15
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	b2da      	uxtb	r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	3302      	adds	r3, #2
 8003544:	2201      	movs	r2, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800354e:	fb02 f203 	mul.w	r2, r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	7a1b      	ldrb	r3, [r3, #8]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003570:	0a52      	lsrs	r2, r2, #9
 8003572:	fb02 f203 	mul.w	r2, r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003580:	661a      	str	r2, [r3, #96]	; 0x60
 8003582:	e031      	b.n	80035e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	2b01      	cmp	r3, #1
 800358a:	d11d      	bne.n	80035c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	431a      	orrs	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	3301      	adds	r3, #1
 80035a8:	029a      	lsls	r2, r3, #10
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	661a      	str	r2, [r3, #96]	; 0x60
 80035c6:	e00f      	b.n	80035e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a58      	ldr	r2, [pc, #352]	; (8003730 <HAL_SD_GetCardCSD+0x344>)
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e09d      	b.n	8003724 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ec:	0b9b      	lsrs	r3, r3, #14
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fe:	09db      	lsrs	r3, r3, #7
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003606:	b2da      	uxtb	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003616:	b2da      	uxtb	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	0fdb      	lsrs	r3, r3, #31
 8003622:	b2da      	uxtb	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	0f5b      	lsrs	r3, r3, #29
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	b2da      	uxtb	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	0e9b      	lsrs	r3, r3, #26
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	b2da      	uxtb	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	0d9b      	lsrs	r3, r3, #22
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	b2da      	uxtb	r2, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	0d5b      	lsrs	r3, r3, #21
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	0bdb      	lsrs	r3, r3, #15
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	b2da      	uxtb	r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	0b9b      	lsrs	r3, r3, #14
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	0b5b      	lsrs	r3, r3, #13
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	0b1b      	lsrs	r3, r3, #12
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	0a9b      	lsrs	r3, r3, #10
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003712:	b2da      	uxtb	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	004005ff 	.word	0x004005ff

08003734 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800378c:	b5b0      	push	{r4, r5, r7, lr}
 800378e:	b08e      	sub	sp, #56	; 0x38
 8003790:	af04      	add	r7, sp, #16
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d02e      	beq.n	8003804 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d106      	bne.n	80037bc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
 80037ba:	e029      	b.n	8003810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c2:	d10a      	bne.n	80037da <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f9ff 	bl	8003bc8 <SD_WideBus_Enable>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
 80037d8:	e01a      	b.n	8003810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa3c 	bl	8003c5e <SD_WideBus_Disable>
 80037e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
 80037f4:	e00c      	b.n	8003810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
 8003802:	e005      	b.n	8003810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e024      	b.n	8003876 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	466c      	mov	r4, sp
 8003854:	f107 0318 	add.w	r3, r7, #24
 8003858:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800385c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003866:	4628      	mov	r0, r5
 8003868:	f000 fb0e 	bl	8003e88 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3728      	adds	r7, #40	; 0x28
 800387a:	46bd      	mov	sp, r7
 800387c:	bdb0      	pop	{r4, r5, r7, pc}
 800387e:	bf00      	nop
 8003880:	004005ff 	.word	0x004005ff

08003884 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f96e 	bl	8003b78 <SD_SendStatus>
 800389c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	0a5b      	lsrs	r3, r3, #9
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038ba:	693b      	ldr	r3, [r7, #16]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80038c4:	b5b0      	push	{r4, r5, r7, lr}
 80038c6:	b094      	sub	sp, #80	; 0x50
 80038c8:	af04      	add	r7, sp, #16
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80038cc:	2301      	movs	r3, #1
 80038ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fb2f 	bl	8003f38 <SDIO_GetPowerState>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038e4:	e0b6      	b.n	8003a54 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d02f      	beq.n	800394e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fd58 	bl	80043a8 <SDMMC_CmdSendCID>
 80038f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <SD_InitCard+0x40>
    {
      return errorstate;
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	e0a7      	b.n	8003a54 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fb59 	bl	8003fc2 <SDIO_GetResponse>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2104      	movs	r1, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fb50 	bl	8003fc2 <SDIO_GetResponse>
 8003922:	4602      	mov	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2108      	movs	r1, #8
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fb47 	bl	8003fc2 <SDIO_GetResponse>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	210c      	movs	r1, #12
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fb3e 	bl	8003fc2 <SDIO_GetResponse>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	2b03      	cmp	r3, #3
 8003954:	d00d      	beq.n	8003972 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f107 020e 	add.w	r2, r7, #14
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fd5e 	bl	8004422 <SDMMC_CmdSetRelAdd>
 8003966:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <SD_InitCard+0xae>
    {
      return errorstate;
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003970:	e070      	b.n	8003a54 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	2b03      	cmp	r3, #3
 8003978:	d036      	beq.n	80039e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800397a:	89fb      	ldrh	r3, [r7, #14]
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f000 fd28 	bl	80043e4 <SDMMC_CmdSendCSD>
 8003994:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	e059      	b.n	8003a54 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fb0b 	bl	8003fc2 <SDIO_GetResponse>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2104      	movs	r1, #4
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fb02 	bl	8003fc2 <SDIO_GetResponse>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2108      	movs	r1, #8
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 faf9 	bl	8003fc2 <SDIO_GetResponse>
 80039d0:	4602      	mov	r2, r0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	210c      	movs	r1, #12
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 faf0 	bl	8003fc2 <SDIO_GetResponse>
 80039e2:	4602      	mov	r2, r0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2104      	movs	r1, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fae7 	bl	8003fc2 <SDIO_GetResponse>
 80039f4:	4603      	mov	r3, r0
 80039f6:	0d1a      	lsrs	r2, r3, #20
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fcf2 	bl	80033ec <HAL_SD_GetCardCSD>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a12:	e01f      	b.n	8003a54 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	4608      	mov	r0, r1
 8003a26:	f000 fbd7 	bl	80041d8 <SDMMC_CmdSelDesel>
 8003a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <SD_InitCard+0x172>
  {
    return errorstate;
 8003a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a34:	e00e      	b.n	8003a54 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681d      	ldr	r5, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	466c      	mov	r4, sp
 8003a3e:	f103 0210 	add.w	r2, r3, #16
 8003a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a48:	3304      	adds	r3, #4
 8003a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f000 fa1b 	bl	8003e88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3740      	adds	r7, #64	; 0x40
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bdb0      	pop	{r4, r5, r7, pc}

08003a5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fbd2 	bl	800421e <SDMMC_CmdGoIdleState>
 8003a7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	e072      	b.n	8003b6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fbe5 	bl	800425a <SDMMC_CmdOperCond>
 8003a90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fbbb 	bl	800421e <SDMMC_CmdGoIdleState>
 8003aa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <SD_PowerON+0x5e>
    {
      return errorstate;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	e05b      	b.n	8003b6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d137      	bne.n	8003b32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fbe5 	bl	8004298 <SDMMC_CmdAppCommand>
 8003ace:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02d      	beq.n	8003b32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ad6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ada:	e047      	b.n	8003b6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fbd8 	bl	8004298 <SDMMC_CmdAppCommand>
 8003ae8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <SD_PowerON+0x98>
    {
      return errorstate;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	e03b      	b.n	8003b6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	491e      	ldr	r1, [pc, #120]	; (8003b74 <SD_PowerON+0x118>)
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fbee 	bl	80042dc <SDMMC_CmdAppOperCommand>
 8003b00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b0c:	e02e      	b.n	8003b6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fa54 	bl	8003fc2 <SDIO_GetResponse>
 8003b1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	0fdb      	lsrs	r3, r3, #31
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <SD_PowerON+0xcc>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <SD_PowerON+0xce>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]

    count++;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d802      	bhi.n	8003b42 <SD_PowerON+0xe6>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0cc      	beq.n	8003adc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d902      	bls.n	8003b52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b50:	e00c      	b.n	8003b6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
 8003b62:	e002      	b.n	8003b6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	c1100000 	.word	0xc1100000

08003b78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b8c:	e018      	b.n	8003bc0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 fc62 	bl	8004464 <SDMMC_CmdSendStatus>
 8003ba0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <SD_SendStatus+0x34>
  {
    return errorstate;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	e009      	b.n	8003bc0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fa05 	bl	8003fc2 <SDIO_GetResponse>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f9ef 	bl	8003fc2 <SDIO_GetResponse>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bee:	d102      	bne.n	8003bf6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bf4:	e02f      	b.n	8003c56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003bf6:	f107 030c 	add.w	r3, r7, #12
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f879 	bl	8003cf4 <SD_FindSCR>
 8003c02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	e023      	b.n	8003c56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01c      	beq.n	8003c52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fb37 	bl	8004298 <SDMMC_CmdAppCommand>
 8003c2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	e00f      	b.n	8003c56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fb70 	bl	8004322 <SDMMC_CmdBusWidth>
 8003c42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	e003      	b.n	8003c56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e001      	b.n	8003c56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b086      	sub	sp, #24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f9a4 	bl	8003fc2 <SDIO_GetResponse>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c84:	d102      	bne.n	8003c8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c8a:	e02f      	b.n	8003cec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c8c:	f107 030c 	add.w	r3, r7, #12
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f82e 	bl	8003cf4 <SD_FindSCR>
 8003c98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	e023      	b.n	8003cec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01c      	beq.n	8003ce8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 faec 	bl	8004298 <SDMMC_CmdAppCommand>
 8003cc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	e00f      	b.n	8003cec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fb25 	bl	8004322 <SDMMC_CmdBusWidth>
 8003cd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	e003      	b.n	8003cec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e001      	b.n	8003cec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ce8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b08f      	sub	sp, #60	; 0x3c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003cfe:	f7fc fe77 	bl	80009f0 <HAL_GetTick>
 8003d02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2108      	movs	r1, #8
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f990 	bl	8004040 <SDMMC_CmdBlockLength>
 8003d20:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	e0a9      	b.n	8003e80 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f000 faad 	bl	8004298 <SDMMC_CmdAppCommand>
 8003d3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	e09a      	b.n	8003e80 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003d50:	2308      	movs	r3, #8
 8003d52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003d54:	2330      	movs	r3, #48	; 0x30
 8003d56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f107 0210 	add.w	r2, r7, #16
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f93a 	bl	8003fe8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 faf4 	bl	8004366 <SDMMC_CmdSendSCR>
 8003d7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d022      	beq.n	8003dcc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	e07a      	b.n	8003e80 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	f107 0208 	add.w	r2, r7, #8
 8003da4:	18d4      	adds	r4, r2, r3
 8003da6:	4608      	mov	r0, r1
 8003da8:	f000 f899 	bl	8003ede <SDIO_ReadFIFO>
 8003dac:	4603      	mov	r3, r0
 8003dae:	6023      	str	r3, [r4, #0]
      index++;
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	3301      	adds	r3, #1
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003db6:	f7fc fe1b 	bl	80009f0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d102      	bne.n	8003dcc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003dc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003dca:	e059      	b.n	8003e80 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd2:	f240 432a 	movw	r3, #1066	; 0x42a
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0d6      	beq.n	8003d8a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2208      	movs	r2, #8
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003df2:	2308      	movs	r3, #8
 8003df4:	e044      	b.n	8003e80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e037      	b.n	8003e80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003e26:	2320      	movs	r3, #32
 8003e28:	e02a      	b.n	8003e80 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	061a      	lsls	r2, r3, #24
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0a1b      	lsrs	r3, r3, #8
 8003e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	0e1b      	lsrs	r3, r3, #24
 8003e50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	601a      	str	r2, [r3, #0]
    scr++;
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	3304      	adds	r3, #4
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	061a      	lsls	r2, r3, #24
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	0e1b      	lsrs	r3, r3, #24
 8003e78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	373c      	adds	r7, #60	; 0x3c
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd90      	pop	{r4, r7, pc}

08003e88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003e88:	b084      	sub	sp, #16
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	f107 001c 	add.w	r0, r7, #28
 8003e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003e9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003ea2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003ea6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003eaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003eae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003eb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003ec2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	b004      	add	sp, #16
 8003edc:	4770      	bx	lr

08003ede <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2203      	movs	r2, #3
 8003f26:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003f28:	2002      	movs	r0, #2
 8003f2a:	f7fc fd6d 	bl	8000a08 <HAL_Delay>
  
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0303 	and.w	r3, r3, #3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003f72:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003f78:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003f7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003f8e:	f023 030f 	bic.w	r3, r3, #15
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	b2db      	uxtb	r3, r3
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
}  
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800400e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004014:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800401a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004032:	2300      	movs	r3, #0

}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800404e:	2310      	movs	r3, #16
 8004050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800405a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ff74 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	2110      	movs	r1, #16
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa40 	bl	80044f8 <SDMMC_GetCmdResp1>
 8004078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800407a:	69fb      	ldr	r3, [r7, #28]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004092:	2311      	movs	r3, #17
 8004094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004096:	2340      	movs	r3, #64	; 0x40
 8004098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800409e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040a4:	f107 0308 	add.w	r3, r7, #8
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ff52 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	2111      	movs	r1, #17
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa1e 	bl	80044f8 <SDMMC_GetCmdResp1>
 80040bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040be:	69fb      	ldr	r3, [r7, #28]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3720      	adds	r7, #32
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80040d6:	2312      	movs	r3, #18
 80040d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040da:	2340      	movs	r3, #64	; 0x40
 80040dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040e8:	f107 0308 	add.w	r3, r7, #8
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ff30 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	2112      	movs	r1, #18
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f9fc 	bl	80044f8 <SDMMC_GetCmdResp1>
 8004100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004102:	69fb      	ldr	r3, [r7, #28]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800411a:	2318      	movs	r3, #24
 800411c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800411e:	2340      	movs	r3, #64	; 0x40
 8004120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800412a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800412c:	f107 0308 	add.w	r3, r7, #8
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff0e 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	2118      	movs	r1, #24
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9da 	bl	80044f8 <SDMMC_GetCmdResp1>
 8004144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004146:	69fb      	ldr	r3, [r7, #28]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800415e:	2319      	movs	r3, #25
 8004160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004162:	2340      	movs	r3, #64	; 0x40
 8004164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800416a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004170:	f107 0308 	add.w	r3, r7, #8
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff feec 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	2119      	movs	r1, #25
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f9b8 	bl	80044f8 <SDMMC_GetCmdResp1>
 8004188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800418a:	69fb      	ldr	r3, [r7, #28]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80041a0:	230c      	movs	r3, #12
 80041a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041a4:	2340      	movs	r3, #64	; 0x40
 80041a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fecb 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <SDMMC_CmdStopTransfer+0x40>)
 80041c0:	210c      	movs	r1, #12
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f998 	bl	80044f8 <SDMMC_GetCmdResp1>
 80041c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041ca:	69fb      	ldr	r3, [r7, #28]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	05f5e100 	.word	0x05f5e100

080041d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80041e8:	2307      	movs	r3, #7
 80041ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041ec:	2340      	movs	r3, #64	; 0x40
 80041ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041fa:	f107 0310 	add.w	r3, r7, #16
 80041fe:	4619      	mov	r1, r3
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fea7 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	2107      	movs	r1, #7
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f973 	bl	80044f8 <SDMMC_GetCmdResp1>
 8004212:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004216:	4618      	mov	r0, r3
 8004218:	3728      	adds	r7, #40	; 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b088      	sub	sp, #32
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800423a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fe86 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f92d 	bl	80044a8 <SDMMC_GetCmdError>
 800424e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004250:	69fb      	ldr	r3, [r7, #28]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b088      	sub	sp, #32
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004262:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004268:	2308      	movs	r3, #8
 800426a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800426c:	2340      	movs	r3, #64	; 0x40
 800426e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004278:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800427a:	f107 0308 	add.w	r3, r7, #8
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fe67 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fb16 	bl	80048b8 <SDMMC_GetCmdResp7>
 800428c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800428e:	69fb      	ldr	r3, [r7, #28]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80042a6:	2337      	movs	r3, #55	; 0x37
 80042a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042b8:	f107 0308 	add.w	r3, r7, #8
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fe48 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	2137      	movs	r1, #55	; 0x37
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f914 	bl	80044f8 <SDMMC_GetCmdResp1>
 80042d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042d2:	69fb      	ldr	r3, [r7, #28]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80042f2:	2329      	movs	r3, #41	; 0x29
 80042f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042f6:	2340      	movs	r3, #64	; 0x40
 80042f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004304:	f107 0308 	add.w	r3, r7, #8
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fe22 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fa23 	bl	800475c <SDMMC_GetCmdResp3>
 8004316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004318:	69fb      	ldr	r3, [r7, #28]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b088      	sub	sp, #32
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004330:	2306      	movs	r3, #6
 8004332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004334:	2340      	movs	r3, #64	; 0x40
 8004336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800433c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004340:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fe03 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	2106      	movs	r1, #6
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8cf 	bl	80044f8 <SDMMC_GetCmdResp1>
 800435a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800435c:	69fb      	ldr	r3, [r7, #28]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b088      	sub	sp, #32
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004372:	2333      	movs	r3, #51	; 0x33
 8004374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004376:	2340      	movs	r3, #64	; 0x40
 8004378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800437e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004382:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004384:	f107 0308 	add.w	r3, r7, #8
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fde2 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	2133      	movs	r1, #51	; 0x33
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8ae 	bl	80044f8 <SDMMC_GetCmdResp1>
 800439c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800439e:	69fb      	ldr	r3, [r7, #28]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80043b4:	2302      	movs	r3, #2
 80043b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80043b8:	23c0      	movs	r3, #192	; 0xc0
 80043ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff fdc1 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f97c 	bl	80046d0 <SDMMC_GetCmdResp2>
 80043d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043da:	69fb      	ldr	r3, [r7, #28]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80043f2:	2309      	movs	r3, #9
 80043f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80043f6:	23c0      	movs	r3, #192	; 0xc0
 80043f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004402:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004404:	f107 0308 	add.w	r3, r7, #8
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fda2 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f95d 	bl	80046d0 <SDMMC_GetCmdResp2>
 8004416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004418:	69fb      	ldr	r3, [r7, #28]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b088      	sub	sp, #32
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004430:	2303      	movs	r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004434:	2340      	movs	r3, #64	; 0x40
 8004436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800443c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004440:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fd83 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	2103      	movs	r1, #3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9bc 	bl	80047d0 <SDMMC_GetCmdResp6>
 8004458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800445a:	69fb      	ldr	r3, [r7, #28]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004472:	230d      	movs	r3, #13
 8004474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004476:	2340      	movs	r3, #64	; 0x40
 8004478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800447e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004482:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004484:	f107 0308 	add.w	r3, r7, #8
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fd62 	bl	8003f54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	210d      	movs	r1, #13
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f82e 	bl	80044f8 <SDMMC_GetCmdResp1>
 800449c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800449e:	69fb      	ldr	r3, [r7, #28]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3720      	adds	r7, #32
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80044a8:	b490      	push	{r4, r7}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <SDMMC_GetCmdError+0x48>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <SDMMC_GetCmdError+0x4c>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	0a5b      	lsrs	r3, r3, #9
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80044c4:	4623      	mov	r3, r4
 80044c6:	1e5c      	subs	r4, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044d0:	e009      	b.n	80044e6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f2      	beq.n	80044c4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	22c5      	movs	r2, #197	; 0xc5
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc90      	pop	{r4, r7}
 80044ee:	4770      	bx	lr
 80044f0:	20000000 	.word	0x20000000
 80044f4:	10624dd3 	.word	0x10624dd3

080044f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	460b      	mov	r3, r1
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004506:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <SDMMC_GetCmdResp1+0x1cc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a6f      	ldr	r2, [pc, #444]	; (80046c8 <SDMMC_GetCmdResp1+0x1d0>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	0a5b      	lsrs	r3, r3, #9
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004518:	4623      	mov	r3, r4
 800451a:	1e5c      	subs	r4, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004524:	e0c9      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <SDMMC_GetCmdResp1+0x20>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1eb      	bne.n	8004518 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2204      	movs	r2, #4
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004552:	2304      	movs	r3, #4
 8004554:	e0b1      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004568:	2301      	movs	r3, #1
 800456a:	e0a6      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	22c5      	movs	r2, #197	; 0xc5
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff fd18 	bl	8003fa8 <SDIO_GetCommandResponse>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	7afb      	ldrb	r3, [r7, #11]
 800457e:	4293      	cmp	r3, r2
 8004580:	d001      	beq.n	8004586 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004582:	2301      	movs	r3, #1
 8004584:	e099      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004586:	2100      	movs	r1, #0
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff fd1a 	bl	8003fc2 <SDIO_GetResponse>
 800458e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4b4e      	ldr	r3, [pc, #312]	; (80046cc <SDMMC_GetCmdResp1+0x1d4>)
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800459a:	2300      	movs	r3, #0
 800459c:	e08d      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	da02      	bge.n	80045aa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80045a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045a8:	e087      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80045b4:	2340      	movs	r3, #64	; 0x40
 80045b6:	e080      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	e079      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80045d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045d4:	e071      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80045e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e4:	e069      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80045f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f4:	e061      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004604:	e059      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004614:	e051      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004624:	e049      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004634:	e041      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004644:	e039      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004654:	e031      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004660:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004664:	e029      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004670:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004674:	e021      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004684:	e019      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004690:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004694:	e011      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80046a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046a4:	e009      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80046b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80046b4:	e001      	b.n	80046ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80046b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000000 	.word	0x20000000
 80046c8:	10624dd3 	.word	0x10624dd3
 80046cc:	fdffe008 	.word	0xfdffe008

080046d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80046d0:	b490      	push	{r4, r7}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <SDMMC_GetCmdResp2+0x84>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <SDMMC_GetCmdResp2+0x88>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0a5b      	lsrs	r3, r3, #9
 80046e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80046ec:	4623      	mov	r3, r4
 80046ee:	1e5c      	subs	r4, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80046f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046f8:	e026      	b.n	8004748 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <SDMMC_GetCmdResp2+0x1c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1eb      	bne.n	80046ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2204      	movs	r2, #4
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004726:	2304      	movs	r3, #4
 8004728:	e00e      	b.n	8004748 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800473c:	2301      	movs	r3, #1
 800473e:	e003      	b.n	8004748 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	22c5      	movs	r2, #197	; 0xc5
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bc90      	pop	{r4, r7}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000000 	.word	0x20000000
 8004758:	10624dd3 	.word	0x10624dd3

0800475c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800475c:	b490      	push	{r4, r7}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <SDMMC_GetCmdResp3+0x6c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <SDMMC_GetCmdResp3+0x70>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0a5b      	lsrs	r3, r3, #9
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004778:	4623      	mov	r3, r4
 800477a:	1e5c      	subs	r4, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004784:	e01b      	b.n	80047be <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <SDMMC_GetCmdResp3+0x1c>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1eb      	bne.n	8004778 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2204      	movs	r2, #4
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047b2:	2304      	movs	r3, #4
 80047b4:	e003      	b.n	80047be <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	22c5      	movs	r2, #197	; 0xc5
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc90      	pop	{r4, r7}
 80047c6:	4770      	bx	lr
 80047c8:	20000000 	.word	0x20000000
 80047cc:	10624dd3 	.word	0x10624dd3

080047d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	460b      	mov	r3, r1
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047de:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <SDMMC_GetCmdResp6+0xe0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <SDMMC_GetCmdResp6+0xe4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80047f2:	4623      	mov	r3, r4
 80047f4:	1e5c      	subs	r4, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047fe:	e052      	b.n	80048a6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004804:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <SDMMC_GetCmdResp6+0x22>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1eb      	bne.n	80047f2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2204      	movs	r2, #4
 800482a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800482c:	2304      	movs	r3, #4
 800482e:	e03a      	b.n	80048a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004842:	2301      	movs	r3, #1
 8004844:	e02f      	b.n	80048a6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff fbae 	bl	8003fa8 <SDIO_GetCommandResponse>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	7afb      	ldrb	r3, [r7, #11]
 8004852:	4293      	cmp	r3, r2
 8004854:	d001      	beq.n	800485a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004856:	2301      	movs	r3, #1
 8004858:	e025      	b.n	80048a6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22c5      	movs	r2, #197	; 0xc5
 800485e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004860:	2100      	movs	r1, #0
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff fbad 	bl	8003fc2 <SDIO_GetResponse>
 8004868:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800487e:	2300      	movs	r3, #0
 8004880:	e011      	b.n	80048a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800488c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004890:	e009      	b.n	80048a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800489c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a0:	e001      	b.n	80048a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80048a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000000 	.word	0x20000000
 80048b4:	10624dd3 	.word	0x10624dd3

080048b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80048b8:	b490      	push	{r4, r7}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048c0:	4b21      	ldr	r3, [pc, #132]	; (8004948 <SDMMC_GetCmdResp7+0x90>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a21      	ldr	r2, [pc, #132]	; (800494c <SDMMC_GetCmdResp7+0x94>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0a5b      	lsrs	r3, r3, #9
 80048cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80048d4:	4623      	mov	r3, r4
 80048d6:	1e5c      	subs	r4, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048e0:	e02c      	b.n	800493c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <SDMMC_GetCmdResp7+0x1c>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1eb      	bne.n	80048d4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2204      	movs	r2, #4
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800490e:	2304      	movs	r3, #4
 8004910:	e014      	b.n	800493c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004924:	2301      	movs	r3, #1
 8004926:	e009      	b.n	800493c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2240      	movs	r2, #64	; 0x40
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800493a:	2300      	movs	r3, #0
  
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bc90      	pop	{r4, r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000000 	.word	0x20000000
 800494c:	10624dd3 	.word	0x10624dd3

08004950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004950:	b084      	sub	sp, #16
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	f107 001c 	add.w	r0, r7, #28
 800495e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	2b01      	cmp	r3, #1
 8004966:	d122      	bne.n	80049ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800497c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f001 fac6 	bl	8005f34 <USB_CoreReset>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e01a      	b.n	80049e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 faba 	bl	8005f34 <USB_CoreReset>
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
 80049d6:	e005      	b.n	80049e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d10b      	bne.n	8004a02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f043 0206 	orr.w	r2, r3, #6
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a0e:	b004      	add	sp, #16
 8004a10:	4770      	bx	lr
	...

08004a14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d165      	bne.n	8004af4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a41      	ldr	r2, [pc, #260]	; (8004b30 <USB_SetTurnaroundTime+0x11c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d906      	bls.n	8004a3e <USB_SetTurnaroundTime+0x2a>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <USB_SetTurnaroundTime+0x120>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d202      	bcs.n	8004a3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a38:	230f      	movs	r3, #15
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e062      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <USB_SetTurnaroundTime+0x120>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d306      	bcc.n	8004a54 <USB_SetTurnaroundTime+0x40>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <USB_SetTurnaroundTime+0x124>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d202      	bcs.n	8004a54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a4e:	230e      	movs	r3, #14
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e057      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a38      	ldr	r2, [pc, #224]	; (8004b38 <USB_SetTurnaroundTime+0x124>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d306      	bcc.n	8004a6a <USB_SetTurnaroundTime+0x56>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <USB_SetTurnaroundTime+0x128>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d202      	bcs.n	8004a6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a64:	230d      	movs	r3, #13
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e04c      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <USB_SetTurnaroundTime+0x128>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d306      	bcc.n	8004a80 <USB_SetTurnaroundTime+0x6c>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <USB_SetTurnaroundTime+0x12c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d802      	bhi.n	8004a80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e041      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <USB_SetTurnaroundTime+0x12c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d906      	bls.n	8004a96 <USB_SetTurnaroundTime+0x82>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a2e      	ldr	r2, [pc, #184]	; (8004b44 <USB_SetTurnaroundTime+0x130>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d802      	bhi.n	8004a96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a90:	230b      	movs	r3, #11
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e036      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a2a      	ldr	r2, [pc, #168]	; (8004b44 <USB_SetTurnaroundTime+0x130>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d906      	bls.n	8004aac <USB_SetTurnaroundTime+0x98>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	; (8004b48 <USB_SetTurnaroundTime+0x134>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d802      	bhi.n	8004aac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aa6:	230a      	movs	r3, #10
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e02b      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <USB_SetTurnaroundTime+0x134>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d906      	bls.n	8004ac2 <USB_SetTurnaroundTime+0xae>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <USB_SetTurnaroundTime+0x138>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d202      	bcs.n	8004ac2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004abc:	2309      	movs	r3, #9
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e020      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <USB_SetTurnaroundTime+0x138>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d306      	bcc.n	8004ad8 <USB_SetTurnaroundTime+0xc4>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <USB_SetTurnaroundTime+0x13c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d802      	bhi.n	8004ad8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e015      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <USB_SetTurnaroundTime+0x13c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d906      	bls.n	8004aee <USB_SetTurnaroundTime+0xda>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <USB_SetTurnaroundTime+0x140>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d202      	bcs.n	8004aee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ae8:	2307      	movs	r3, #7
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e00a      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004aee:	2306      	movs	r3, #6
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e007      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004afa:	2309      	movs	r3, #9
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e001      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b00:	2309      	movs	r3, #9
 8004b02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	00d8acbf 	.word	0x00d8acbf
 8004b34:	00e4e1c0 	.word	0x00e4e1c0
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	01067380 	.word	0x01067380
 8004b40:	011a499f 	.word	0x011a499f
 8004b44:	01312cff 	.word	0x01312cff
 8004b48:	014ca43f 	.word	0x014ca43f
 8004b4c:	016e3600 	.word	0x016e3600
 8004b50:	01a6ab1f 	.word	0x01a6ab1f
 8004b54:	01e84800 	.word	0x01e84800

08004b58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f043 0201 	orr.w	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 0201 	bic.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d106      	bne.n	8004bc8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	e00b      	b.n	8004be0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	e001      	b.n	8004be0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e003      	b.n	8004be8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004be0:	2032      	movs	r0, #50	; 0x32
 8004be2:	f7fb ff11 	bl	8000a08 <HAL_Delay>

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e009      	b.n	8004c24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3340      	adds	r3, #64	; 0x40
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b0e      	cmp	r3, #14
 8004c28:	d9f2      	bls.n	8004c10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d11c      	bne.n	8004c6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3e:	f043 0302 	orr.w	r3, r3, #2
 8004c42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
 8004c68:	e00b      	b.n	8004c82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	4619      	mov	r1, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	680b      	ldr	r3, [r1, #0]
 8004ca0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d10c      	bne.n	8004cc2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f949 	bl	8004f48 <USB_SetDevSpeed>
 8004cb6:	e008      	b.n	8004cca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cb8:	2101      	movs	r1, #1
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f944 	bl	8004f48 <USB_SetDevSpeed>
 8004cc0:	e003      	b.n	8004cca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f93f 	bl	8004f48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cca:	2110      	movs	r1, #16
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f8f3 	bl	8004eb8 <USB_FlushTxFifo>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f911 	bl	8004f04 <USB_FlushRxFifo>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	e043      	b.n	8004d9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d2c:	d118      	bne.n	8004d60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	461a      	mov	r2, r3
 8004d42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e013      	b.n	8004d72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	461a      	mov	r2, r3
 8004d58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e008      	b.n	8004d72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2300      	movs	r3, #0
 8004d82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d3b7      	bcc.n	8004d16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	e043      	b.n	8004e34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc2:	d118      	bne.n	8004df6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e013      	b.n	8004e08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	e008      	b.n	8004e08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	2300      	movs	r3, #0
 8004e18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	461a      	mov	r2, r3
 8004e28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3301      	adds	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d3b7      	bcc.n	8004dac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f043 0210 	orr.w	r2, r3, #16
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <USB_DevInit+0x2c4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f043 0208 	orr.w	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb0:	b004      	add	sp, #16
 8004eb2:	4770      	bx	lr
 8004eb4:	803c3800 	.word	0x803c3800

08004eb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <USB_FlushTxFifo+0x48>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d901      	bls.n	8004ee4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e006      	b.n	8004ef2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d0f0      	beq.n	8004ed2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	00030d40 	.word	0x00030d40

08004f04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2210      	movs	r2, #16
 8004f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <USB_FlushRxFifo+0x40>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e006      	b.n	8004f36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d0f0      	beq.n	8004f16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	00030d40 	.word	0x00030d40

08004f48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b087      	sub	sp, #28
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0306 	and.w	r3, r3, #6
 8004f92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
 8004f9e:	e00a      	b.n	8004fb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d002      	beq.n	8004fac <USB_GetDevSpeed+0x32>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d102      	bne.n	8004fb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fac:	2302      	movs	r3, #2
 8004fae:	75fb      	strb	r3, [r7, #23]
 8004fb0:	e001      	b.n	8004fb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fb2:	230f      	movs	r3, #15
 8004fb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d13a      	bne.n	8005056 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	68f9      	ldr	r1, [r7, #12]
 8004ffa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d155      	bne.n	80050c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	78db      	ldrb	r3, [r3, #3]
 8005032:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005034:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	059b      	lsls	r3, r3, #22
 800503a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800503c:	4313      	orrs	r3, r2
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	e036      	b.n	80050c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	2101      	movs	r1, #1
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005074:	4313      	orrs	r3, r2
 8005076:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d11a      	bne.n	80050c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	78db      	ldrb	r3, [r3, #3]
 80050a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050aa:	430b      	orrs	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d161      	bne.n	80051b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005106:	d11f      	bne.n	8005148 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005126:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	2101      	movs	r1, #1
 800515a:	fa01 f303 	lsl.w	r3, r1, r3
 800515e:	b29b      	uxth	r3, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005168:	4013      	ands	r3, r2
 800516a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518c:	4013      	ands	r3, r2
 800518e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	0159      	lsls	r1, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	4619      	mov	r1, r3
 80051ac:	4b35      	ldr	r3, [pc, #212]	; (8005284 <USB_DeactivateEndpoint+0x1b0>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]
 80051b2:	e060      	b.n	8005276 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ca:	d11f      	bne.n	800520c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800520a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	2101      	movs	r1, #1
 800521e:	fa01 f303 	lsl.w	r3, r1, r3
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	43db      	mvns	r3, r3
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800522c:	4013      	ands	r3, r2
 800522e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	43db      	mvns	r3, r3
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005250:	4013      	ands	r3, r2
 8005252:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	0159      	lsls	r1, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	440b      	add	r3, r1
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	4619      	mov	r1, r3
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <USB_DeactivateEndpoint+0x1b4>)
 8005272:	4013      	ands	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	ec337800 	.word	0xec337800
 8005288:	eff37800 	.word	0xeff37800

0800528c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f040 815c 	bne.w	8005566 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d132      	bne.n	800531c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	0cdb      	lsrs	r3, r3, #19
 8005316:	04db      	lsls	r3, r3, #19
 8005318:	6113      	str	r3, [r2, #16]
 800531a:	e074      	b.n	8005406 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005336:	0cdb      	lsrs	r3, r3, #19
 8005338:	04db      	lsls	r3, r3, #19
 800533a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005356:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800535a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800535e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6959      	ldr	r1, [r3, #20]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	440b      	add	r3, r1
 8005378:	1e59      	subs	r1, r3, #1
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005382:	04d9      	lsls	r1, r3, #19
 8005384:	4b9d      	ldr	r3, [pc, #628]	; (80055fc <USB_EPStartXfer+0x370>)
 8005386:	400b      	ands	r3, r1
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	0148      	lsls	r0, r1, #5
 800538c:	69f9      	ldr	r1, [r7, #28]
 800538e:	4401      	add	r1, r0
 8005390:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005394:	4313      	orrs	r3, r2
 8005396:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ae:	69b9      	ldr	r1, [r7, #24]
 80053b0:	0148      	lsls	r0, r1, #5
 80053b2:	69f9      	ldr	r1, [r7, #28]
 80053b4:	4401      	add	r1, r0
 80053b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053ba:	4313      	orrs	r3, r2
 80053bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	78db      	ldrb	r3, [r3, #3]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d11f      	bne.n	8005406 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80053e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005400:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005404:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d14b      	bne.n	80054a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d009      	beq.n	8005428 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	461a      	mov	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	78db      	ldrb	r3, [r3, #3]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d128      	bne.n	8005482 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d110      	bne.n	8005462 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e00f      	b.n	8005482 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005480:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e12f      	b.n	8005704 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	78db      	ldrb	r3, [r3, #3]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d015      	beq.n	80054f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8117 	beq.w	8005704 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	2101      	movs	r1, #1
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	69f9      	ldr	r1, [r7, #28]
 80054ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f2:	4313      	orrs	r3, r2
 80054f4:	634b      	str	r3, [r1, #52]	; 0x34
 80054f6:	e105      	b.n	8005704 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d110      	bne.n	800552a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e00f      	b.n	800554a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005548:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	68d9      	ldr	r1, [r3, #12]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	b298      	uxth	r0, r3
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4603      	mov	r3, r0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fa2b 	bl	80059ba <USB_WritePacket>
 8005564:	e0ce      	b.n	8005704 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005580:	0cdb      	lsrs	r3, r3, #19
 8005582:	04db      	lsls	r3, r3, #19
 8005584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d126      	bne.n	8005600 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	0148      	lsls	r0, r1, #5
 80055cc:	69f9      	ldr	r1, [r7, #28]
 80055ce:	4401      	add	r1, r0
 80055d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055d4:	4313      	orrs	r3, r2
 80055d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055f6:	6113      	str	r3, [r2, #16]
 80055f8:	e036      	b.n	8005668 <USB_EPStartXfer+0x3dc>
 80055fa:	bf00      	nop
 80055fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4413      	add	r3, r2
 800560a:	1e5a      	subs	r2, r3, #1
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	8afb      	ldrh	r3, [r7, #22]
 8005626:	04d9      	lsls	r1, r3, #19
 8005628:	4b39      	ldr	r3, [pc, #228]	; (8005710 <USB_EPStartXfer+0x484>)
 800562a:	400b      	ands	r3, r1
 800562c:	69b9      	ldr	r1, [r7, #24]
 800562e:	0148      	lsls	r0, r1, #5
 8005630:	69f9      	ldr	r1, [r7, #28]
 8005632:	4401      	add	r1, r0
 8005634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005638:	4313      	orrs	r3, r2
 800563a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	8af9      	ldrh	r1, [r7, #22]
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	0148      	lsls	r0, r1, #5
 800565c:	69f9      	ldr	r1, [r7, #28]
 800565e:	4401      	add	r1, r0
 8005660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d10d      	bne.n	800568a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68d9      	ldr	r1, [r3, #12]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	460a      	mov	r2, r1
 8005688:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d128      	bne.n	80056e4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d110      	bne.n	80056c4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e00f      	b.n	80056e4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005702:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	1ff80000 	.word	0x1ff80000

08005714 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	4613      	mov	r3, r2
 8005720:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b01      	cmp	r3, #1
 8005732:	f040 80cd 	bne.w	80058d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d132      	bne.n	80057a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800575c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	0cdb      	lsrs	r3, r3, #19
 800579e:	04db      	lsls	r3, r3, #19
 80057a0:	6113      	str	r3, [r2, #16]
 80057a2:	e04e      	b.n	8005842 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	0cdb      	lsrs	r3, r3, #19
 80057c0:	04db      	lsls	r3, r3, #19
 80057c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d903      	bls.n	80057fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800581a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005832:	6939      	ldr	r1, [r7, #16]
 8005834:	0148      	lsls	r0, r1, #5
 8005836:	6979      	ldr	r1, [r7, #20]
 8005838:	4401      	add	r1, r0
 800583a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800583e:	4313      	orrs	r3, r2
 8005840:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d11e      	bne.n	8005886 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	461a      	mov	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e092      	b.n	80059ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d07e      	beq.n	80059ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	2101      	movs	r1, #1
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	6979      	ldr	r1, [r7, #20]
 80058c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ca:	4313      	orrs	r3, r2
 80058cc:	634b      	str	r3, [r1, #52]	; 0x34
 80058ce:	e06d      	b.n	80059ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ea:	0cdb      	lsrs	r3, r3, #19
 80058ec:	04db      	lsls	r3, r3, #19
 80058ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800590e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005912:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005942:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595a:	6939      	ldr	r1, [r7, #16]
 800595c:	0148      	lsls	r0, r1, #5
 800595e:	6979      	ldr	r1, [r7, #20]
 8005960:	4401      	add	r1, r0
 8005962:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005966:	4313      	orrs	r3, r2
 8005968:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10d      	bne.n	800598c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d009      	beq.n	800598c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	68d9      	ldr	r1, [r3, #12]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	460a      	mov	r2, r1
 800598a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b089      	sub	sp, #36	; 0x24
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	4611      	mov	r1, r2
 80059c6:	461a      	mov	r2, r3
 80059c8:	460b      	mov	r3, r1
 80059ca:	71fb      	strb	r3, [r7, #7]
 80059cc:	4613      	mov	r3, r2
 80059ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80059d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11a      	bne.n	8005a16 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059e0:	88bb      	ldrh	r3, [r7, #4]
 80059e2:	3303      	adds	r3, #3
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e00f      	b.n	8005a0e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	031a      	lsls	r2, r3, #12
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fa:	461a      	mov	r2, r3
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3304      	adds	r3, #4
 8005a06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3eb      	bcc.n	80059ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3724      	adds	r7, #36	; 0x24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	089b      	lsrs	r3, r3, #2
 8005a40:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	e00b      	b.n	8005a60 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3304      	adds	r3, #4
 8005a58:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d3ef      	bcc.n	8005a48 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a68:	69fb      	ldr	r3, [r7, #28]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d12c      	bne.n	8005aec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	db12      	blt.n	8005aca <USB_EPSetStall+0x54>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00f      	beq.n	8005aca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ac8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e02b      	b.n	8005b44 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	db12      	blt.n	8005b24 <USB_EPSetStall+0xae>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00f      	beq.n	8005b24 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b22:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d128      	bne.n	8005bc0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	78db      	ldrb	r3, [r3, #3]
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d003      	beq.n	8005b9e <USB_EPClearStall+0x4c>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	78db      	ldrb	r3, [r3, #3]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d138      	bne.n	8005c10 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e027      	b.n	8005c10 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d003      	beq.n	8005bf0 <USB_EPClearStall+0x9e>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	78db      	ldrb	r3, [r3, #3]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d10f      	bne.n	8005c10 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c40:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c84:	f023 0303 	bic.w	r3, r3, #3
 8005c88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c98:	f023 0302 	bic.w	r3, r3, #2
 8005c9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cda:	f043 0302 	orr.w	r3, r3, #2
 8005cde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4013      	ands	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	0c1b      	lsrs	r3, r3, #16
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	b29b      	uxth	r3, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	4013      	ands	r3, r2
 8005da8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005daa:	68bb      	ldr	r3, [r7, #8]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dda:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
 8005de8:	01db      	lsls	r3, r3, #7
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e06:	68bb      	ldr	r3, [r7, #8]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f003 0301 	and.w	r3, r3, #1
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	460b      	mov	r3, r1
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	333c      	adds	r3, #60	; 0x3c
 8005e8e:	3304      	adds	r3, #4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <USB_EP0_OutStart+0xb8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d90a      	bls.n	8005eb2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eac:	d101      	bne.n	8005eb2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e037      	b.n	8005f22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee0:	f043 0318 	orr.w	r3, r3, #24
 8005ee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ef8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005efa:	7afb      	ldrb	r3, [r7, #11]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d10f      	bne.n	8005f20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	4f54300a 	.word	0x4f54300a

08005f34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3301      	adds	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <USB_CoreReset+0x64>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e01b      	b.n	8005f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	daf2      	bge.n	8005f40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f043 0201 	orr.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <USB_CoreReset+0x64>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d901      	bls.n	8005f7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e006      	b.n	8005f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d0f0      	beq.n	8005f6a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	00030d40 	.word	0x00030d40

08005f9c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005fa8:	f44f 701d 	mov.w	r0, #628	; 0x274
 8005fac:	f003 fb42 	bl	8009634 <malloc>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e034      	b.n	8006030 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	7c1b      	ldrb	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d115      	bne.n	8006002 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fda:	2202      	movs	r2, #2
 8005fdc:	2101      	movs	r1, #1
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f003 f98f 	bl	8009302 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	2181      	movs	r1, #129	; 0x81
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f003 f984 	bl	8009302 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	871a      	strh	r2, [r3, #56]	; 0x38
 8006000:	e012      	b.n	8006028 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	2202      	movs	r2, #2
 8006006:	2101      	movs	r1, #1
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f003 f97a 	bl	8009302 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006016:	2340      	movs	r3, #64	; 0x40
 8006018:	2202      	movs	r2, #2
 800601a:	2181      	movs	r1, #129	; 0x81
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f003 f970 	bl	8009302 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f990 	bl	800634e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f003 f981 	bl	800934e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006054:	2181      	movs	r1, #129	; 0x81
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f003 f979 	bl	800934e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9c9 	bl	80063fa <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006078:	4618      	mov	r0, r3
 800607a:	f003 fae3 	bl	8009644 <free>
    pdev->pClassData = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d04e      	beq.n	8006154 <USBD_MSC_Setup+0xc4>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	f040 80c8 	bne.w	800624c <USBD_MSC_Setup+0x1bc>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2bfe      	cmp	r3, #254	; 0xfe
 80060c2:	d002      	beq.n	80060ca <USBD_MSC_Setup+0x3a>
 80060c4:	2bff      	cmp	r3, #255	; 0xff
 80060c6:	d025      	beq.n	8006114 <USBD_MSC_Setup+0x84>
 80060c8:	e03c      	b.n	8006144 <USBD_MSC_Setup+0xb4>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	885b      	ldrh	r3, [r3, #2]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d119      	bne.n	8006106 <USBD_MSC_Setup+0x76>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88db      	ldrh	r3, [r3, #6]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d115      	bne.n	8006106 <USBD_MSC_Setup+0x76>
          ((req->bmRequest & 0x80U) == 0x80U))
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da10      	bge.n	8006106 <USBD_MSC_Setup+0x76>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	4798      	blx	r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f002 fd13 	bl	8008b28 <USBD_CtlSendData>
 8006102:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006104:	e025      	b.n	8006152 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f002 fc9c 	bl	8008a46 <USBD_CtlError>
        ret = USBD_FAIL;
 800610e:	2303      	movs	r3, #3
 8006110:	75fb      	strb	r3, [r7, #23]
      break;
 8006112:	e01e      	b.n	8006152 <USBD_MSC_Setup+0xc2>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	885b      	ldrh	r3, [r3, #2]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10c      	bne.n	8006136 <USBD_MSC_Setup+0xa6>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	88db      	ldrh	r3, [r3, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d108      	bne.n	8006136 <USBD_MSC_Setup+0xa6>
          ((req->bmRequest & 0x80U) != 0x80U))
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800612a:	2b00      	cmp	r3, #0
 800612c:	db03      	blt.n	8006136 <USBD_MSC_Setup+0xa6>
      {
        MSC_BOT_Reset(pdev);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f941 	bl	80063b6 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006134:	e00d      	b.n	8006152 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f002 fc84 	bl	8008a46 <USBD_CtlError>
        ret = USBD_FAIL;
 800613e:	2303      	movs	r3, #3
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	e006      	b.n	8006152 <USBD_MSC_Setup+0xc2>

    default:
      USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f002 fc7d 	bl	8008a46 <USBD_CtlError>
      ret = USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	75fb      	strb	r3, [r7, #23]
      break;
 8006150:	bf00      	nop
    }
    break;
 8006152:	e082      	b.n	800625a <USBD_MSC_Setup+0x1ca>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b0b      	cmp	r3, #11
 800615a:	d86e      	bhi.n	800623a <USBD_MSC_Setup+0x1aa>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <USBD_MSC_Setup+0xd4>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	08006195 	.word	0x08006195
 8006168:	0800620b 	.word	0x0800620b
 800616c:	0800623b 	.word	0x0800623b
 8006170:	0800623b 	.word	0x0800623b
 8006174:	0800623b 	.word	0x0800623b
 8006178:	0800623b 	.word	0x0800623b
 800617c:	0800623b 	.word	0x0800623b
 8006180:	0800623b 	.word	0x0800623b
 8006184:	0800623b 	.word	0x0800623b
 8006188:	0800623b 	.word	0x0800623b
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061e5 	.word	0x080061e5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619a:	2b03      	cmp	r3, #3
 800619c:	d107      	bne.n	80061ae <USBD_MSC_Setup+0x11e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800619e:	f107 030e 	add.w	r3, r7, #14
 80061a2:	2202      	movs	r2, #2
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f002 fcbe 	bl	8008b28 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80061ac:	e04d      	b.n	800624a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f002 fc48 	bl	8008a46 <USBD_CtlError>
        ret = USBD_FAIL;
 80061b6:	2303      	movs	r3, #3
 80061b8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ba:	e046      	b.n	800624a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d107      	bne.n	80061d6 <USBD_MSC_Setup+0x146>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3304      	adds	r3, #4
 80061ca:	2201      	movs	r2, #1
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f002 fcaa 	bl	8008b28 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80061d4:	e039      	b.n	800624a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f002 fc34 	bl	8008a46 <USBD_CtlError>
        ret = USBD_FAIL;
 80061de:	2303      	movs	r3, #3
 80061e0:	75fb      	strb	r3, [r7, #23]
      break;
 80061e2:	e032      	b.n	800624a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d106      	bne.n	80061fc <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	885b      	ldrh	r3, [r3, #2]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80061fa:	e026      	b.n	800624a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 fc21 	bl	8008a46 <USBD_CtlError>
        ret = USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	e01f      	b.n	800624a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006210:	2b03      	cmp	r3, #3
 8006212:	d119      	bne.n	8006248 <USBD_MSC_Setup+0x1b8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	885b      	ldrh	r3, [r3, #2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d115      	bne.n	8006248 <USBD_MSC_Setup+0x1b8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	889b      	ldrh	r3, [r3, #4]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f003 f8b1 	bl	800938c <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	889b      	ldrh	r3, [r3, #4]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa5c 	bl	80066f0 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8006238:	e006      	b.n	8006248 <USBD_MSC_Setup+0x1b8>

    default:
      USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f002 fc02 	bl	8008a46 <USBD_CtlError>
      ret = USBD_FAIL;
 8006242:	2303      	movs	r3, #3
 8006244:	75fb      	strb	r3, [r7, #23]
      break;
 8006246:	e000      	b.n	800624a <USBD_MSC_Setup+0x1ba>
      break;
 8006248:	bf00      	nop
    }
    break;
 800624a:	e006      	b.n	800625a <USBD_MSC_Setup+0x1ca>

  default:
    USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f002 fbf9 	bl	8008a46 <USBD_CtlError>
    ret = USBD_FAIL;
 8006254:	2303      	movs	r3, #3
 8006256:	75fb      	strb	r3, [r7, #23]
    break;
 8006258:	bf00      	nop
  }

  return (uint8_t)ret;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f8d1 	bl	800641c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8f3 	bl	8006480 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000044 	.word	0x20000044

080062c4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000064 	.word	0x20000064

080062e4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80062f2:	4b03      	ldr	r3, [pc, #12]	; (8006300 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	20000084 	.word	0x20000084

08006304 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	220a      	movs	r2, #10
 8006310:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006312:	4b03      	ldr	r3, [pc, #12]	; (8006320 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	200000a4 	.word	0x200000a4

08006324 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	e004      	b.n	8006342 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800635c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2000      	movs	r0, #0
 800638c:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800638e:	2101      	movs	r1, #1
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f002 fffb 	bl	800938c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006396:	2181      	movs	r1, #129	; 0x81
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f002 fff7 	bl	800938c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80063a4:	231f      	movs	r3, #31
 80063a6:	2101      	movs	r1, #1
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f003 f8b8 	bl	800951e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80063d2:	2181      	movs	r1, #129	; 0x81
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f003 f817 	bl	8009408 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80063da:	2101      	movs	r1, #1
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f003 f813 	bl	8009408 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80063e8:	231f      	movs	r3, #31
 80063ea:	2101      	movs	r1, #1
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f003 f896 	bl	800951e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006408:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	721a      	strb	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	7a1b      	ldrb	r3, [r3, #8]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d005      	beq.n	8006444 <MSC_BOT_DataIn+0x28>
 8006438:	2b02      	cmp	r3, #2
 800643a:	db1a      	blt.n	8006472 <MSC_BOT_DataIn+0x56>
 800643c:	3b03      	subs	r3, #3
 800643e:	2b01      	cmp	r3, #1
 8006440:	d817      	bhi.n	8006472 <MSC_BOT_DataIn+0x56>
 8006442:	e011      	b.n	8006468 <MSC_BOT_DataIn+0x4c>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006450:	461a      	mov	r2, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f974 	bl	8006740 <SCSI_ProcessCmd>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	da0b      	bge.n	8006476 <MSC_BOT_DataIn+0x5a>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800645e:	2101      	movs	r1, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8eb 	bl	800663c <MSC_BOT_SendCSW>
    }
    break;
 8006466:	e006      	b.n	8006476 <MSC_BOT_DataIn+0x5a>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006468:	2100      	movs	r1, #0
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f8e6 	bl	800663c <MSC_BOT_SendCSW>
    break;
 8006470:	e002      	b.n	8006478 <MSC_BOT_DataIn+0x5c>

  default:
    break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <MSC_BOT_DataIn+0x5c>
    break;
 8006476:	bf00      	nop
  }
}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006492:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	7a1b      	ldrb	r3, [r3, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <MSC_BOT_DataOut+0x22>
 800649c:	2b01      	cmp	r3, #1
 800649e:	d004      	beq.n	80064aa <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80064a0:	e015      	b.n	80064ce <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f818 	bl	80064d8 <MSC_BOT_CBW_Decode>
      break;
 80064a8:	e011      	b.n	80064ce <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80064b6:	461a      	mov	r2, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f941 	bl	8006740 <SCSI_ProcessCmd>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da03      	bge.n	80064cc <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80064c4:	2101      	movs	r1, #1
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8b8 	bl	800663c <MSC_BOT_SendCSW>
      break;
 80064cc:	bf00      	nop
  }
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006500:	2101      	movs	r1, #1
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f003 f82c 	bl	8009560 <USBD_LL_GetRxDataSize>
 8006508:	4603      	mov	r3, r0
 800650a:	2b1f      	cmp	r3, #31
 800650c:	d114      	bne.n	8006538 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <MSC_BOT_CBW_Decode+0x108>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d10e      	bne.n	8006538 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006520:	2b01      	cmp	r3, #1
 8006522:	d809      	bhi.n	8006538 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006534:	2b10      	cmp	r3, #16
 8006536:	d90e      	bls.n	8006556 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800653e:	2320      	movs	r3, #32
 8006540:	2205      	movs	r2, #5
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd71 	bl	800702a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2202      	movs	r2, #2
 800654c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8a0 	bl	8006694 <MSC_BOT_Abort>
 8006554:	e041      	b.n	80065da <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006562:	461a      	mov	r2, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8eb 	bl	8006740 <SCSI_ProcessCmd>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	da0c      	bge.n	800658a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	7a1b      	ldrb	r3, [r3, #8]
 8006574:	2b05      	cmp	r3, #5
 8006576:	d104      	bne.n	8006582 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006578:	2101      	movs	r1, #1
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f85e 	bl	800663c <MSC_BOT_SendCSW>
 8006580:	e02b      	b.n	80065da <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f886 	bl	8006694 <MSC_BOT_Abort>
 8006588:	e027      	b.n	80065da <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	7a1b      	ldrb	r3, [r3, #8]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d022      	beq.n	80065d8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006596:	2b01      	cmp	r3, #1
 8006598:	d01e      	beq.n	80065d8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d01a      	beq.n	80065d8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f103 0110 	add.w	r1, r3, #16
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f814 	bl	80065e4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80065bc:	e00d      	b.n	80065da <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80065c6:	2100      	movs	r1, #0
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f837 	bl	800663c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80065ce:	e004      	b.n	80065da <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f85f 	bl	8006694 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80065d6:	e000      	b.n	80065da <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80065d8:	bf00      	nop
    }
  }
}
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	43425355 	.word	0x43425355

080065e4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4293      	cmp	r3, r2
 8006602:	bf28      	it	cs
 8006604:	4613      	movcs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2204      	movs	r2, #4
 8006624:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	2181      	movs	r1, #129	; 0x81
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f002 ff55 	bl	80094dc <USBD_LL_Transmit>
}
 8006632:	bf00      	nop
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a0f      	ldr	r2, [pc, #60]	; (8006690 <MSC_BOT_SendCSW+0x54>)
 8006654:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800666c:	230d      	movs	r3, #13
 800666e:	2181      	movs	r1, #129	; 0x81
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 ff33 	bl	80094dc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800667c:	231f      	movs	r3, #31
 800667e:	2101      	movs	r1, #1
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f002 ff4c 	bl	800951e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	53425355 	.word	0x53425355

08006694 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10c      	bne.n	80066c8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d103      	bne.n	80066c8 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80066c0:	2101      	movs	r1, #1
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f002 fe81 	bl	80093ca <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80066c8:	2181      	movs	r1, #129	; 0x81
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f002 fe7d 	bl	80093ca <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	7a5b      	ldrb	r3, [r3, #9]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d107      	bne.n	80066e8 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80066d8:	2181      	movs	r1, #129	; 0x81
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f002 fe75 	bl	80093ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80066e0:	2101      	movs	r1, #1
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f002 fe71 	bl	80093ca <USBD_LL_StallEP>
  }
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006702:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	7a5b      	ldrb	r3, [r3, #9]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d108      	bne.n	800671e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800670c:	2181      	movs	r1, #129	; 0x81
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f002 fe5b 	bl	80093ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006714:	2101      	movs	r1, #1
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f002 fe57 	bl	80093ca <USBD_LL_StallEP>
 800671c:	e00d      	b.n	800673a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800671e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da08      	bge.n	8006738 <MSC_BOT_CplClrFeature+0x48>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	7a5b      	ldrb	r3, [r3, #9]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d004      	beq.n	8006738 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800672e:	2101      	movs	r1, #1
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff83 	bl	800663c <MSC_BOT_SendCSW>
 8006736:	e000      	b.n	800673a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8006738:	bf00      	nop
  }
}
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	460b      	mov	r3, r1
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006754:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2baa      	cmp	r3, #170	; 0xaa
 800675c:	f000 8144 	beq.w	80069e8 <SCSI_ProcessCmd+0x2a8>
 8006760:	2baa      	cmp	r3, #170	; 0xaa
 8006762:	f300 8153 	bgt.w	8006a0c <SCSI_ProcessCmd+0x2cc>
 8006766:	2ba8      	cmp	r3, #168	; 0xa8
 8006768:	f000 812c 	beq.w	80069c4 <SCSI_ProcessCmd+0x284>
 800676c:	2ba8      	cmp	r3, #168	; 0xa8
 800676e:	f300 814d 	bgt.w	8006a0c <SCSI_ProcessCmd+0x2cc>
 8006772:	2b5a      	cmp	r3, #90	; 0x5a
 8006774:	f300 80c0 	bgt.w	80068f8 <SCSI_ProcessCmd+0x1b8>
 8006778:	2b00      	cmp	r3, #0
 800677a:	f2c0 8147 	blt.w	8006a0c <SCSI_ProcessCmd+0x2cc>
 800677e:	2b5a      	cmp	r3, #90	; 0x5a
 8006780:	f200 8144 	bhi.w	8006a0c <SCSI_ProcessCmd+0x2cc>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <SCSI_ProcessCmd+0x4c>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080068ff 	.word	0x080068ff
 8006790:	08006a0d 	.word	0x08006a0d
 8006794:	08006a0d 	.word	0x08006a0d
 8006798:	08006911 	.word	0x08006911
 800679c:	08006a0d 	.word	0x08006a0d
 80067a0:	08006a0d 	.word	0x08006a0d
 80067a4:	08006a0d 	.word	0x08006a0d
 80067a8:	08006a0d 	.word	0x08006a0d
 80067ac:	08006a0d 	.word	0x08006a0d
 80067b0:	08006a0d 	.word	0x08006a0d
 80067b4:	08006a0d 	.word	0x08006a0d
 80067b8:	08006a0d 	.word	0x08006a0d
 80067bc:	08006a0d 	.word	0x08006a0d
 80067c0:	08006a0d 	.word	0x08006a0d
 80067c4:	08006a0d 	.word	0x08006a0d
 80067c8:	08006a0d 	.word	0x08006a0d
 80067cc:	08006a0d 	.word	0x08006a0d
 80067d0:	08006a0d 	.word	0x08006a0d
 80067d4:	08006923 	.word	0x08006923
 80067d8:	08006a0d 	.word	0x08006a0d
 80067dc:	08006a0d 	.word	0x08006a0d
 80067e0:	08006a0d 	.word	0x08006a0d
 80067e4:	08006a0d 	.word	0x08006a0d
 80067e8:	08006a0d 	.word	0x08006a0d
 80067ec:	08006a0d 	.word	0x08006a0d
 80067f0:	08006a0d 	.word	0x08006a0d
 80067f4:	08006959 	.word	0x08006959
 80067f8:	08006935 	.word	0x08006935
 80067fc:	08006a0d 	.word	0x08006a0d
 8006800:	08006a0d 	.word	0x08006a0d
 8006804:	08006947 	.word	0x08006947
 8006808:	08006a0d 	.word	0x08006a0d
 800680c:	08006a0d 	.word	0x08006a0d
 8006810:	08006a0d 	.word	0x08006a0d
 8006814:	08006a0d 	.word	0x08006a0d
 8006818:	0800697d 	.word	0x0800697d
 800681c:	08006a0d 	.word	0x08006a0d
 8006820:	0800698f 	.word	0x0800698f
 8006824:	08006a0d 	.word	0x08006a0d
 8006828:	08006a0d 	.word	0x08006a0d
 800682c:	080069b3 	.word	0x080069b3
 8006830:	08006a0d 	.word	0x08006a0d
 8006834:	080069d7 	.word	0x080069d7
 8006838:	08006a0d 	.word	0x08006a0d
 800683c:	08006a0d 	.word	0x08006a0d
 8006840:	08006a0d 	.word	0x08006a0d
 8006844:	08006a0d 	.word	0x08006a0d
 8006848:	080069fb 	.word	0x080069fb
 800684c:	08006a0d 	.word	0x08006a0d
 8006850:	08006a0d 	.word	0x08006a0d
 8006854:	08006a0d 	.word	0x08006a0d
 8006858:	08006a0d 	.word	0x08006a0d
 800685c:	08006a0d 	.word	0x08006a0d
 8006860:	08006a0d 	.word	0x08006a0d
 8006864:	08006a0d 	.word	0x08006a0d
 8006868:	08006a0d 	.word	0x08006a0d
 800686c:	08006a0d 	.word	0x08006a0d
 8006870:	08006a0d 	.word	0x08006a0d
 8006874:	08006a0d 	.word	0x08006a0d
 8006878:	08006a0d 	.word	0x08006a0d
 800687c:	08006a0d 	.word	0x08006a0d
 8006880:	08006a0d 	.word	0x08006a0d
 8006884:	08006a0d 	.word	0x08006a0d
 8006888:	08006a0d 	.word	0x08006a0d
 800688c:	08006a0d 	.word	0x08006a0d
 8006890:	08006a0d 	.word	0x08006a0d
 8006894:	08006a0d 	.word	0x08006a0d
 8006898:	08006a0d 	.word	0x08006a0d
 800689c:	08006a0d 	.word	0x08006a0d
 80068a0:	08006a0d 	.word	0x08006a0d
 80068a4:	08006a0d 	.word	0x08006a0d
 80068a8:	08006a0d 	.word	0x08006a0d
 80068ac:	08006a0d 	.word	0x08006a0d
 80068b0:	08006a0d 	.word	0x08006a0d
 80068b4:	08006a0d 	.word	0x08006a0d
 80068b8:	08006a0d 	.word	0x08006a0d
 80068bc:	08006a0d 	.word	0x08006a0d
 80068c0:	08006a0d 	.word	0x08006a0d
 80068c4:	08006a0d 	.word	0x08006a0d
 80068c8:	08006a0d 	.word	0x08006a0d
 80068cc:	08006a0d 	.word	0x08006a0d
 80068d0:	08006a0d 	.word	0x08006a0d
 80068d4:	08006a0d 	.word	0x08006a0d
 80068d8:	08006a0d 	.word	0x08006a0d
 80068dc:	08006a0d 	.word	0x08006a0d
 80068e0:	08006a0d 	.word	0x08006a0d
 80068e4:	08006a0d 	.word	0x08006a0d
 80068e8:	08006a0d 	.word	0x08006a0d
 80068ec:	08006a0d 	.word	0x08006a0d
 80068f0:	08006a0d 	.word	0x08006a0d
 80068f4:	0800696b 	.word	0x0800696b
 80068f8:	2b9e      	cmp	r3, #158	; 0x9e
 80068fa:	d051      	beq.n	80069a0 <SCSI_ProcessCmd+0x260>
 80068fc:	e086      	b.n	8006a0c <SCSI_ProcessCmd+0x2cc>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80068fe:	7afb      	ldrb	r3, [r7, #11]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	4619      	mov	r1, r3
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f893 	bl	8006a30 <SCSI_TestUnitReady>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]
    break;
 800690e:	e089      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8006910:	7afb      	ldrb	r3, [r7, #11]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	4619      	mov	r1, r3
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fb0e 	bl	8006f38 <SCSI_RequestSense>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]
    break;
 8006920:	e080      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	4619      	mov	r1, r3
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f8cb 	bl	8006ac4 <SCSI_Inquiry>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]
    break;
 8006932:	e077      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4619      	mov	r1, r3
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 fbb8 	bl	80070b0 <SCSI_StartStopUnit>
 8006940:	4603      	mov	r3, r0
 8006942:	75fb      	strb	r3, [r7, #23]
    break;
 8006944:	e06e      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8006946:	7afb      	ldrb	r3, [r7, #11]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4619      	mov	r1, r3
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fbfa 	bl	8007146 <SCSI_AllowPreventRemovable>
 8006952:	4603      	mov	r3, r0
 8006954:	75fb      	strb	r3, [r7, #23]
    break;
 8006956:	e065      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4619      	mov	r1, r3
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fa9e 	bl	8006ea0 <SCSI_ModeSense6>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]
    break;
 8006968:	e05c      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4619      	mov	r1, r3
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 fabb 	bl	8006eec <SCSI_ModeSense10>
 8006976:	4603      	mov	r3, r0
 8006978:	75fb      	strb	r3, [r7, #23]
    break;
 800697a:	e053      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4619      	mov	r1, r3
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fa1f 	bl	8006dc6 <SCSI_ReadFormatCapacity>
 8006988:	4603      	mov	r3, r0
 800698a:	75fb      	strb	r3, [r7, #23]
    break;
 800698c:	e04a      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4619      	mov	r1, r3
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f903 	bl	8006ba0 <SCSI_ReadCapacity10>
 800699a:	4603      	mov	r3, r0
 800699c:	75fb      	strb	r3, [r7, #23]
    break;
 800699e:	e041      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80069a0:	7afb      	ldrb	r3, [r7, #11]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4619      	mov	r1, r3
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f969 	bl	8006c7e <SCSI_ReadCapacity16>
 80069ac:	4603      	mov	r3, r0
 80069ae:	75fb      	strb	r3, [r7, #23]
    break;
 80069b0:	e038      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4619      	mov	r1, r3
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fbe7 	bl	800718c <SCSI_Read10>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]
    break;
 80069c2:	e02f      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	4619      	mov	r1, r3
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fc78 	bl	80072c0 <SCSI_Read12>
 80069d0:	4603      	mov	r3, r0
 80069d2:	75fb      	strb	r3, [r7, #23]
    break;
 80069d4:	e026      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4619      	mov	r1, r3
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fd14 	bl	800740a <SCSI_Write10>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]
    break;
 80069e6:	e01d      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4619      	mov	r1, r3
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fdca 	bl	8007588 <SCSI_Write12>
 80069f4:	4603      	mov	r3, r0
 80069f6:	75fb      	strb	r3, [r7, #23]
    break;
 80069f8:	e014      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4619      	mov	r1, r3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fe90 	bl	8007726 <SCSI_Verify10>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]
    break;
 8006a0a:	e00b      	b.n	8006a24 <SCSI_ProcessCmd+0x2e4>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006a0c:	7af9      	ldrb	r1, [r7, #11]
 8006a0e:	2320      	movs	r3, #32
 8006a10:	2205      	movs	r2, #5
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fb09 	bl	800702a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8006a1e:	23ff      	movs	r3, #255	; 0xff
 8006a20:	75fb      	strb	r3, [r7, #23]
    break;
 8006a22:	bf00      	nop
  }

  return ret;
 8006a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a44:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006a56:	2320      	movs	r3, #32
 8006a58:	2205      	movs	r2, #5
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fae5 	bl	800702a <SCSI_SenseCode>

    return -1;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	e02a      	b.n	8006abc <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d10b      	bne.n	8006a88 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006a70:	7af9      	ldrb	r1, [r7, #11]
 8006a72:	233a      	movs	r3, #58	; 0x3a
 8006a74:	2202      	movs	r2, #2
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fad7 	bl	800702a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2205      	movs	r2, #5
 8006a80:	721a      	strb	r2, [r3, #8]
    return -1;
 8006a82:	f04f 33ff 	mov.w	r3, #4294967295
 8006a86:	e019      	b.n	8006abc <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	7afa      	ldrb	r2, [r7, #11]
 8006a92:	4610      	mov	r0, r2
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00b      	beq.n	8006ab4 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006a9c:	7af9      	ldrb	r1, [r7, #11]
 8006a9e:	233a      	movs	r3, #58	; 0x3a
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fac1 	bl	800702a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2205      	movs	r2, #5
 8006aac:	721a      	strb	r2, [r3, #8]

    return -1;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	e003      	b.n	8006abc <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	60da      	str	r2, [r3, #12]

  return 0;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	460b      	mov	r3, r1
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006aea:	2320      	movs	r3, #32
 8006aec:	2205      	movs	r2, #5
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fa9b 	bl	800702a <SCSI_SenseCode>
    return -1;
 8006af4:	f04f 33ff 	mov.w	r3, #4294967295
 8006af8:	e04a      	b.n	8006b90 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3301      	adds	r3, #1
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d020      	beq.n	8006b4a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006b12:	2206      	movs	r2, #6
 8006b14:	4920      	ldr	r1, [pc, #128]	; (8006b98 <SCSI_Inquiry+0xd4>)
 8006b16:	69b8      	ldr	r0, [r7, #24]
 8006b18:	f000 ff50 	bl	80079bc <SCSI_UpdateBotData>
 8006b1c:	e037      	b.n	8006b8e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3302      	adds	r3, #2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b80      	cmp	r3, #128	; 0x80
 8006b26:	d105      	bne.n	8006b34 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006b28:	2208      	movs	r2, #8
 8006b2a:	491c      	ldr	r1, [pc, #112]	; (8006b9c <SCSI_Inquiry+0xd8>)
 8006b2c:	69b8      	ldr	r0, [r7, #24]
 8006b2e:	f000 ff45 	bl	80079bc <SCSI_UpdateBotData>
 8006b32:	e02c      	b.n	8006b8e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006b3a:	2324      	movs	r3, #36	; 0x24
 8006b3c:	2205      	movs	r2, #5
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fa73 	bl	800702a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295
 8006b48:	e022      	b.n	8006b90 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b50:	69d9      	ldr	r1, [r3, #28]
 8006b52:	7afa      	ldrb	r2, [r7, #11]
 8006b54:	4613      	mov	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3304      	adds	r3, #4
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3305      	adds	r3, #5
 8006b6a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8bfa      	ldrh	r2, [r7, #30]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d303      	bcc.n	8006b82 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006b82:	8bfb      	ldrh	r3, [r7, #30]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6979      	ldr	r1, [r7, #20]
 8006b88:	69b8      	ldr	r0, [r7, #24]
 8006b8a:	f000 ff17 	bl	80079bc <SCSI_UpdateBotData>
  }

  return 0;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	200000b0 	.word	0x200000b0
 8006b9c:	200000b8 	.word	0x200000b8

08006ba0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006bca:	7af8      	ldrb	r0, [r7, #11]
 8006bcc:	4798      	blx	r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006bd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <SCSI_ReadCapacity10+0x44>
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d108      	bne.n	8006bf6 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006be4:	7af9      	ldrb	r1, [r7, #11]
 8006be6:	233a      	movs	r3, #58	; 0x3a
 8006be8:	2202      	movs	r2, #2
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fa1d 	bl	800702a <SCSI_SenseCode>
    return -1;
 8006bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf4:	e03f      	b.n	8006c76 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	0e1b      	lsrs	r3, r3, #24
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	0a1b      	lsrs	r3, r3, #8
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c3c:	161b      	asrs	r3, r3, #24
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c4a:	141b      	asrs	r3, r3, #16
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2208      	movs	r2, #8
 8006c72:	60da      	str	r2, [r3, #12]

  return 0;
 8006c74:	2300      	movs	r3, #0

}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b088      	sub	sp, #32
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	460b      	mov	r3, r1
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c92:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006ca8:	7af8      	ldrb	r0, [r7, #11]
 8006caa:	4798      	blx	r3
 8006cac:	4603      	mov	r3, r0
 8006cae:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <SCSI_ReadCapacity16+0x44>
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d108      	bne.n	8006cd4 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006cc2:	7af9      	ldrb	r1, [r7, #11]
 8006cc4:	233a      	movs	r3, #58	; 0x3a
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f9ae 	bl	800702a <SCSI_SenseCode>
    return -1;
 8006cce:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd2:	e074      	b.n	8006dbe <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	330a      	adds	r3, #10
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	330b      	adds	r3, #11
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006ce4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006cee:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	320d      	adds	r2, #13
 8006cf4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006cf6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e007      	b.n	8006d12 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 8006d02:	7ffb      	ldrb	r3, [r7, #31]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4413      	add	r3, r2
 8006d08:	2200      	movs	r2, #0
 8006d0a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006d0c:	7ffb      	ldrb	r3, [r7, #31]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	7ffa      	ldrb	r2, [r7, #31]
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d3f2      	bcc.n	8006d02 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d22:	3b01      	subs	r3, #1
 8006d24:	0e1b      	lsrs	r3, r3, #24
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d32:	3b01      	subs	r3, #1
 8006d34:	0c1b      	lsrs	r3, r3, #16
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d42:	3b01      	subs	r3, #1
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d62:	161b      	asrs	r3, r3, #24
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d70:	141b      	asrs	r3, r3, #16
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d7e:	0a1b      	lsrs	r3, r3, #8
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	330a      	adds	r3, #10
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	330b      	adds	r3, #11
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006da4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	330c      	adds	r3, #12
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006dae:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	320d      	adds	r2, #13
 8006db4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006db6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	60da      	str	r2, [r3, #12]

  return 0;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b088      	sub	sp, #32
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	607a      	str	r2, [r7, #4]
 8006dd2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dda:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f107 0214 	add.w	r2, r7, #20
 8006de8:	f107 0110 	add.w	r1, r7, #16
 8006dec:	7af8      	ldrb	r0, [r7, #11]
 8006dee:	4798      	blx	r3
 8006df0:	4603      	mov	r3, r0
 8006df2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <SCSI_ReadFormatCapacity+0x40>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d108      	bne.n	8006e18 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e06:	7af9      	ldrb	r1, [r7, #11]
 8006e08:	233a      	movs	r3, #58	; 0x3a
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f90c 	bl	800702a <SCSI_SenseCode>
    return -1;
 8006e12:	f04f 33ff 	mov.w	r3, #4294967295
 8006e16:	e03e      	b.n	8006e96 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	83fb      	strh	r3, [r7, #30]
 8006e1c:	e007      	b.n	8006e2e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 8006e1e:	8bfb      	ldrh	r3, [r7, #30]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	4413      	add	r3, r2
 8006e24:	2200      	movs	r2, #0
 8006e26:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8006e28:	8bfb      	ldrh	r3, [r7, #30]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	83fb      	strh	r3, [r7, #30]
 8006e2e:	8bfb      	ldrh	r3, [r7, #30]
 8006e30:	2b0b      	cmp	r3, #11
 8006e32:	d9f4      	bls.n	8006e1e <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2208      	movs	r2, #8
 8006e38:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	0e1b      	lsrs	r3, r3, #24
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	0a1b      	lsrs	r3, r3, #8
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006e70:	8abb      	ldrh	r3, [r7, #20]
 8006e72:	141b      	asrs	r3, r3, #16
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006e7a:	8abb      	ldrh	r3, [r7, #20]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006e86:	8abb      	ldrh	r3, [r7, #20]
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	220c      	movs	r2, #12
 8006e92:	60da      	str	r2, [r3, #12]

  return 0;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006eb6:	2317      	movs	r3, #23
 8006eb8:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8afa      	ldrh	r2, [r7, #22]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d303      	bcc.n	8006ed0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8006ed0:	8afb      	ldrh	r3, [r7, #22]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4904      	ldr	r1, [pc, #16]	; (8006ee8 <SCSI_ModeSense6+0x48>)
 8006ed6:	6938      	ldr	r0, [r7, #16]
 8006ed8:	f000 fd70 	bl	80079bc <SCSI_UpdateBotData>

  return 0;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200000c0 	.word	0x200000c0

08006eec <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f00:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006f02:	231b      	movs	r3, #27
 8006f04:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	8afa      	ldrh	r2, [r7, #22]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d303      	bcc.n	8006f1c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3308      	adds	r3, #8
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006f1c:	8afb      	ldrh	r3, [r7, #22]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4904      	ldr	r1, [pc, #16]	; (8006f34 <SCSI_ModeSense10+0x48>)
 8006f22:	6938      	ldr	r0, [r7, #16]
 8006f24:	f000 fd4a 	bl	80079bc <SCSI_UpdateBotData>

  return 0;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	200000d8 	.word	0x200000d8

08006f38 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	460b      	mov	r3, r1
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006f5e:	2320      	movs	r3, #32
 8006f60:	2205      	movs	r2, #5
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f861 	bl	800702a <SCSI_SenseCode>
    return -1;
 8006f68:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6c:	e059      	b.n	8007022 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
 8006f72:	e007      	b.n	8006f84 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4413      	add	r3, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	3301      	adds	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	2b11      	cmp	r3, #17
 8006f88:	d9f4      	bls.n	8006f74 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2270      	movs	r2, #112	; 0x70
 8006f8e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	220c      	movs	r2, #12
 8006f94:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d02e      	beq.n	8007004 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006fac:	461a      	mov	r2, r3
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3248      	adds	r2, #72	; 0x48
 8006fb2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	3348      	adds	r3, #72	; 0x48
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	791a      	ldrb	r2, [r3, #4]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	3348      	adds	r3, #72	; 0x48
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	4413      	add	r3, r2
 8006fdc:	795a      	ldrb	r2, [r3, #5]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d103      	bne.n	8007004 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2212      	movs	r2, #18
 8007008:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b12      	cmp	r3, #18
 8007012:	d805      	bhi.n	8007020 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	461a      	mov	r2, r3
 8007038:	4603      	mov	r3, r0
 800703a:	70fb      	strb	r3, [r7, #3]
 800703c:	460b      	mov	r3, r1
 800703e:	70bb      	strb	r3, [r7, #2]
 8007040:	4613      	mov	r3, r2
 8007042:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007052:	461a      	mov	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3248      	adds	r2, #72	; 0x48
 8007058:	78b9      	ldrb	r1, [r7, #2]
 800705a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	3348      	adds	r3, #72	; 0x48
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	4413      	add	r3, r2
 800706c:	787a      	ldrb	r2, [r7, #1]
 800706e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	3348      	adds	r3, #72	; 0x48
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	4413      	add	r3, r2
 800707e:	2200      	movs	r2, #0
 8007080:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007088:	3301      	adds	r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007098:	2b04      	cmp	r3, #4
 800709a:	d103      	bne.n	80070a4 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 80070a4:	bf00      	nop
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	460b      	mov	r3, r1
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c4:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10f      	bne.n	80070f0 <SCSI_StartStopUnit+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d108      	bne.n	80070f0 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80070de:	7af9      	ldrb	r1, [r7, #11]
 80070e0:	2324      	movs	r3, #36	; 0x24
 80070e2:	2205      	movs	r2, #5
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff ffa0 	bl	800702a <SCSI_SenseCode>

    return -1;
 80070ea:	f04f 33ff 	mov.w	r3, #4294967295
 80070ee:	e026      	b.n	800713e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3304      	adds	r3, #4
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d104      	bne.n	8007108 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007106:	e016      	b.n	8007136 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d104      	bne.n	8007120 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800711e:	e00a      	b.n	8007136 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	2b03      	cmp	r3, #3
 800712c:	d103      	bne.n	8007136 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2200      	movs	r2, #0
 800713a:	60da      	str	r2, [r3, #12]

  return 0;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007146:	b480      	push	{r7}
 8007148:	b087      	sub	sp, #28
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	460b      	mov	r3, r1
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800716e:	e003      	b.n	8007178 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2200      	movs	r2, #0
 800717c:	60da      	str	r2, [r3, #12]

  return 0;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	460b      	mov	r3, r1
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	7a1b      	ldrb	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d17c      	bne.n	80072a4 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80071b0:	b25b      	sxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	db0a      	blt.n	80071cc <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80071bc:	2320      	movs	r3, #32
 80071be:	2205      	movs	r2, #5
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff ff32 	bl	800702a <SCSI_SenseCode>
      return -1;
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	e075      	b.n	80072b8 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d108      	bne.n	80071e8 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80071d6:	7af9      	ldrb	r1, [r7, #11]
 80071d8:	233a      	movs	r3, #58	; 0x3a
 80071da:	2202      	movs	r2, #2
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ff24 	bl	800702a <SCSI_SenseCode>

      return -1;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	e067      	b.n	80072b8 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	7afa      	ldrb	r2, [r7, #11]
 80071f2:	4610      	mov	r0, r2
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80071fc:	7af9      	ldrb	r1, [r7, #11]
 80071fe:	233a      	movs	r3, #58	; 0x3a
 8007200:	2202      	movs	r2, #2
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff ff11 	bl	800702a <SCSI_SenseCode>
      return -1;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	e054      	b.n	80072b8 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3302      	adds	r3, #2
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3303      	adds	r3, #3
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800721e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3304      	adds	r3, #4
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007228:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	3205      	adds	r2, #5
 800722e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007230:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3307      	adds	r3, #7
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	3208      	adds	r2, #8
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	431a      	orrs	r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800725a:	7af9      	ldrb	r1, [r7, #11]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 fa95 	bl	800778c <SCSI_CheckAddressRange>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	da02      	bge.n	800726e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007268:	f04f 33ff 	mov.w	r3, #4294967295
 800726c:	e024      	b.n	80072b8 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800727a:	6979      	ldr	r1, [r7, #20]
 800727c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	429a      	cmp	r2, r3
 8007286:	d00a      	beq.n	800729e <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800728e:	2320      	movs	r3, #32
 8007290:	2205      	movs	r2, #5
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff fec9 	bl	800702a <SCSI_SenseCode>
      return -1;
 8007298:	f04f 33ff 	mov.w	r3, #4294967295
 800729c:	e00c      	b.n	80072b8 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2202      	movs	r2, #2
 80072a2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072aa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fa8d 	bl	80077d0 <SCSI_ProcessRead>
 80072b6:	4603      	mov	r3, r0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	460b      	mov	r3, r1
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072d4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	7a1b      	ldrb	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 8087 	bne.w	80073ee <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	db0a      	blt.n	8007302 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80072f2:	2320      	movs	r3, #32
 80072f4:	2205      	movs	r2, #5
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff fe97 	bl	800702a <SCSI_SenseCode>
      return -1;
 80072fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007300:	e07f      	b.n	8007402 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007308:	2b02      	cmp	r3, #2
 800730a:	d108      	bne.n	800731e <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800730c:	7af9      	ldrb	r1, [r7, #11]
 800730e:	233a      	movs	r3, #58	; 0x3a
 8007310:	2202      	movs	r2, #2
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fe89 	bl	800702a <SCSI_SenseCode>
      return -1;
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	e071      	b.n	8007402 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	7afa      	ldrb	r2, [r7, #11]
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007332:	7af9      	ldrb	r1, [r7, #11]
 8007334:	233a      	movs	r3, #58	; 0x3a
 8007336:	2202      	movs	r2, #2
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff fe76 	bl	800702a <SCSI_SenseCode>
      return -1;
 800733e:	f04f 33ff 	mov.w	r3, #4294967295
 8007342:	e05e      	b.n	8007402 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3302      	adds	r3, #2
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3303      	adds	r3, #3
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007354:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800735e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	3205      	adds	r2, #5
 8007364:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007366:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3306      	adds	r3, #6
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3307      	adds	r3, #7
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800737e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3308      	adds	r3, #8
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007388:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	3209      	adds	r2, #9
 800738e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007390:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80073a4:	7af9      	ldrb	r1, [r7, #11]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f9f0 	bl	800778c <SCSI_CheckAddressRange>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da02      	bge.n	80073b8 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80073b2:	f04f 33ff 	mov.w	r3, #4294967295
 80073b6:	e024      	b.n	8007402 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80073c4:	6979      	ldr	r1, [r7, #20]
 80073c6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d00a      	beq.n	80073e8 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80073d8:	2320      	movs	r3, #32
 80073da:	2205      	movs	r2, #5
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff fe24 	bl	800702a <SCSI_SenseCode>
      return -1;
 80073e2:	f04f 33ff 	mov.w	r3, #4294967295
 80073e6:	e00c      	b.n	8007402 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2202      	movs	r2, #2
 80073ec:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073f4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	4619      	mov	r1, r3
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f9e8 	bl	80077d0 <SCSI_ProcessRead>
 8007400:	4603      	mov	r3, r0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	460b      	mov	r3, r1
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800741e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	7a1b      	ldrb	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f040 80a5 	bne.w	8007574 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800743a:	2320      	movs	r3, #32
 800743c:	2205      	movs	r2, #5
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fdf3 	bl	800702a <SCSI_SenseCode>
      return -1;
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
 8007448:	e09a      	b.n	8007580 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007450:	b25b      	sxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	da0a      	bge.n	800746c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800745c:	2320      	movs	r3, #32
 800745e:	2205      	movs	r2, #5
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff fde2 	bl	800702a <SCSI_SenseCode>
      return -1;
 8007466:	f04f 33ff 	mov.w	r3, #4294967295
 800746a:	e089      	b.n	8007580 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	7afa      	ldrb	r2, [r7, #11]
 8007476:	4610      	mov	r0, r2
 8007478:	4798      	blx	r3
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007480:	7af9      	ldrb	r1, [r7, #11]
 8007482:	233a      	movs	r3, #58	; 0x3a
 8007484:	2202      	movs	r2, #2
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f7ff fdcf 	bl	800702a <SCSI_SenseCode>
      return -1;
 800748c:	f04f 33ff 	mov.w	r3, #4294967295
 8007490:	e076      	b.n	8007580 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	7afa      	ldrb	r2, [r7, #11]
 800749c:	4610      	mov	r0, r2
 800749e:	4798      	blx	r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d008      	beq.n	80074b8 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80074a6:	7af9      	ldrb	r1, [r7, #11]
 80074a8:	2327      	movs	r3, #39	; 0x27
 80074aa:	2202      	movs	r2, #2
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff fdbc 	bl	800702a <SCSI_SenseCode>
      return -1;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295
 80074b6:	e063      	b.n	8007580 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3302      	adds	r3, #2
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3303      	adds	r3, #3
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80074c8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3304      	adds	r3, #4
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80074d2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	3205      	adds	r2, #5
 80074d8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80074da:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3307      	adds	r3, #7
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	3208      	adds	r2, #8
 80074ee:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80074f0:	431a      	orrs	r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007504:	7af9      	ldrb	r1, [r7, #11]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f940 	bl	800778c <SCSI_CheckAddressRange>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	da02      	bge.n	8007518 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007512:	f04f 33ff 	mov.w	r3, #4294967295
 8007516:	e033      	b.n	8007580 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007524:	fb02 f303 	mul.w	r3, r2, r3
 8007528:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	429a      	cmp	r2, r3
 8007534:	d00a      	beq.n	800754c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800753c:	2320      	movs	r3, #32
 800753e:	2205      	movs	r2, #5
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fd72 	bl	800702a <SCSI_SenseCode>
      return -1;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295
 800754a:	e019      	b.n	8007580 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007552:	bf28      	it	cs
 8007554:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007558:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2201      	movs	r2, #1
 800755e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f103 0210 	add.w	r2, r3, #16
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2101      	movs	r1, #1
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f001 ffd7 	bl	800951e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007570:	2300      	movs	r3, #0
 8007572:	e005      	b.n	8007580 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	4619      	mov	r1, r3
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f99c 	bl	80078b6 <SCSI_ProcessWrite>
 800757e:	4603      	mov	r3, r0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	460b      	mov	r3, r1
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800759c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	7a1b      	ldrb	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 80b5 	bne.w	8007712 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80075b8:	2320      	movs	r3, #32
 80075ba:	2205      	movs	r2, #5
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fd34 	bl	800702a <SCSI_SenseCode>
      return -1;
 80075c2:	f04f 33ff 	mov.w	r3, #4294967295
 80075c6:	e0aa      	b.n	800771e <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	da0a      	bge.n	80075ea <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80075da:	2320      	movs	r3, #32
 80075dc:	2205      	movs	r2, #5
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fd23 	bl	800702a <SCSI_SenseCode>
      return -1;
 80075e4:	f04f 33ff 	mov.w	r3, #4294967295
 80075e8:	e099      	b.n	800771e <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	7afa      	ldrb	r2, [r7, #11]
 80075f4:	4610      	mov	r0, r2
 80075f6:	4798      	blx	r3
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80075fe:	7af9      	ldrb	r1, [r7, #11]
 8007600:	233a      	movs	r3, #58	; 0x3a
 8007602:	2202      	movs	r2, #2
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff fd10 	bl	800702a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2205      	movs	r2, #5
 800760e:	721a      	strb	r2, [r3, #8]
      return -1;
 8007610:	f04f 33ff 	mov.w	r3, #4294967295
 8007614:	e083      	b.n	800771e <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	7afa      	ldrb	r2, [r7, #11]
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800762a:	7af9      	ldrb	r1, [r7, #11]
 800762c:	2327      	movs	r3, #39	; 0x27
 800762e:	2202      	movs	r2, #2
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff fcfa 	bl	800702a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2205      	movs	r2, #5
 800763a:	721a      	strb	r2, [r3, #8]
      return -1;
 800763c:	f04f 33ff 	mov.w	r3, #4294967295
 8007640:	e06d      	b.n	800771e <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3302      	adds	r3, #2
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3303      	adds	r3, #3
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007652:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800765c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	3205      	adds	r2, #5
 8007662:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007664:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3306      	adds	r3, #6
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3307      	adds	r3, #7
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800767c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3308      	adds	r3, #8
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007686:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	3209      	adds	r2, #9
 800768c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800768e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076a2:	7af9      	ldrb	r1, [r7, #11]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f871 	bl	800778c <SCSI_CheckAddressRange>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da02      	bge.n	80076b6 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
 80076b4:	e033      	b.n	800771e <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d00a      	beq.n	80076ea <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076da:	2320      	movs	r3, #32
 80076dc:	2205      	movs	r2, #5
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fca3 	bl	800702a <SCSI_SenseCode>
      return -1;
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295
 80076e8:	e019      	b.n	800771e <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f0:	bf28      	it	cs
 80076f2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80076f6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2201      	movs	r2, #1
 80076fc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f103 0210 	add.w	r2, r3, #16
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2101      	movs	r1, #1
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f001 ff08 	bl	800951e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800770e:	2300      	movs	r3, #0
 8007710:	e005      	b.n	800771e <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f8cd 	bl	80078b6 <SCSI_ProcessWrite>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	460b      	mov	r3, r1
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800773a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3301      	adds	r3, #1
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d008      	beq.n	800775c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800774a:	7af9      	ldrb	r1, [r7, #11]
 800774c:	2324      	movs	r3, #36	; 0x24
 800774e:	2205      	movs	r2, #5
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fc6a 	bl	800702a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007756:	f04f 33ff 	mov.w	r3, #4294967295
 800775a:	e013      	b.n	8007784 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007768:	7af9      	ldrb	r1, [r7, #11]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f80e 	bl	800778c <SCSI_CheckAddressRange>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	da02      	bge.n	800777c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 8007776:	f04f 33ff 	mov.w	r3, #4294967295
 800777a:	e003      	b.n	8007784 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	60da      	str	r2, [r3, #12]

  return 0;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	460b      	mov	r3, r1
 800779a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	441a      	add	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d908      	bls.n	80077c6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80077b4:	7af9      	ldrb	r1, [r7, #11]
 80077b6:	2321      	movs	r3, #33	; 0x21
 80077b8:	2205      	movs	r2, #5
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fc35 	bl	800702a <SCSI_SenseCode>
    return -1;
 80077c0:	f04f 33ff 	mov.w	r3, #4294967295
 80077c4:	e000      	b.n	80077c8 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077e2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
 80077f4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fc:	bf28      	it	cs
 80077fe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007802:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800780a:	691c      	ldr	r4, [r3, #16]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f103 0110 	add.w	r1, r3, #16
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800781e:	4618      	mov	r0, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8007826:	b29b      	uxth	r3, r3
 8007828:	78f8      	ldrb	r0, [r7, #3]
 800782a:	47a0      	blx	r4
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	da08      	bge.n	8007844 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007832:	78f9      	ldrb	r1, [r7, #3]
 8007834:	2311      	movs	r3, #17
 8007836:	2204      	movs	r2, #4
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff fbf6 	bl	800702a <SCSI_SenseCode>
    return -1;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	e034      	b.n	80078ae <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f103 0210 	add.w	r2, r3, #16
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2181      	movs	r1, #129	; 0x81
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fe44 	bl	80094dc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007860:	4619      	mov	r1, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	fbb3 f3f1 	udiv	r3, r3, r1
 8007868:	441a      	add	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800787c:	4619      	mov	r1, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	fbb3 f3f1 	udiv	r3, r3, r1
 8007884:	1ad2      	subs	r2, r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2203      	movs	r2, #3
 80078aa:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd90      	pop	{r4, r7, pc}

080078b6 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80078b6:	b590      	push	{r4, r7, lr}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80078d6:	fb02 f303 	mul.w	r3, r2, r3
 80078da:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e2:	bf28      	it	cs
 80078e4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80078e8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f0:	695c      	ldr	r4, [r3, #20]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f103 0110 	add.w	r1, r3, #16
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007904:	4618      	mov	r0, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800790c:	b29b      	uxth	r3, r3
 800790e:	78f8      	ldrb	r0, [r7, #3]
 8007910:	47a0      	blx	r4
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	da08      	bge.n	800792a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007918:	78f9      	ldrb	r1, [r7, #3]
 800791a:	2303      	movs	r3, #3
 800791c:	2204      	movs	r2, #4
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fb83 	bl	800702a <SCSI_SenseCode>
    return -1;
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	e044      	b.n	80079b4 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007936:	4619      	mov	r1, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	fbb3 f3f1 	udiv	r3, r3, r1
 800793e:	441a      	add	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007952:	4619      	mov	r1, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	fbb3 f3f1 	udiv	r3, r3, r1
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	1ad2      	subs	r2, r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800797c:	2100      	movs	r1, #0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fe fe5c 	bl	800663c <MSC_BOT_SendCSW>
 8007984:	e015      	b.n	80079b2 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007992:	fb02 f303 	mul.w	r3, r2, r3
 8007996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800799a:	bf28      	it	cs
 800799c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80079a0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f103 0210 	add.w	r2, r3, #16
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2101      	movs	r1, #1
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fdb6 	bl	800951e <USBD_LL_PrepareReceive>
  }

  return 0;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd90      	pop	{r4, r7, pc}

080079bc <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80079ce:	8afa      	ldrh	r2, [r7, #22]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80079d4:	e00b      	b.n	80079ee <SCSI_UpdateBotData+0x32>
  {
    len--;
 80079d6:	8afb      	ldrh	r3, [r7, #22]
 80079d8:	3b01      	subs	r3, #1
 80079da:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80079dc:	8afb      	ldrh	r3, [r7, #22]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	441a      	add	r2, r3
 80079e2:	8afb      	ldrh	r3, [r7, #22]
 80079e4:	7811      	ldrb	r1, [r2, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	460a      	mov	r2, r1
 80079ec:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80079ee:	8afb      	ldrh	r3, [r7, #22]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b086      	sub	sp, #24
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e025      	b.n	8007a66 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	79fa      	ldrb	r2, [r7, #7]
 8007a58:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f001 fbea 	bl	8009234 <USBD_LL_Init>
 8007a60:	4603      	mov	r3, r0
 8007a62:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e010      	b.n	8007aa8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	f107 020e 	add.w	r2, r7, #14
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	4798      	blx	r3
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 fc07 	bl	80092cc <USBD_LL_Start>
 8007abe:	4603      	mov	r3, r0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	4611      	mov	r1, r2
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	4798      	blx	r3
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	4611      	mov	r1, r2
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
  }

  return USBD_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 ff3a 	bl	80089d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d01a      	beq.n	8007bb8 <USBD_LL_SetupStage+0x72>
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d822      	bhi.n	8007bcc <USBD_LL_SetupStage+0x86>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <USBD_LL_SetupStage+0x4a>
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d00a      	beq.n	8007ba4 <USBD_LL_SetupStage+0x5e>
 8007b8e:	e01d      	b.n	8007bcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa17 	bl	8007fcc <USBD_StdDevReq>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba2:	e020      	b.n	8007be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fa7b 	bl	80080a8 <USBD_StdItfReq>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb6:	e016      	b.n	8007be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fab9 	bl	8008138 <USBD_StdEPReq>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bca:	e00c      	b.n	8007be6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fbf5 	bl	80093ca <USBD_LL_StallEP>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
      break;
 8007be4:	bf00      	nop
  }

  return ret;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d137      	bne.n	8007c74 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d14a      	bne.n	8007cac <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d913      	bls.n	8007c4a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	1ad2      	subs	r2, r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	bf28      	it	cs
 8007c3c:	4613      	movcs	r3, r2
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 ff9c 	bl	8008b80 <USBD_CtlContinueRx>
 8007c48:	e030      	b.n	8007cac <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d105      	bne.n	8007c6c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 ff98 	bl	8008ba2 <USBD_CtlSendStatus>
 8007c72:	e01b      	b.n	8007cac <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d013      	beq.n	8007ca8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d10e      	bne.n	8007ca8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	7afa      	ldrb	r2, [r7, #11]
 8007c94:	4611      	mov	r1, r2
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	4798      	blx	r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	e002      	b.n	8007cae <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e000      	b.n	8007cae <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b086      	sub	sp, #24
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	607a      	str	r2, [r7, #4]
 8007cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d16a      	bne.n	8007da0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d155      	bne.n	8007d86 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d914      	bls.n	8007d10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 ff2e 	bl	8008b5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d02:	2300      	movs	r3, #0
 8007d04:	2200      	movs	r2, #0
 8007d06:	2100      	movs	r1, #0
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f001 fc08 	bl	800951e <USBD_LL_PrepareReceive>
 8007d0e:	e03a      	b.n	8007d86 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d11c      	bne.n	8007d56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d316      	bcc.n	8007d56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d20f      	bcs.n	8007d56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d36:	2200      	movs	r2, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 ff0f 	bl	8008b5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 fbe5 	bl	800951e <USBD_LL_PrepareReceive>
 8007d54:	e017      	b.n	8007d86 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d105      	bne.n	8007d78 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d78:	2180      	movs	r1, #128	; 0x80
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f001 fb25 	bl	80093ca <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 ff21 	bl	8008bc8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d123      	bne.n	8007dd8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff fe99 	bl	8007ac8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d9e:	e01b      	b.n	8007dd8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d013      	beq.n	8007dd4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d10e      	bne.n	8007dd4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	7afa      	ldrb	r2, [r7, #11]
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	e002      	b.n	8007dda <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e000      	b.n	8007dda <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6852      	ldr	r2, [r2, #4]
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	4611      	mov	r1, r2
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e26:	2340      	movs	r3, #64	; 0x40
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 fa68 	bl	8009302 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2240      	movs	r2, #64	; 0x40
 8007e3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e42:	2340      	movs	r3, #64	; 0x40
 8007e44:	2200      	movs	r2, #0
 8007e46:	2180      	movs	r1, #128	; 0x80
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 fa5a 	bl	8009302 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2240      	movs	r2, #64	; 0x40
 8007e58:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d105      	bne.n	8007ecc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d10b      	bne.n	8007f04 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6852      	ldr	r2, [r2, #4]
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	4611      	mov	r1, r2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
  }

  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fae:	8a3b      	ldrh	r3, [r7, #16]
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b21a      	sxth	r2, r3
 8007fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	b21b      	sxth	r3, r3
 8007fbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fbe:	89fb      	ldrh	r3, [r7, #14]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d005      	beq.n	8007ff2 <USBD_StdDevReq+0x26>
 8007fe6:	2b40      	cmp	r3, #64	; 0x40
 8007fe8:	d853      	bhi.n	8008092 <USBD_StdDevReq+0xc6>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <USBD_StdDevReq+0x3a>
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d14f      	bne.n	8008092 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
    break;
 8008004:	e04a      	b.n	800809c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b09      	cmp	r3, #9
 800800c:	d83b      	bhi.n	8008086 <USBD_StdDevReq+0xba>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_StdDevReq+0x48>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008069 	.word	0x08008069
 8008018:	0800807d 	.word	0x0800807d
 800801c:	08008087 	.word	0x08008087
 8008020:	08008073 	.word	0x08008073
 8008024:	08008087 	.word	0x08008087
 8008028:	08008047 	.word	0x08008047
 800802c:	0800803d 	.word	0x0800803d
 8008030:	08008087 	.word	0x08008087
 8008034:	0800805f 	.word	0x0800805f
 8008038:	08008051 	.word	0x08008051
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9d8 	bl	80083f4 <USBD_GetDescriptor>
      break;
 8008044:	e024      	b.n	8008090 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb3d 	bl	80086c8 <USBD_SetAddress>
      break;
 800804e:	e01f      	b.n	8008090 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fb7c 	bl	8008750 <USBD_SetConfig>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
      break;
 800805c:	e018      	b.n	8008090 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fc19 	bl	8008898 <USBD_GetConfig>
      break;
 8008066:	e013      	b.n	8008090 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fc49 	bl	8008902 <USBD_GetStatus>
      break;
 8008070:	e00e      	b.n	8008090 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fc77 	bl	8008968 <USBD_SetFeature>
      break;
 800807a:	e009      	b.n	8008090 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fc86 	bl	8008990 <USBD_ClrFeature>
      break;
 8008084:	e004      	b.n	8008090 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fcdc 	bl	8008a46 <USBD_CtlError>
      break;
 800808e:	bf00      	nop
    }
    break;
 8008090:	e004      	b.n	800809c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fcd6 	bl	8008a46 <USBD_CtlError>
    break;
 800809a:	bf00      	nop
  }

  return ret;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop

080080a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d005      	beq.n	80080ce <USBD_StdItfReq+0x26>
 80080c2:	2b40      	cmp	r3, #64	; 0x40
 80080c4:	d82e      	bhi.n	8008124 <USBD_StdItfReq+0x7c>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <USBD_StdItfReq+0x26>
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d12a      	bne.n	8008124 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	3b01      	subs	r3, #1
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d81d      	bhi.n	8008116 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	889b      	ldrh	r3, [r3, #4]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d813      	bhi.n	800810c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	88db      	ldrh	r3, [r3, #6]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d110      	bne.n	8008120 <USBD_StdItfReq+0x78>
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fd4c 	bl	8008ba2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800810a:	e009      	b.n	8008120 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fc99 	bl	8008a46 <USBD_CtlError>
      break;
 8008114:	e004      	b.n	8008120 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc94 	bl	8008a46 <USBD_CtlError>
      break;
 800811e:	e000      	b.n	8008122 <USBD_StdItfReq+0x7a>
      break;
 8008120:	bf00      	nop
    }
    break;
 8008122:	e004      	b.n	800812e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fc8d 	bl	8008a46 <USBD_CtlError>
    break;
 800812c:	bf00      	nop
  }

  return ret;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	889b      	ldrh	r3, [r3, #4]
 800814a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d007      	beq.n	8008168 <USBD_StdEPReq+0x30>
 8008158:	2b40      	cmp	r3, #64	; 0x40
 800815a:	f200 8140 	bhi.w	80083de <USBD_StdEPReq+0x2a6>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00c      	beq.n	800817c <USBD_StdEPReq+0x44>
 8008162:	2b20      	cmp	r3, #32
 8008164:	f040 813b 	bne.w	80083de <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]
    break;
 800817a:	e135      	b.n	80083e8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	785b      	ldrb	r3, [r3, #1]
 8008180:	2b03      	cmp	r3, #3
 8008182:	d007      	beq.n	8008194 <USBD_StdEPReq+0x5c>
 8008184:	2b03      	cmp	r3, #3
 8008186:	f300 8124 	bgt.w	80083d2 <USBD_StdEPReq+0x29a>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d07b      	beq.n	8008286 <USBD_StdEPReq+0x14e>
 800818e:	2b01      	cmp	r3, #1
 8008190:	d03b      	beq.n	800820a <USBD_StdEPReq+0xd2>
 8008192:	e11e      	b.n	80083d2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819a:	2b02      	cmp	r3, #2
 800819c:	d002      	beq.n	80081a4 <USBD_StdEPReq+0x6c>
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d016      	beq.n	80081d0 <USBD_StdEPReq+0x98>
 80081a2:	e02c      	b.n	80081fe <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00d      	beq.n	80081c6 <USBD_StdEPReq+0x8e>
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b80      	cmp	r3, #128	; 0x80
 80081ae:	d00a      	beq.n	80081c6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f908 	bl	80093ca <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081ba:	2180      	movs	r1, #128	; 0x80
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f904 	bl	80093ca <USBD_LL_StallEP>
 80081c2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80081c4:	e020      	b.n	8008208 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fc3c 	bl	8008a46 <USBD_CtlError>
        break;
 80081ce:	e01b      	b.n	8008208 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	885b      	ldrh	r3, [r3, #2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10e      	bne.n	80081f6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <USBD_StdEPReq+0xbe>
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d008      	beq.n	80081f6 <USBD_StdEPReq+0xbe>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	88db      	ldrh	r3, [r3, #6]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f8ea 	bl	80093ca <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fcd3 	bl	8008ba2 <USBD_CtlSendStatus>

        break;
 80081fc:	e004      	b.n	8008208 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc20 	bl	8008a46 <USBD_CtlError>
        break;
 8008206:	bf00      	nop
      }
      break;
 8008208:	e0e8      	b.n	80083dc <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	2b02      	cmp	r3, #2
 8008212:	d002      	beq.n	800821a <USBD_StdEPReq+0xe2>
 8008214:	2b03      	cmp	r3, #3
 8008216:	d016      	beq.n	8008246 <USBD_StdEPReq+0x10e>
 8008218:	e02e      	b.n	8008278 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00d      	beq.n	800823c <USBD_StdEPReq+0x104>
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b80      	cmp	r3, #128	; 0x80
 8008224:	d00a      	beq.n	800823c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 f8cd 	bl	80093ca <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008230:	2180      	movs	r1, #128	; 0x80
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f8c9 	bl	80093ca <USBD_LL_StallEP>
 8008238:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800823a:	e023      	b.n	8008284 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc01 	bl	8008a46 <USBD_CtlError>
        break;
 8008244:	e01e      	b.n	8008284 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	885b      	ldrh	r3, [r3, #2]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d119      	bne.n	8008282 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 f8d3 	bl	8009408 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fc9d 	bl	8008ba2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
        }
        break;
 8008276:	e004      	b.n	8008282 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fbe3 	bl	8008a46 <USBD_CtlError>
        break;
 8008280:	e000      	b.n	8008284 <USBD_StdEPReq+0x14c>
        break;
 8008282:	bf00      	nop
      }
      break;
 8008284:	e0aa      	b.n	80083dc <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828c:	2b02      	cmp	r3, #2
 800828e:	d002      	beq.n	8008296 <USBD_StdEPReq+0x15e>
 8008290:	2b03      	cmp	r3, #3
 8008292:	d032      	beq.n	80082fa <USBD_StdEPReq+0x1c2>
 8008294:	e097      	b.n	80083c6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d007      	beq.n	80082ac <USBD_StdEPReq+0x174>
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b80      	cmp	r3, #128	; 0x80
 80082a0:	d004      	beq.n	80082ac <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fbce 	bl	8008a46 <USBD_CtlError>
          break;
 80082aa:	e091      	b.n	80083d0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0b      	bge.n	80082cc <USBD_StdEPReq+0x194>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	3310      	adds	r3, #16
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4413      	add	r3, r2
 80082c8:	3304      	adds	r3, #4
 80082ca:	e00b      	b.n	80082e4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	3304      	adds	r3, #4
 80082e4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2202      	movs	r2, #2
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc18 	bl	8008b28 <USBD_CtlSendData>
        break;
 80082f8:	e06a      	b.n	80083d0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80082fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da11      	bge.n	8008326 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	f003 020f 	and.w	r2, r3, #15
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	3324      	adds	r3, #36	; 0x24
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d117      	bne.n	800834c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fb91 	bl	8008a46 <USBD_CtlError>
            break;
 8008324:	e054      	b.n	80083d0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	f003 020f 	and.w	r2, r3, #15
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d104      	bne.n	800834c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fb7e 	bl	8008a46 <USBD_CtlError>
            break;
 800834a:	e041      	b.n	80083d0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800834c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008350:	2b00      	cmp	r3, #0
 8008352:	da0b      	bge.n	800836c <USBD_StdEPReq+0x234>
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	3310      	adds	r3, #16
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	3304      	adds	r3, #4
 800836a:	e00b      	b.n	8008384 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	3304      	adds	r3, #4
 8008384:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <USBD_StdEPReq+0x25a>
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b80      	cmp	r3, #128	; 0x80
 8008390:	d103      	bne.n	800839a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2200      	movs	r2, #0
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e00e      	b.n	80083b8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 f851 	bl	8009446 <USBD_LL_IsStallEP>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	e002      	b.n	80083b8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2202      	movs	r2, #2
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fbb2 	bl	8008b28 <USBD_CtlSendData>
          break;
 80083c4:	e004      	b.n	80083d0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fb3c 	bl	8008a46 <USBD_CtlError>
        break;
 80083ce:	bf00      	nop
      }
      break;
 80083d0:	e004      	b.n	80083dc <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb36 	bl	8008a46 <USBD_CtlError>
      break;
 80083da:	bf00      	nop
    }
    break;
 80083dc:	e004      	b.n	80083e8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fb30 	bl	8008a46 <USBD_CtlError>
    break;
 80083e6:	bf00      	nop
  }

  return ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	885b      	ldrh	r3, [r3, #2]
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	2b06      	cmp	r3, #6
 8008416:	f200 8128 	bhi.w	800866a <USBD_GetDescriptor+0x276>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <USBD_GetDescriptor+0x2c>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	0800843d 	.word	0x0800843d
 8008424:	08008455 	.word	0x08008455
 8008428:	08008495 	.word	0x08008495
 800842c:	0800866b 	.word	0x0800866b
 8008430:	0800866b 	.word	0x0800866b
 8008434:	0800860b 	.word	0x0800860b
 8008438:	08008637 	.word	0x08008637
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	f107 0108 	add.w	r1, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
    break;
 8008452:	e112      	b.n	800867a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7c1b      	ldrb	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10d      	bne.n	8008478 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	f107 0208 	add.w	r2, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3301      	adds	r3, #1
 8008472:	2202      	movs	r2, #2
 8008474:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008476:	e100      	b.n	800867a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	f107 0208 	add.w	r2, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	2202      	movs	r2, #2
 8008490:	701a      	strb	r2, [r3, #0]
    break;
 8008492:	e0f2      	b.n	800867a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	885b      	ldrh	r3, [r3, #2]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b05      	cmp	r3, #5
 800849c:	f200 80ac 	bhi.w	80085f8 <USBD_GetDescriptor+0x204>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <USBD_GetDescriptor+0xb4>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084f5 	.word	0x080084f5
 80084b0:	08008529 	.word	0x08008529
 80084b4:	0800855d 	.word	0x0800855d
 80084b8:	08008591 	.word	0x08008591
 80084bc:	080085c5 	.word	0x080085c5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084e2:	e091      	b.n	8008608 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 faad 	bl	8008a46 <USBD_CtlError>
        err++;
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	3301      	adds	r3, #1
 80084f0:	72fb      	strb	r3, [r7, #11]
      break;
 80084f2:	e089      	b.n	8008608 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7c12      	ldrb	r2, [r2, #16]
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008516:	e077      	b.n	8008608 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa93 	bl	8008a46 <USBD_CtlError>
        err++;
 8008520:	7afb      	ldrb	r3, [r7, #11]
 8008522:	3301      	adds	r3, #1
 8008524:	72fb      	strb	r3, [r7, #11]
      break;
 8008526:	e06f      	b.n	8008608 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	7c12      	ldrb	r2, [r2, #16]
 8008540:	f107 0108 	add.w	r1, r7, #8
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
 8008548:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800854a:	e05d      	b.n	8008608 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa79 	bl	8008a46 <USBD_CtlError>
        err++;
 8008554:	7afb      	ldrb	r3, [r7, #11]
 8008556:	3301      	adds	r3, #1
 8008558:	72fb      	strb	r3, [r7, #11]
      break;
 800855a:	e055      	b.n	8008608 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	7c12      	ldrb	r2, [r2, #16]
 8008574:	f107 0108 	add.w	r1, r7, #8
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800857e:	e043      	b.n	8008608 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fa5f 	bl	8008a46 <USBD_CtlError>
        err++;
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	3301      	adds	r3, #1
 800858c:	72fb      	strb	r3, [r7, #11]
      break;
 800858e:	e03b      	b.n	8008608 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7c12      	ldrb	r2, [r2, #16]
 80085a8:	f107 0108 	add.w	r1, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085b2:	e029      	b.n	8008608 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa45 	bl	8008a46 <USBD_CtlError>
        err++;
 80085bc:	7afb      	ldrb	r3, [r7, #11]
 80085be:	3301      	adds	r3, #1
 80085c0:	72fb      	strb	r3, [r7, #11]
      break;
 80085c2:	e021      	b.n	8008608 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00b      	beq.n	80085e8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	7c12      	ldrb	r2, [r2, #16]
 80085dc:	f107 0108 	add.w	r1, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085e6:	e00f      	b.n	8008608 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa2b 	bl	8008a46 <USBD_CtlError>
        err++;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3301      	adds	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]
      break;
 80085f6:	e007      	b.n	8008608 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa23 	bl	8008a46 <USBD_CtlError>
      err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008606:	bf00      	nop
    }
    break;
 8008608:	e037      	b.n	800867a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	7c1b      	ldrb	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	f107 0208 	add.w	r2, r7, #8
 800861e:	4610      	mov	r0, r2
 8008620:	4798      	blx	r3
 8008622:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008624:	e029      	b.n	800867a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fa0c 	bl	8008a46 <USBD_CtlError>
      err++;
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	3301      	adds	r3, #1
 8008632:	72fb      	strb	r3, [r7, #11]
    break;
 8008634:	e021      	b.n	800867a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7c1b      	ldrb	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	f107 0208 	add.w	r2, r7, #8
 800864a:	4610      	mov	r0, r2
 800864c:	4798      	blx	r3
 800864e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	2207      	movs	r2, #7
 8008656:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008658:	e00f      	b.n	800867a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9f2 	bl	8008a46 <USBD_CtlError>
      err++;
 8008662:	7afb      	ldrb	r3, [r7, #11]
 8008664:	3301      	adds	r3, #1
 8008666:	72fb      	strb	r3, [r7, #11]
    break;
 8008668:	e007      	b.n	800867a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9ea 	bl	8008a46 <USBD_CtlError>
    err++;
 8008672:	7afb      	ldrb	r3, [r7, #11]
 8008674:	3301      	adds	r3, #1
 8008676:	72fb      	strb	r3, [r7, #11]
    break;
 8008678:	bf00      	nop
  }

  if (err != 0U)
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d11e      	bne.n	80086be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	88db      	ldrh	r3, [r3, #6]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d016      	beq.n	80086b6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008688:	893b      	ldrh	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	88da      	ldrh	r2, [r3, #6]
 8008692:	893b      	ldrh	r3, [r7, #8]
 8008694:	4293      	cmp	r3, r2
 8008696:	bf28      	it	cs
 8008698:	4613      	movcs	r3, r2
 800869a:	b29b      	uxth	r3, r3
 800869c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800869e:	893b      	ldrh	r3, [r7, #8]
 80086a0:	461a      	mov	r2, r3
 80086a2:	68f9      	ldr	r1, [r7, #12]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fa3f 	bl	8008b28 <USBD_CtlSendData>
 80086aa:	e009      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9c9 	bl	8008a46 <USBD_CtlError>
 80086b4:	e004      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa73 	bl	8008ba2 <USBD_CtlSendStatus>
 80086bc:	e000      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
    return;
 80086be:	bf00      	nop
    }
  }
}
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop

080086c8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	889b      	ldrh	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d130      	bne.n	800873c <USBD_SetAddress+0x74>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	88db      	ldrh	r3, [r3, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12c      	bne.n	800873c <USBD_SetAddress+0x74>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	2b7f      	cmp	r3, #127	; 0x7f
 80086e8:	d828      	bhi.n	800873c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d104      	bne.n	800870a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f99f 	bl	8008a46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008708:	e01d      	b.n	8008746 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7bfa      	ldrb	r2, [r7, #15]
 800870e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fec1 	bl	800949e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fa40 	bl	8008ba2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008730:	e009      	b.n	8008746 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873a:	e004      	b.n	8008746 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f981 	bl	8008a46 <USBD_CtlError>
  }
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b4b      	ldr	r3, [pc, #300]	; (8008894 <USBD_SetConfig+0x144>)
 8008766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008768:	4b4a      	ldr	r3, [pc, #296]	; (8008894 <USBD_SetConfig+0x144>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d905      	bls.n	800877c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f967 	bl	8008a46 <USBD_CtlError>
    return USBD_FAIL;
 8008778:	2303      	movs	r3, #3
 800877a:	e087      	b.n	800888c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008782:	2b02      	cmp	r3, #2
 8008784:	d002      	beq.n	800878c <USBD_SetConfig+0x3c>
 8008786:	2b03      	cmp	r3, #3
 8008788:	d025      	beq.n	80087d6 <USBD_SetConfig+0x86>
 800878a:	e071      	b.n	8008870 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800878c:	4b41      	ldr	r3, [pc, #260]	; (8008894 <USBD_SetConfig+0x144>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01c      	beq.n	80087ce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008794:	4b3f      	ldr	r3, [pc, #252]	; (8008894 <USBD_SetConfig+0x144>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800879e:	4b3d      	ldr	r3, [pc, #244]	; (8008894 <USBD_SetConfig+0x144>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff f99a 	bl	8007ade <USBD_SetClassConfig>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f945 	bl	8008a46 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80087bc:	e065      	b.n	800888a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f9ef 	bl	8008ba2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2203      	movs	r2, #3
 80087c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80087cc:	e05d      	b.n	800888a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f9e7 	bl	8008ba2 <USBD_CtlSendStatus>
    break;
 80087d4:	e059      	b.n	800888a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80087d6:	4b2f      	ldr	r3, [pc, #188]	; (8008894 <USBD_SetConfig+0x144>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d112      	bne.n	8008804 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80087e6:	4b2b      	ldr	r3, [pc, #172]	; (8008894 <USBD_SetConfig+0x144>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087f0:	4b28      	ldr	r3, [pc, #160]	; (8008894 <USBD_SetConfig+0x144>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff f98d 	bl	8007b16 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f9d0 	bl	8008ba2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008802:	e042      	b.n	800888a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008804:	4b23      	ldr	r3, [pc, #140]	; (8008894 <USBD_SetConfig+0x144>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	429a      	cmp	r2, r3
 8008810:	d02a      	beq.n	8008868 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff f97b 	bl	8007b16 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008820:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <USBD_SetConfig+0x144>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800882a:	4b1a      	ldr	r3, [pc, #104]	; (8008894 <USBD_SetConfig+0x144>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff f954 	bl	8007ade <USBD_SetClassConfig>
 8008836:	4603      	mov	r3, r0
 8008838:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00f      	beq.n	8008860 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f8ff 	bl	8008a46 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff f960 	bl	8007b16 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800885e:	e014      	b.n	800888a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f99e 	bl	8008ba2 <USBD_CtlSendStatus>
    break;
 8008866:	e010      	b.n	800888a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f99a 	bl	8008ba2 <USBD_CtlSendStatus>
    break;
 800886e:	e00c      	b.n	800888a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f8e7 	bl	8008a46 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <USBD_SetConfig+0x144>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff f949 	bl	8007b16 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008884:	2303      	movs	r3, #3
 8008886:	73fb      	strb	r3, [r7, #15]
    break;
 8008888:	bf00      	nop
  }

  return ret;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	200001e8 	.word	0x200001e8

08008898 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	88db      	ldrh	r3, [r3, #6]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d004      	beq.n	80088b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8ca 	bl	8008a46 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80088b2:	e022      	b.n	80088fa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	dc02      	bgt.n	80088c4 <USBD_GetConfig+0x2c>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dc03      	bgt.n	80088ca <USBD_GetConfig+0x32>
 80088c2:	e015      	b.n	80088f0 <USBD_GetConfig+0x58>
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d00b      	beq.n	80088e0 <USBD_GetConfig+0x48>
 80088c8:	e012      	b.n	80088f0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3308      	adds	r3, #8
 80088d4:	2201      	movs	r2, #1
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f925 	bl	8008b28 <USBD_CtlSendData>
      break;
 80088de:	e00c      	b.n	80088fa <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3304      	adds	r3, #4
 80088e4:	2201      	movs	r2, #1
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f91d 	bl	8008b28 <USBD_CtlSendData>
      break;
 80088ee:	e004      	b.n	80088fa <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f8a7 	bl	8008a46 <USBD_CtlError>
      break;
 80088f8:	bf00      	nop
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008912:	3b01      	subs	r3, #1
 8008914:	2b02      	cmp	r3, #2
 8008916:	d81e      	bhi.n	8008956 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d004      	beq.n	800892a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f88f 	bl	8008a46 <USBD_CtlError>
      break;
 8008928:	e01a      	b.n	8008960 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f043 0202 	orr.w	r2, r3, #2
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	330c      	adds	r3, #12
 800894a:	2202      	movs	r2, #2
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f8ea 	bl	8008b28 <USBD_CtlSendData>
    break;
 8008954:	e004      	b.n	8008960 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f874 	bl	8008a46 <USBD_CtlError>
    break;
 800895e:	bf00      	nop
  }
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	885b      	ldrh	r3, [r3, #2]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d106      	bne.n	8008988 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f90d 	bl	8008ba2 <USBD_CtlSendStatus>
  }
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a0:	3b01      	subs	r3, #1
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d80b      	bhi.n	80089be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	885b      	ldrh	r3, [r3, #2]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d10c      	bne.n	80089c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f8f3 	bl	8008ba2 <USBD_CtlSendStatus>
      }
      break;
 80089bc:	e004      	b.n	80089c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f840 	bl	8008a46 <USBD_CtlError>
      break;
 80089c6:	e000      	b.n	80089ca <USBD_ClrFeature+0x3a>
      break;
 80089c8:	bf00      	nop
  }
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fac7 	bl	8007f90 <SWAPBYTE>
 8008a02:	4603      	mov	r3, r0
 8008a04:	461a      	mov	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff faba 	bl	8007f90 <SWAPBYTE>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f7ff faad 	bl	8007f90 <SWAPBYTE>
 8008a36:	4603      	mov	r3, r0
 8008a38:	461a      	mov	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	80da      	strh	r2, [r3, #6]
}
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a50:	2180      	movs	r1, #128	; 0x80
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fcb9 	bl	80093ca <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a58:	2100      	movs	r1, #0
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fcb5 	bl	80093ca <USBD_LL_StallEP>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d036      	beq.n	8008aec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a82:	6938      	ldr	r0, [r7, #16]
 8008a84:	f000 f836 	bl	8008af4 <USBD_GetLen>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4413      	add	r3, r2
 8008aae:	2203      	movs	r2, #3
 8008ab0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ab8:	e013      	b.n	8008ae2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	4413      	add	r3, r2
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	7812      	ldrb	r2, [r2, #0]
 8008ac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	613b      	str	r3, [r7, #16]
    idx++;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
    idx++;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e7      	bne.n	8008aba <USBD_GetString+0x52>
 8008aea:	e000      	b.n	8008aee <USBD_GetString+0x86>
    return;
 8008aec:	bf00      	nop
  }
}
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b04:	e005      	b.n	8008b12 <USBD_GetLen+0x1e>
  {
    len++;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1f5      	bne.n	8008b06 <USBD_GetLen+0x12>
  }

  return len;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fcc4 	bl	80094dc <USBD_LL_Transmit>

  return USBD_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 fcb3 	bl	80094dc <USBD_LL_Transmit>

  return USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	2100      	movs	r1, #0
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fcc3 	bl	800951e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2204      	movs	r2, #4
 8008bae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fc8f 	bl	80094dc <USBD_LL_Transmit>

  return USBD_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2205      	movs	r2, #5
 8008bd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fc9d 	bl	800951e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4912      	ldr	r1, [pc, #72]	; (8008c40 <MX_USB_DEVICE_Init+0x50>)
 8008bf8:	4812      	ldr	r0, [pc, #72]	; (8008c44 <MX_USB_DEVICE_Init+0x54>)
 8008bfa:	f7fe ff02 	bl	8007a02 <USBD_Init>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c04:	f7f7 fd48 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008c08:	490f      	ldr	r1, [pc, #60]	; (8008c48 <MX_USB_DEVICE_Init+0x58>)
 8008c0a:	480e      	ldr	r0, [pc, #56]	; (8008c44 <MX_USB_DEVICE_Init+0x54>)
 8008c0c:	f7fe ff2f 	bl	8007a6e <USBD_RegisterClass>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c16:	f7f7 fd3f 	bl	8000698 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008c1a:	490c      	ldr	r1, [pc, #48]	; (8008c4c <MX_USB_DEVICE_Init+0x5c>)
 8008c1c:	4809      	ldr	r0, [pc, #36]	; (8008c44 <MX_USB_DEVICE_Init+0x54>)
 8008c1e:	f7fd fb81 	bl	8006324 <USBD_MSC_RegisterStorage>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c28:	f7f7 fd36 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c2c:	4805      	ldr	r0, [pc, #20]	; (8008c44 <MX_USB_DEVICE_Init+0x54>)
 8008c2e:	f7fe ff3f 	bl	8007ab0 <USBD_Start>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c38:	f7f7 fd2e 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c3c:	bf00      	nop
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	200000f4 	.word	0x200000f4
 8008c44:	2000027c 	.word	0x2000027c
 8008c48:	2000000c 	.word	0x2000000c
 8008c4c:	20000144 	.word	0x20000144

08008c50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2212      	movs	r2, #18
 8008c60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c62:	4b03      	ldr	r3, [pc, #12]	; (8008c70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	20000110 	.word	0x20000110

08008c74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2204      	movs	r2, #4
 8008c84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c86:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	20000124 	.word	0x20000124

08008c98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4907      	ldr	r1, [pc, #28]	; (8008ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8008cae:	4808      	ldr	r0, [pc, #32]	; (8008cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb0:	f7ff feda 	bl	8008a68 <USBD_GetString>
 8008cb4:	e004      	b.n	8008cc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4904      	ldr	r1, [pc, #16]	; (8008ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8008cba:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cbc:	f7ff fed4 	bl	8008a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	2000054c 	.word	0x2000054c
 8008cd0:	0800980c 	.word	0x0800980c

08008cd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ce4:	4804      	ldr	r0, [pc, #16]	; (8008cf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ce6:	f7ff febf 	bl	8008a68 <USBD_GetString>
  return USBD_StrDesc;
 8008cea:	4b02      	ldr	r3, [pc, #8]	; (8008cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	2000054c 	.word	0x2000054c
 8008cf8:	08009820 	.word	0x08009820

08008cfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	221a      	movs	r2, #26
 8008d0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d0e:	f000 f843 	bl	8008d98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d12:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000128 	.word	0x20000128

08008d20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	6039      	str	r1, [r7, #0]
 8008d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d105      	bne.n	8008d3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4907      	ldr	r1, [pc, #28]	; (8008d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d36:	4808      	ldr	r0, [pc, #32]	; (8008d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d38:	f7ff fe96 	bl	8008a68 <USBD_GetString>
 8008d3c:	e004      	b.n	8008d48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4904      	ldr	r1, [pc, #16]	; (8008d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d42:	4805      	ldr	r0, [pc, #20]	; (8008d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d44:	f7ff fe90 	bl	8008a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d48:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	2000054c 	.word	0x2000054c
 8008d58:	08009834 	.word	0x08009834

08008d5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d105      	bne.n	8008d7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	4907      	ldr	r1, [pc, #28]	; (8008d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d72:	4808      	ldr	r0, [pc, #32]	; (8008d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d74:	f7ff fe78 	bl	8008a68 <USBD_GetString>
 8008d78:	e004      	b.n	8008d84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4904      	ldr	r1, [pc, #16]	; (8008d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d7e:	4805      	ldr	r0, [pc, #20]	; (8008d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d80:	f7ff fe72 	bl	8008a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	2000054c 	.word	0x2000054c
 8008d94:	08009840 	.word	0x08009840

08008d98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <Get_SerialNum+0x44>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008da4:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <Get_SerialNum+0x48>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008daa:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <Get_SerialNum+0x4c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	4909      	ldr	r1, [pc, #36]	; (8008de8 <Get_SerialNum+0x50>)
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f814 	bl	8008df0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dc8:	2204      	movs	r2, #4
 8008dca:	4908      	ldr	r1, [pc, #32]	; (8008dec <Get_SerialNum+0x54>)
 8008dcc:	68b8      	ldr	r0, [r7, #8]
 8008dce:	f000 f80f 	bl	8008df0 <IntToUnicode>
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	1fff7a10 	.word	0x1fff7a10
 8008de0:	1fff7a14 	.word	0x1fff7a14
 8008de4:	1fff7a18 	.word	0x1fff7a18
 8008de8:	2000012a 	.word	0x2000012a
 8008dec:	2000013a 	.word	0x2000013a

08008df0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]
 8008e06:	e027      	b.n	8008e58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	0f1b      	lsrs	r3, r3, #28
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d80b      	bhi.n	8008e28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	0f1b      	lsrs	r3, r3, #28
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	440b      	add	r3, r1
 8008e20:	3230      	adds	r2, #48	; 0x30
 8008e22:	b2d2      	uxtb	r2, r2
 8008e24:	701a      	strb	r2, [r3, #0]
 8008e26:	e00a      	b.n	8008e3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	0f1b      	lsrs	r3, r3, #28
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4619      	mov	r1, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	440b      	add	r3, r1
 8008e38:	3237      	adds	r2, #55	; 0x37
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	3301      	adds	r3, #1
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	2200      	movs	r2, #0
 8008e50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	3301      	adds	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]
 8008e58:	7dfa      	ldrb	r2, [r7, #23]
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d3d3      	bcc.n	8008e08 <IntToUnicode+0x18>
  }
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	4603      	mov	r3, r0
 8008e76:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8008e78:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08e      	sub	sp, #56	; 0x38
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;
 8008e96:	23ff      	movs	r3, #255	; 0xff
 8008e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  HAL_SD_GetCardInfo(&hsd, &info);
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	480a      	ldr	r0, [pc, #40]	; (8008ecc <STORAGE_GetCapacity_FS+0x44>)
 8008ea4:	f7fa fc46 	bl	8003734 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr  - 1;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	1e5a      	subs	r2, r3, #1
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	801a      	strh	r2, [r3, #0]
  ret = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  return ret;
 8008ebe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3738      	adds	r7, #56	; 0x38
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	200001f4 	.word	0x200001f4

08008ed0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008eda:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	4613      	mov	r3, r2
 8008f12:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

   int8_t ret = -1;
 8008f14:	23ff      	movs	r3, #255	; 0xff
 8008f16:	75fb      	strb	r3, [r7, #23]

  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8008f18:	89bb      	ldrh	r3, [r7, #12]
 8008f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1e:	9200      	str	r2, [sp, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	4808      	ldr	r0, [pc, #32]	; (8008f48 <STORAGE_Read_FS+0x48>)
 8008f26:	f7f9 fec5 	bl	8002cb4 <HAL_SD_ReadBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8008f2a:	bf00      	nop
 8008f2c:	4806      	ldr	r0, [pc, #24]	; (8008f48 <STORAGE_Read_FS+0x48>)
 8008f2e:	f7fa fca9 	bl	8003884 <HAL_SD_GetCardState>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d1f9      	bne.n	8008f2c <STORAGE_Read_FS+0x2c>
  ret = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	75fb      	strb	r3, [r7, #23]
  return ret;
 8008f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	200001f4 	.word	0x200001f4

08008f4c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af02      	add	r7, sp, #8
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	461a      	mov	r2, r3
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  int8_t ret = -1;
 8008f60:	23ff      	movs	r3, #255	; 0xff
 8008f62:	75fb      	strb	r3, [r7, #23]

   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8008f64:	89bb      	ldrh	r3, [r7, #12]
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	9200      	str	r2, [sp, #0]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	68b9      	ldr	r1, [r7, #8]
 8008f70:	4808      	ldr	r0, [pc, #32]	; (8008f94 <STORAGE_Write_FS+0x48>)
 8008f72:	f7fa f899 	bl	80030a8 <HAL_SD_WriteBlocks>


  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8008f76:	bf00      	nop
 8008f78:	4806      	ldr	r0, [pc, #24]	; (8008f94 <STORAGE_Write_FS+0x48>)
 8008f7a:	f7fa fc83 	bl	8003884 <HAL_SD_GetCardState>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d1f9      	bne.n	8008f78 <STORAGE_Write_FS+0x2c>
  ret = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	75fb      	strb	r3, [r7, #23]
  return ret;
 8008f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	200001f4 	.word	0x200001f4

08008f98 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008f9c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fb0:	f107 0314 	add.w	r3, r7, #20
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	605a      	str	r2, [r3, #4]
 8008fba:	609a      	str	r2, [r3, #8]
 8008fbc:	60da      	str	r2, [r3, #12]
 8008fbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fc8:	d13a      	bne.n	8009040 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fca:	2300      	movs	r3, #0
 8008fcc:	613b      	str	r3, [r7, #16]
 8008fce:	4b1e      	ldr	r3, [pc, #120]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	4a1d      	ldr	r2, [pc, #116]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 8008fd4:	f043 0301 	orr.w	r3, r3, #1
 8008fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008fda:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	613b      	str	r3, [r7, #16]
 8008fe4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fe6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fec:	2302      	movs	r3, #2
 8008fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ff8:	230a      	movs	r3, #10
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ffc:	f107 0314 	add.w	r3, r7, #20
 8009000:	4619      	mov	r1, r3
 8009002:	4812      	ldr	r0, [pc, #72]	; (800904c <HAL_PCD_MspInit+0xa4>)
 8009004:	f7f7 fe36 	bl	8000c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009008:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 800900a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900c:	4a0e      	ldr	r2, [pc, #56]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 800900e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009012:	6353      	str	r3, [r2, #52]	; 0x34
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 800901a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901c:	4a0a      	ldr	r2, [pc, #40]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 800901e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009022:	6453      	str	r3, [r2, #68]	; 0x44
 8009024:	4b08      	ldr	r3, [pc, #32]	; (8009048 <HAL_PCD_MspInit+0xa0>)
 8009026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009030:	2200      	movs	r2, #0
 8009032:	2100      	movs	r1, #0
 8009034:	2043      	movs	r0, #67	; 0x43
 8009036:	f7f7 fde6 	bl	8000c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800903a:	2043      	movs	r0, #67	; 0x43
 800903c:	f7f7 fdff 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009040:	bf00      	nop
 8009042:	3728      	adds	r7, #40	; 0x28
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	40023800 	.word	0x40023800
 800904c:	40020000 	.word	0x40020000

08009050 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f7fe fd6d 	bl	8007b46 <USBD_LL_SetupStage>
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	4613      	mov	r3, r2
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	1a9b      	subs	r3, r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	440b      	add	r3, r1
 8009094:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	4619      	mov	r1, r3
 800909e:	f7fe fda7 	bl	8007bf0 <USBD_LL_DataOutStage>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	4613      	mov	r3, r2
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	3348      	adds	r3, #72	; 0x48
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f7fe fdf0 	bl	8007cb6 <USBD_LL_DataInStage>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fef4 	bl	8007eda <USBD_LL_SOF>
}
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009102:	2301      	movs	r3, #1
 8009104:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]
 8009112:	e008      	b.n	8009126 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d102      	bne.n	8009122 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]
 8009120:	e001      	b.n	8009126 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009122:	f7f7 fab9 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800912c:	7bfa      	ldrb	r2, [r7, #15]
 800912e:	4611      	mov	r1, r2
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe fe97 	bl	8007e64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fe50 	bl	8007de2 <USBD_LL_Reset>
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fe92 	bl	8007e84 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	6812      	ldr	r2, [r2, #0]
 800916e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009180:	4b04      	ldr	r3, [pc, #16]	; (8009194 <HAL_PCD_SuspendCallback+0x48>)
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	4a03      	ldr	r2, [pc, #12]	; (8009194 <HAL_PCD_SuspendCallback+0x48>)
 8009186:	f043 0306 	orr.w	r3, r3, #6
 800918a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	e000ed00 	.word	0xe000ed00

08009198 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fe81 	bl	8007eae <USBD_LL_Resume>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe feac 	bl	8007f28 <USBD_LL_IsoOUTIncomplete>
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fe8d 	bl	8007f0e <USBD_LL_IsoINIncomplete>
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fe99 	bl	8007f42 <USBD_LL_DevConnected>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe fe96 	bl	8007f58 <USBD_LL_DevDisconnected>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d13c      	bne.n	80092be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009244:	4a20      	ldr	r2, [pc, #128]	; (80092c8 <USBD_LL_Init+0x94>)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a1e      	ldr	r2, [pc, #120]	; (80092c8 <USBD_LL_Init+0x94>)
 8009250:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009254:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <USBD_LL_Init+0x94>)
 8009256:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800925a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800925c:	4b1a      	ldr	r3, [pc, #104]	; (80092c8 <USBD_LL_Init+0x94>)
 800925e:	2204      	movs	r2, #4
 8009260:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009262:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <USBD_LL_Init+0x94>)
 8009264:	2202      	movs	r2, #2
 8009266:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <USBD_LL_Init+0x94>)
 800926a:	2200      	movs	r2, #0
 800926c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800926e:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <USBD_LL_Init+0x94>)
 8009270:	2202      	movs	r2, #2
 8009272:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009274:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <USBD_LL_Init+0x94>)
 8009276:	2200      	movs	r2, #0
 8009278:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800927a:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <USBD_LL_Init+0x94>)
 800927c:	2200      	movs	r2, #0
 800927e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009280:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <USBD_LL_Init+0x94>)
 8009282:	2200      	movs	r2, #0
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009286:	4b10      	ldr	r3, [pc, #64]	; (80092c8 <USBD_LL_Init+0x94>)
 8009288:	2200      	movs	r2, #0
 800928a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800928c:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <USBD_LL_Init+0x94>)
 800928e:	2200      	movs	r2, #0
 8009290:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009292:	480d      	ldr	r0, [pc, #52]	; (80092c8 <USBD_LL_Init+0x94>)
 8009294:	f7f7 fe8a 	bl	8000fac <HAL_PCD_Init>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800929e:	f7f7 f9fb 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80092a2:	2180      	movs	r1, #128	; 0x80
 80092a4:	4808      	ldr	r0, [pc, #32]	; (80092c8 <USBD_LL_Init+0x94>)
 80092a6:	f7f9 f814 	bl	80022d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092aa:	2240      	movs	r2, #64	; 0x40
 80092ac:	2100      	movs	r1, #0
 80092ae:	4806      	ldr	r0, [pc, #24]	; (80092c8 <USBD_LL_Init+0x94>)
 80092b0:	f7f8 ffc8 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092b4:	2280      	movs	r2, #128	; 0x80
 80092b6:	2101      	movs	r1, #1
 80092b8:	4803      	ldr	r0, [pc, #12]	; (80092c8 <USBD_LL_Init+0x94>)
 80092ba:	f7f8 ffc3 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	2000074c 	.word	0x2000074c

080092cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7f7 ff7f 	bl	80011e6 <HAL_PCD_Start>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f94a 	bl	8009588 <USBD_Get_USB_Status>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	4608      	mov	r0, r1
 800930c:	4611      	mov	r1, r2
 800930e:	461a      	mov	r2, r3
 8009310:	4603      	mov	r3, r0
 8009312:	70fb      	strb	r3, [r7, #3]
 8009314:	460b      	mov	r3, r1
 8009316:	70bb      	strb	r3, [r7, #2]
 8009318:	4613      	mov	r3, r2
 800931a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800932a:	78bb      	ldrb	r3, [r7, #2]
 800932c:	883a      	ldrh	r2, [r7, #0]
 800932e:	78f9      	ldrb	r1, [r7, #3]
 8009330:	f7f8 fb63 	bl	80019fa <HAL_PCD_EP_Open>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f924 	bl	8009588 <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009344:	7bbb      	ldrb	r3, [r7, #14]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	4611      	mov	r1, r2
 800936c:	4618      	mov	r0, r3
 800936e:	f7f8 fbac 	bl	8001aca <HAL_PCD_EP_Close>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 f905 	bl	8009588 <USBD_Get_USB_Status>
 800937e:	4603      	mov	r3, r0
 8009380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009382:	7bbb      	ldrb	r3, [r7, #14]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7f8 fd3e 	bl	8001e2c <HAL_PCD_EP_Flush>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f8e6 	bl	8009588 <USBD_Get_USB_Status>
 80093bc:	4603      	mov	r3, r0
 80093be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093e4:	78fa      	ldrb	r2, [r7, #3]
 80093e6:	4611      	mov	r1, r2
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7f8 fc65 	bl	8001cb8 <HAL_PCD_EP_SetStall>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f8c7 	bl	8009588 <USBD_Get_USB_Status>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7f8 fcaa 	bl	8001d80 <HAL_PCD_EP_ClrStall>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 f8a8 	bl	8009588 <USBD_Get_USB_Status>
 8009438:	4603      	mov	r3, r0
 800943a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943c:	7bbb      	ldrb	r3, [r7, #14]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009458:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800945a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800945e:	2b00      	cmp	r3, #0
 8009460:	da0b      	bge.n	800947a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009468:	68f9      	ldr	r1, [r7, #12]
 800946a:	4613      	mov	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	1a9b      	subs	r3, r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	333e      	adds	r3, #62	; 0x3e
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	e00b      	b.n	8009492 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009480:	68f9      	ldr	r1, [r7, #12]
 8009482:	4613      	mov	r3, r2
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009490:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f8 fa77 	bl	80019b0 <HAL_PCD_SetAddress>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f85d 	bl	8009588 <USBD_Get_USB_Status>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	607a      	str	r2, [r7, #4]
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	460b      	mov	r3, r1
 80094ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094fa:	7af9      	ldrb	r1, [r7, #11]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	f7f8 fb90 	bl	8001c24 <HAL_PCD_EP_Transmit>
 8009504:	4603      	mov	r3, r0
 8009506:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f83c 	bl	8009588 <USBD_Get_USB_Status>
 8009510:	4603      	mov	r3, r0
 8009512:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009514:	7dbb      	ldrb	r3, [r7, #22]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
 800952a:	460b      	mov	r3, r1
 800952c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800953c:	7af9      	ldrb	r1, [r7, #11]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	f7f8 fb0c 	bl	8001b5e <HAL_PCD_EP_Receive>
 8009546:	4603      	mov	r3, r0
 8009548:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f81b 	bl	8009588 <USBD_Get_USB_Status>
 8009552:	4603      	mov	r3, r0
 8009554:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009556:	7dbb      	ldrb	r3, [r7, #22]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	4611      	mov	r1, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f7f8 fb3c 	bl	8001bf4 <HAL_PCD_EP_GetRxCount>
 800957c:	4603      	mov	r3, r0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009596:	79fb      	ldrb	r3, [r7, #7]
 8009598:	2b03      	cmp	r3, #3
 800959a:	d817      	bhi.n	80095cc <USBD_Get_USB_Status+0x44>
 800959c:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <USBD_Get_USB_Status+0x1c>)
 800959e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a2:	bf00      	nop
 80095a4:	080095b5 	.word	0x080095b5
 80095a8:	080095bb 	.word	0x080095bb
 80095ac:	080095c1 	.word	0x080095c1
 80095b0:	080095c7 	.word	0x080095c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
    break;
 80095b8:	e00b      	b.n	80095d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095ba:	2303      	movs	r3, #3
 80095bc:	73fb      	strb	r3, [r7, #15]
    break;
 80095be:	e008      	b.n	80095d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095c0:	2301      	movs	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
    break;
 80095c4:	e005      	b.n	80095d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095c6:	2303      	movs	r3, #3
 80095c8:	73fb      	strb	r3, [r7, #15]
    break;
 80095ca:	e002      	b.n	80095d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	73fb      	strb	r3, [r7, #15]
    break;
 80095d0:	bf00      	nop
  }
  return usb_status;
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <__errno>:
 80095e0:	4b01      	ldr	r3, [pc, #4]	; (80095e8 <__errno+0x8>)
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	20000164 	.word	0x20000164

080095ec <__libc_init_array>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4d0d      	ldr	r5, [pc, #52]	; (8009624 <__libc_init_array+0x38>)
 80095f0:	4c0d      	ldr	r4, [pc, #52]	; (8009628 <__libc_init_array+0x3c>)
 80095f2:	1b64      	subs	r4, r4, r5
 80095f4:	10a4      	asrs	r4, r4, #2
 80095f6:	2600      	movs	r6, #0
 80095f8:	42a6      	cmp	r6, r4
 80095fa:	d109      	bne.n	8009610 <__libc_init_array+0x24>
 80095fc:	4d0b      	ldr	r5, [pc, #44]	; (800962c <__libc_init_array+0x40>)
 80095fe:	4c0c      	ldr	r4, [pc, #48]	; (8009630 <__libc_init_array+0x44>)
 8009600:	f000 f8f8 	bl	80097f4 <_init>
 8009604:	1b64      	subs	r4, r4, r5
 8009606:	10a4      	asrs	r4, r4, #2
 8009608:	2600      	movs	r6, #0
 800960a:	42a6      	cmp	r6, r4
 800960c:	d105      	bne.n	800961a <__libc_init_array+0x2e>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f855 3b04 	ldr.w	r3, [r5], #4
 8009614:	4798      	blx	r3
 8009616:	3601      	adds	r6, #1
 8009618:	e7ee      	b.n	80095f8 <__libc_init_array+0xc>
 800961a:	f855 3b04 	ldr.w	r3, [r5], #4
 800961e:	4798      	blx	r3
 8009620:	3601      	adds	r6, #1
 8009622:	e7f2      	b.n	800960a <__libc_init_array+0x1e>
 8009624:	0800988c 	.word	0x0800988c
 8009628:	0800988c 	.word	0x0800988c
 800962c:	0800988c 	.word	0x0800988c
 8009630:	08009890 	.word	0x08009890

08009634 <malloc>:
 8009634:	4b02      	ldr	r3, [pc, #8]	; (8009640 <malloc+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f000 b863 	b.w	8009704 <_malloc_r>
 800963e:	bf00      	nop
 8009640:	20000164 	.word	0x20000164

08009644 <free>:
 8009644:	4b02      	ldr	r3, [pc, #8]	; (8009650 <free+0xc>)
 8009646:	4601      	mov	r1, r0
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	f000 b80b 	b.w	8009664 <_free_r>
 800964e:	bf00      	nop
 8009650:	20000164 	.word	0x20000164

08009654 <memset>:
 8009654:	4402      	add	r2, r0
 8009656:	4603      	mov	r3, r0
 8009658:	4293      	cmp	r3, r2
 800965a:	d100      	bne.n	800965e <memset+0xa>
 800965c:	4770      	bx	lr
 800965e:	f803 1b01 	strb.w	r1, [r3], #1
 8009662:	e7f9      	b.n	8009658 <memset+0x4>

08009664 <_free_r>:
 8009664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009666:	2900      	cmp	r1, #0
 8009668:	d048      	beq.n	80096fc <_free_r+0x98>
 800966a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800966e:	9001      	str	r0, [sp, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f1a1 0404 	sub.w	r4, r1, #4
 8009676:	bfb8      	it	lt
 8009678:	18e4      	addlt	r4, r4, r3
 800967a:	f000 f8ad 	bl	80097d8 <__malloc_lock>
 800967e:	4a20      	ldr	r2, [pc, #128]	; (8009700 <_free_r+0x9c>)
 8009680:	9801      	ldr	r0, [sp, #4]
 8009682:	6813      	ldr	r3, [r2, #0]
 8009684:	4615      	mov	r5, r2
 8009686:	b933      	cbnz	r3, 8009696 <_free_r+0x32>
 8009688:	6063      	str	r3, [r4, #4]
 800968a:	6014      	str	r4, [r2, #0]
 800968c:	b003      	add	sp, #12
 800968e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009692:	f000 b8a7 	b.w	80097e4 <__malloc_unlock>
 8009696:	42a3      	cmp	r3, r4
 8009698:	d90b      	bls.n	80096b2 <_free_r+0x4e>
 800969a:	6821      	ldr	r1, [r4, #0]
 800969c:	1862      	adds	r2, r4, r1
 800969e:	4293      	cmp	r3, r2
 80096a0:	bf04      	itt	eq
 80096a2:	681a      	ldreq	r2, [r3, #0]
 80096a4:	685b      	ldreq	r3, [r3, #4]
 80096a6:	6063      	str	r3, [r4, #4]
 80096a8:	bf04      	itt	eq
 80096aa:	1852      	addeq	r2, r2, r1
 80096ac:	6022      	streq	r2, [r4, #0]
 80096ae:	602c      	str	r4, [r5, #0]
 80096b0:	e7ec      	b.n	800968c <_free_r+0x28>
 80096b2:	461a      	mov	r2, r3
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	b10b      	cbz	r3, 80096bc <_free_r+0x58>
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d9fa      	bls.n	80096b2 <_free_r+0x4e>
 80096bc:	6811      	ldr	r1, [r2, #0]
 80096be:	1855      	adds	r5, r2, r1
 80096c0:	42a5      	cmp	r5, r4
 80096c2:	d10b      	bne.n	80096dc <_free_r+0x78>
 80096c4:	6824      	ldr	r4, [r4, #0]
 80096c6:	4421      	add	r1, r4
 80096c8:	1854      	adds	r4, r2, r1
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	6011      	str	r1, [r2, #0]
 80096ce:	d1dd      	bne.n	800968c <_free_r+0x28>
 80096d0:	681c      	ldr	r4, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	6053      	str	r3, [r2, #4]
 80096d6:	4421      	add	r1, r4
 80096d8:	6011      	str	r1, [r2, #0]
 80096da:	e7d7      	b.n	800968c <_free_r+0x28>
 80096dc:	d902      	bls.n	80096e4 <_free_r+0x80>
 80096de:	230c      	movs	r3, #12
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	e7d3      	b.n	800968c <_free_r+0x28>
 80096e4:	6825      	ldr	r5, [r4, #0]
 80096e6:	1961      	adds	r1, r4, r5
 80096e8:	428b      	cmp	r3, r1
 80096ea:	bf04      	itt	eq
 80096ec:	6819      	ldreq	r1, [r3, #0]
 80096ee:	685b      	ldreq	r3, [r3, #4]
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	bf04      	itt	eq
 80096f4:	1949      	addeq	r1, r1, r5
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	6054      	str	r4, [r2, #4]
 80096fa:	e7c7      	b.n	800968c <_free_r+0x28>
 80096fc:	b003      	add	sp, #12
 80096fe:	bd30      	pop	{r4, r5, pc}
 8009700:	200001ec 	.word	0x200001ec

08009704 <_malloc_r>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	1ccd      	adds	r5, r1, #3
 8009708:	f025 0503 	bic.w	r5, r5, #3
 800970c:	3508      	adds	r5, #8
 800970e:	2d0c      	cmp	r5, #12
 8009710:	bf38      	it	cc
 8009712:	250c      	movcc	r5, #12
 8009714:	2d00      	cmp	r5, #0
 8009716:	4606      	mov	r6, r0
 8009718:	db01      	blt.n	800971e <_malloc_r+0x1a>
 800971a:	42a9      	cmp	r1, r5
 800971c:	d903      	bls.n	8009726 <_malloc_r+0x22>
 800971e:	230c      	movs	r3, #12
 8009720:	6033      	str	r3, [r6, #0]
 8009722:	2000      	movs	r0, #0
 8009724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009726:	f000 f857 	bl	80097d8 <__malloc_lock>
 800972a:	4921      	ldr	r1, [pc, #132]	; (80097b0 <_malloc_r+0xac>)
 800972c:	680a      	ldr	r2, [r1, #0]
 800972e:	4614      	mov	r4, r2
 8009730:	b99c      	cbnz	r4, 800975a <_malloc_r+0x56>
 8009732:	4f20      	ldr	r7, [pc, #128]	; (80097b4 <_malloc_r+0xb0>)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	b923      	cbnz	r3, 8009742 <_malloc_r+0x3e>
 8009738:	4621      	mov	r1, r4
 800973a:	4630      	mov	r0, r6
 800973c:	f000 f83c 	bl	80097b8 <_sbrk_r>
 8009740:	6038      	str	r0, [r7, #0]
 8009742:	4629      	mov	r1, r5
 8009744:	4630      	mov	r0, r6
 8009746:	f000 f837 	bl	80097b8 <_sbrk_r>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d123      	bne.n	8009796 <_malloc_r+0x92>
 800974e:	230c      	movs	r3, #12
 8009750:	6033      	str	r3, [r6, #0]
 8009752:	4630      	mov	r0, r6
 8009754:	f000 f846 	bl	80097e4 <__malloc_unlock>
 8009758:	e7e3      	b.n	8009722 <_malloc_r+0x1e>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	1b5b      	subs	r3, r3, r5
 800975e:	d417      	bmi.n	8009790 <_malloc_r+0x8c>
 8009760:	2b0b      	cmp	r3, #11
 8009762:	d903      	bls.n	800976c <_malloc_r+0x68>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	441c      	add	r4, r3
 8009768:	6025      	str	r5, [r4, #0]
 800976a:	e004      	b.n	8009776 <_malloc_r+0x72>
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	42a2      	cmp	r2, r4
 8009770:	bf0c      	ite	eq
 8009772:	600b      	streq	r3, [r1, #0]
 8009774:	6053      	strne	r3, [r2, #4]
 8009776:	4630      	mov	r0, r6
 8009778:	f000 f834 	bl	80097e4 <__malloc_unlock>
 800977c:	f104 000b 	add.w	r0, r4, #11
 8009780:	1d23      	adds	r3, r4, #4
 8009782:	f020 0007 	bic.w	r0, r0, #7
 8009786:	1ac2      	subs	r2, r0, r3
 8009788:	d0cc      	beq.n	8009724 <_malloc_r+0x20>
 800978a:	1a1b      	subs	r3, r3, r0
 800978c:	50a3      	str	r3, [r4, r2]
 800978e:	e7c9      	b.n	8009724 <_malloc_r+0x20>
 8009790:	4622      	mov	r2, r4
 8009792:	6864      	ldr	r4, [r4, #4]
 8009794:	e7cc      	b.n	8009730 <_malloc_r+0x2c>
 8009796:	1cc4      	adds	r4, r0, #3
 8009798:	f024 0403 	bic.w	r4, r4, #3
 800979c:	42a0      	cmp	r0, r4
 800979e:	d0e3      	beq.n	8009768 <_malloc_r+0x64>
 80097a0:	1a21      	subs	r1, r4, r0
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 f808 	bl	80097b8 <_sbrk_r>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d1dd      	bne.n	8009768 <_malloc_r+0x64>
 80097ac:	e7cf      	b.n	800974e <_malloc_r+0x4a>
 80097ae:	bf00      	nop
 80097b0:	200001ec 	.word	0x200001ec
 80097b4:	200001f0 	.word	0x200001f0

080097b8 <_sbrk_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4d06      	ldr	r5, [pc, #24]	; (80097d4 <_sbrk_r+0x1c>)
 80097bc:	2300      	movs	r3, #0
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	f7f7 f838 	bl	8000838 <_sbrk>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_sbrk_r+0x1a>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_sbrk_r+0x1a>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	20000b54 	.word	0x20000b54

080097d8 <__malloc_lock>:
 80097d8:	4801      	ldr	r0, [pc, #4]	; (80097e0 <__malloc_lock+0x8>)
 80097da:	f000 b809 	b.w	80097f0 <__retarget_lock_acquire_recursive>
 80097de:	bf00      	nop
 80097e0:	20000b5c 	.word	0x20000b5c

080097e4 <__malloc_unlock>:
 80097e4:	4801      	ldr	r0, [pc, #4]	; (80097ec <__malloc_unlock+0x8>)
 80097e6:	f000 b804 	b.w	80097f2 <__retarget_lock_release_recursive>
 80097ea:	bf00      	nop
 80097ec:	20000b5c 	.word	0x20000b5c

080097f0 <__retarget_lock_acquire_recursive>:
 80097f0:	4770      	bx	lr

080097f2 <__retarget_lock_release_recursive>:
 80097f2:	4770      	bx	lr

080097f4 <_init>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	bf00      	nop
 80097f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fa:	bc08      	pop	{r3}
 80097fc:	469e      	mov	lr, r3
 80097fe:	4770      	bx	lr

08009800 <_fini>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	bf00      	nop
 8009804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009806:	bc08      	pop	{r3}
 8009808:	469e      	mov	lr, r3
 800980a:	4770      	bx	lr
