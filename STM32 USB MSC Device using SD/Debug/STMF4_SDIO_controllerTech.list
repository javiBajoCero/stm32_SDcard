
STMF4_SDIO_controllerTech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008878  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe0  08008fe0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000249c  2000008c  08009074  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002528  08009074  00022528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131ff  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d37  00000000  00000000  000332bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00035ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00036c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002360b  00000000  00000000  00037790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c94  00000000  00000000  0005ad9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c873e  00000000  00000000  0006ba2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013416d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  001341c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089f0 	.word	0x080089f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	080089f0 	.word	0x080089f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fbcc 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f888 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f938 	bl	80007f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f90e 	bl	80007a8 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800058c:	f000 f8ec 	bl	8000768 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000590:	f003 ff3c 	bl	800440c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //5. File Operations
res=f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	4931      	ldr	r1, [pc, #196]	; (800065c <main+0xe4>)
 8000598:	4831      	ldr	r0, [pc, #196]	; (8000660 <main+0xe8>)
 800059a:	f006 fb5b 	bl	8006c54 <f_mount>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b30      	ldr	r3, [pc, #192]	; (8000664 <main+0xec>)
 80005a4:	701a      	strb	r2, [r3, #0]
  	HAL_Delay(200);
 80005a6:	20c8      	movs	r0, #200	; 0xc8
 80005a8:	f000 fc28 	bl	8000dfc <HAL_Delay>
  		//Open file for writing (Create)
res=f_open(&SDFile, "F7FILE2.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 80005ac:	220a      	movs	r2, #10
 80005ae:	492e      	ldr	r1, [pc, #184]	; (8000668 <main+0xf0>)
 80005b0:	482e      	ldr	r0, [pc, #184]	; (800066c <main+0xf4>)
 80005b2:	f006 fb95 	bl	8006ce0 <f_open>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <main+0xec>)
 80005bc:	701a      	strb	r2, [r3, #0]

  		//Write to the text file
  		res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80005be:	482c      	ldr	r0, [pc, #176]	; (8000670 <main+0xf8>)
 80005c0:	f7ff fe06 	bl	80001d0 <strlen>
 80005c4:	4602      	mov	r2, r0
 80005c6:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <main+0xfc>)
 80005c8:	4929      	ldr	r1, [pc, #164]	; (8000670 <main+0xf8>)
 80005ca:	4828      	ldr	r0, [pc, #160]	; (800066c <main+0xf4>)
 80005cc:	f006 feb3 	bl	8007336 <f_write>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <main+0xec>)
 80005d6:	701a      	strb	r2, [r3, #0]
  		if((byteswritten == 0) || (res != FR_OK))
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <main+0xfc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <main+0x70>
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0xec>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <main+0x78>
  		{
  			printf("Failed to write file!\r\n");
 80005e8:	4823      	ldr	r0, [pc, #140]	; (8000678 <main+0x100>)
 80005ea:	f007 fabb 	bl	8007b64 <puts>
 80005ee:	e002      	b.n	80005f6 <main+0x7e>
  		}
  		else printf("File written successfully\r\n");
 80005f0:	4822      	ldr	r0, [pc, #136]	; (800067c <main+0x104>)
 80005f2:	f007 fab7 	bl	8007b64 <puts>

  		f_close(&SDFile);
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <main+0xf4>)
 80005f8:	f007 f8af 	bl	800775a <f_close>

  		//Test read file
  		f_open(&SDFile, "F7FILE2.TXT",  FA_READ);
 80005fc:	2201      	movs	r2, #1
 80005fe:	491a      	ldr	r1, [pc, #104]	; (8000668 <main+0xf0>)
 8000600:	481a      	ldr	r0, [pc, #104]	; (800066c <main+0xf4>)
 8000602:	f006 fb6d 	bl	8006ce0 <f_open>
  		memset(rtext,0,sizeof(rtext));
 8000606:	2264      	movs	r2, #100	; 0x64
 8000608:	2100      	movs	r1, #0
 800060a:	481d      	ldr	r0, [pc, #116]	; (8000680 <main+0x108>)
 800060c:	f007 fa1c 	bl	8007a48 <memset>
  		res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <main+0x10c>)
 8000612:	2264      	movs	r2, #100	; 0x64
 8000614:	491a      	ldr	r1, [pc, #104]	; (8000680 <main+0x108>)
 8000616:	4815      	ldr	r0, [pc, #84]	; (800066c <main+0xf4>)
 8000618:	f006 fd2e 	bl	8007078 <f_read>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <main+0xec>)
 8000622:	701a      	strb	r2, [r3, #0]
  		if((bytesread == 0) || (res != FR_OK))
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <main+0x10c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <main+0xbc>
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <main+0xec>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <main+0xc4>
  		{
  			printf("Failed to read file!\r\n");
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <main+0x110>)
 8000636:	f007 fa95 	bl	8007b64 <puts>
 800063a:	e006      	b.n	800064a <main+0xd2>
  		}
  		else
  		{
  			printf("File read successfully\r\n");
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <main+0x114>)
 800063e:	f007 fa91 	bl	8007b64 <puts>
  			printf("File content: %s\r\n", (char *)rtext);
 8000642:	490f      	ldr	r1, [pc, #60]	; (8000680 <main+0x108>)
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <main+0x118>)
 8000646:	f007 fa07 	bl	8007a58 <iprintf>
  		}
  		f_close(&SDFile);
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0xf4>)
 800064c:	f007 f885 	bl	800775a <f_close>
  	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <main+0xe8>)
 8000656:	f006 fafd 	bl	8006c54 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0xe2>
 800065c:	200004ac 	.word	0x200004ac
 8000660:	200014e0 	.word	0x200014e0
 8000664:	200004a0 	.word	0x200004a0
 8000668:	08008a08 	.word	0x08008a08
 800066c:	200004b0 	.word	0x200004b0
 8000670:	20000000 	.word	0x20000000
 8000674:	20000350 	.word	0x20000350
 8000678:	08008a14 	.word	0x08008a14
 800067c:	08008a2c 	.word	0x08008a2c
 8000680:	200003b8 	.word	0x200003b8
 8000684:	20000354 	.word	0x20000354
 8000688:	08008a48 	.word	0x08008a48
 800068c:	08008a60 	.word	0x08008a60
 8000690:	08008a78 	.word	0x08008a78

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 f9d0 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000708:	23a8      	movs	r3, #168	; 0xa8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f9df 	bl	8001adc <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 f8a9 	bl	800087a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fc38 	bl	8001fbc <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 f892 	bl	800087a <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SDIO_SD_Init+0x38>)
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <MX_SDIO_SD_Init+0x3c>)
 8000770:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_SDIO_SD_Init+0x38>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SDIO_SD_Init+0x38>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_SDIO_SD_Init+0x38>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SDIO_SD_Init+0x38>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MX_SDIO_SD_Init+0x38>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <MX_SDIO_SD_Init+0x38>)
 8000792:	2205      	movs	r2, #5
 8000794:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	2000041c 	.word	0x2000041c
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	203b      	movs	r0, #59	; 0x3b
 80007d0:	f000 fc13 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007d4:	203b      	movs	r0, #59	; 0x3b
 80007d6:	f000 fc2c 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2045      	movs	r0, #69	; 0x45
 80007e0:	f000 fc0b 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007e4:	2045      	movs	r0, #69	; 0x45
 80007e6:	f000 fc24 	bl	8001032 <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_GPIO_Init+0x68>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <MX_GPIO_Init+0x68>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_GPIO_Init+0x68>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_GPIO_Init+0x68>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <MX_GPIO_Init+0x68>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_GPIO_Init+0x68>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_GPIO_Init+0x68>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <MX_GPIO_Init+0x68>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_GPIO_Init+0x68>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a68      	ldr	r2, [pc, #416]	; (8000a98 <HAL_SD_MspInit+0x1c0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	f040 80c9 	bne.w	8000a8e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	4a65      	ldr	r2, [pc, #404]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 8000906:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800090a:	6453      	str	r3, [r2, #68]	; 0x44
 800090c:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a5e      	ldr	r2, [pc, #376]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
 8000928:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b58      	ldr	r3, [pc, #352]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a57      	ldr	r2, [pc, #348]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
 8000944:	4b55      	ldr	r3, [pc, #340]	; (8000a9c <HAL_SD_MspInit+0x1c4>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000950:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000954:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000962:	230c      	movs	r3, #12
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	484c      	ldr	r0, [pc, #304]	; (8000aa0 <HAL_SD_MspInit+0x1c8>)
 800096e:	f000 ff19 	bl	80017a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000972:	2304      	movs	r3, #4
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000982:	230c      	movs	r3, #12
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4845      	ldr	r0, [pc, #276]	; (8000aa4 <HAL_SD_MspInit+0x1cc>)
 800098e:	f000 ff09 	bl	80017a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 8000994:	4a45      	ldr	r2, [pc, #276]	; (8000aac <HAL_SD_MspInit+0x1d4>)
 8000996:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000998:	4b43      	ldr	r3, [pc, #268]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a0:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a6:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ac:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b4:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ba:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009bc:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80009c4:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009c6:	2220      	movs	r2, #32
 80009c8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009d8:	2203      	movs	r2, #3
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 80009ee:	f000 fb3b 	bl	8001068 <HAL_DMA_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80009f8:	f7ff ff3f 	bl	800087a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 8000a00:	641a      	str	r2, [r3, #64]	; 0x40
 8000a02:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <HAL_SD_MspInit+0x1d0>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a0a:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <HAL_SD_MspInit+0x1dc>)
 8000a0c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a14:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a18:	2240      	movs	r2, #64	; 0x40
 8000a1a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a28:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a30:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a38:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a4e:	2203      	movs	r2, #3
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a62:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a64:	f000 fb00 	bl	8001068 <HAL_DMA_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000a6e:	f7ff ff04 	bl	800087a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_SD_MspInit+0x1d8>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2031      	movs	r0, #49	; 0x31
 8000a84:	f000 fab9 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a88:	2031      	movs	r0, #49	; 0x31
 8000a8a:	f000 fad2 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40012c00 	.word	0x40012c00
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	200002f0 	.word	0x200002f0
 8000aac:	40026458 	.word	0x40026458
 8000ab0:	20000358 	.word	0x20000358
 8000ab4:	400264a0 	.word	0x400264a0

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f956 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <SDIO_IRQHandler+0x10>)
 8000b1a:	f001 fe81 	bl	8002820 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000041c 	.word	0x2000041c

08000b28 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA2_Stream3_IRQHandler+0x10>)
 8000b2e:	f000 fbc3 	bl	80012b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200002f0 	.word	0x200002f0

08000b3c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <DMA2_Stream6_IRQHandler+0x10>)
 8000b42:	f000 fbb9 	bl	80012b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000358 	.word	0x20000358

08000b50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
	}

return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe5d 	bl	8000864 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <_write+0x12>
	}
	return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f006 feca 	bl	80079f4 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	200000a8 	.word	0x200000a8
 8000c94:	20002528 	.word	0x20002528

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <SystemInit+0x28>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <SystemInit+0x28>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SystemInit+0x28>)
 8000cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cca:	e003      	b.n	8000cd4 <LoopCopyDataInit>

08000ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cd2:	3104      	adds	r1, #4

08000cd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cdc:	d3f6      	bcc.n	8000ccc <CopyDataInit>
  ldr  r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ce0:	e002      	b.n	8000ce8 <LoopFillZerobss>

08000ce2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ce4:	f842 3b04 	str.w	r3, [r2], #4

08000ce8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cec:	d3f9      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffd3 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f006 fe85 	bl	8007a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc3f 	bl	8000578 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d00:	08008fe8 	.word	0x08008fe8
  ldr  r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d08:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8000d0c:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8000d10:	20002528 	.word	0x20002528

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f94f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fd9c 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f967 	bl	800104e <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f92f 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000001c 	.word	0x2000001c
 8000db4:	20000024 	.word	0x20000024
 8000db8:	20000020 	.word	0x20000020

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000024 	.word	0x20000024
 8000de0:	200004a4 	.word	0x200004a4

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200004a4 	.word	0x200004a4

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000024 	.word	0x20000024

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff feb6 	bl	8000de4 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e099      	b.n	80011b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a4:	e00f      	b.n	80010c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a6:	f7ff fe9d 	bl	8000de4 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d908      	bls.n	80010c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2220      	movs	r2, #32
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e078      	b.n	80011b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e8      	bne.n	80010a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_DMA_Init+0x158>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	2b04      	cmp	r3, #4
 800111e:	d107      	bne.n	8001130 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4313      	orrs	r3, r2
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4313      	orrs	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f023 0307 	bic.w	r3, r3, #7
 8001146:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4313      	orrs	r3, r2
 8001150:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	2b04      	cmp	r3, #4
 8001158:	d117      	bne.n	800118a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00e      	beq.n	800118a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fa9d 	bl	80016ac <DMA_CheckFifoParam>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2240      	movs	r2, #64	; 0x40
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001186:	2301      	movs	r3, #1
 8001188:	e016      	b.n	80011b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fa54 	bl	8001640 <DMA_CalcBaseAndBitshift>
 8001198:	4603      	mov	r3, r0
 800119a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	223f      	movs	r2, #63	; 0x3f
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	f010803f 	.word	0xf010803f

080011c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_DMA_Start_IT+0x26>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e040      	b.n	800126c <HAL_DMA_Start_IT+0xa8>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d12f      	bne.n	800125e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2202      	movs	r2, #2
 8001202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f9e6 	bl	80015e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121c:	223f      	movs	r2, #63	; 0x3f
 800121e:	409a      	lsls	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0216 	orr.w	r2, r2, #22
 8001232:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0208 	orr.w	r2, r2, #8
 800124a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e005      	b.n	800126a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001266:	2302      	movs	r3, #2
 8001268:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800126a:	7dfb      	ldrb	r3, [r7, #23]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d004      	beq.n	8001292 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00c      	b.n	80012ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2205      	movs	r2, #5
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012c4:	4b92      	ldr	r3, [pc, #584]	; (8001510 <HAL_DMA_IRQHandler+0x258>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a92      	ldr	r2, [pc, #584]	; (8001514 <HAL_DMA_IRQHandler+0x25c>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	0a9b      	lsrs	r3, r3, #10
 80012d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	2208      	movs	r2, #8
 80012e4:	409a      	lsls	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01a      	beq.n	8001324 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0204 	bic.w	r2, r2, #4
 800130a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	2208      	movs	r2, #8
 8001312:	409a      	lsls	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001328:	2201      	movs	r2, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d012      	beq.n	800135a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001346:	2201      	movs	r2, #1
 8001348:	409a      	lsls	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001352:	f043 0202 	orr.w	r2, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	2204      	movs	r2, #4
 8001360:	409a      	lsls	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d012      	beq.n	8001390 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137c:	2204      	movs	r2, #4
 800137e:	409a      	lsls	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	f043 0204 	orr.w	r2, r3, #4
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	2210      	movs	r2, #16
 8001396:	409a      	lsls	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d043      	beq.n	8001428 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d03c      	beq.n	8001428 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	2210      	movs	r2, #16
 80013b4:	409a      	lsls	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d018      	beq.n	80013fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d108      	bne.n	80013e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d024      	beq.n	8001428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	4798      	blx	r3
 80013e6:	e01f      	b.n	8001428 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01b      	beq.n	8001428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
 80013f8:	e016      	b.n	8001428 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d107      	bne.n	8001418 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0208 	bic.w	r2, r2, #8
 8001416:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	2220      	movs	r2, #32
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 808e 	beq.w	8001556 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8086 	beq.w	8001556 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144e:	2220      	movs	r2, #32
 8001450:	409a      	lsls	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b05      	cmp	r3, #5
 8001460:	d136      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0216 	bic.w	r2, r2, #22
 8001470:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001480:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <HAL_DMA_IRQHandler+0x1da>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0208 	bic.w	r2, r2, #8
 80014a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	223f      	movs	r2, #63	; 0x3f
 80014a8:	409a      	lsls	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d07d      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
        }
        return;
 80014ce:	e078      	b.n	80015c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01c      	beq.n	8001518 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d030      	beq.n	8001556 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
 80014fc:	e02b      	b.n	8001556 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	2b00      	cmp	r3, #0
 8001504:	d027      	beq.n	8001556 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
 800150e:	e022      	b.n	8001556 <HAL_DMA_IRQHandler+0x29e>
 8001510:	2000001c 	.word	0x2000001c
 8001514:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10f      	bne.n	8001546 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0210 	bic.w	r2, r2, #16
 8001534:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155a:	2b00      	cmp	r3, #0
 800155c:	d032      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d022      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2205      	movs	r2, #5
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3301      	adds	r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	429a      	cmp	r2, r3
 800158c:	d307      	bcc.n	800159e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f2      	bne.n	8001582 <HAL_DMA_IRQHandler+0x2ca>
 800159c:	e000      	b.n	80015a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800159e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e000      	b.n	80015c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015c2:	bf00      	nop
    }
  }
}
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop

080015cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001600:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b40      	cmp	r3, #64	; 0x40
 8001610:	d108      	bne.n	8001624 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001622:	e007      	b.n	8001634 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	60da      	str	r2, [r3, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	3b10      	subs	r3, #16
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <DMA_CalcBaseAndBitshift+0x68>)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d909      	bls.n	8001682 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001676:	f023 0303 	bic.w	r3, r3, #3
 800167a:	1d1a      	adds	r2, r3, #4
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	659a      	str	r2, [r3, #88]	; 0x58
 8001680:	e007      	b.n	8001692 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	aaaaaaab 	.word	0xaaaaaaab
 80016a8:	08008ae4 	.word	0x08008ae4

080016ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11f      	bne.n	8001706 <DMA_CheckFifoParam+0x5a>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d856      	bhi.n	800177a <DMA_CheckFifoParam+0xce>
 80016cc:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <DMA_CheckFifoParam+0x28>)
 80016ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d2:	bf00      	nop
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	080016f7 	.word	0x080016f7
 80016dc:	080016e5 	.word	0x080016e5
 80016e0:	0800177b 	.word	0x0800177b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d046      	beq.n	800177e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f4:	e043      	b.n	800177e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016fe:	d140      	bne.n	8001782 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001704:	e03d      	b.n	8001782 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170e:	d121      	bne.n	8001754 <DMA_CheckFifoParam+0xa8>
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d837      	bhi.n	8001786 <DMA_CheckFifoParam+0xda>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <DMA_CheckFifoParam+0x70>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	0800172d 	.word	0x0800172d
 8001720:	08001733 	.word	0x08001733
 8001724:	0800172d 	.word	0x0800172d
 8001728:	08001745 	.word	0x08001745
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
      break;
 8001730:	e030      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d025      	beq.n	800178a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001742:	e022      	b.n	800178a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800174c:	d11f      	bne.n	800178e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001752:	e01c      	b.n	800178e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d903      	bls.n	8001762 <DMA_CheckFifoParam+0xb6>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d003      	beq.n	8001768 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001760:	e018      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
      break;
 8001766:	e015      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
      break;
 8001778:	e00b      	b.n	8001792 <DMA_CheckFifoParam+0xe6>
      break;
 800177a:	bf00      	nop
 800177c:	e00a      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      break;
 800177e:	bf00      	nop
 8001780:	e008      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      break;
 8001782:	bf00      	nop
 8001784:	e006      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      break;
 8001786:	bf00      	nop
 8001788:	e004      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e002      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      break;   
 800178e:	bf00      	nop
 8001790:	e000      	b.n	8001794 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
    }
  } 
  
  return status; 
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e16b      	b.n	8001a98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c0:	2201      	movs	r2, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 815a 	bne.w	8001a92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d00b      	beq.n	80017fe <HAL_GPIO_Init+0x5a>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f2:	2b11      	cmp	r3, #17
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d130      	bne.n	8001860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 0201 	and.w	r2, r3, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0xfc>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b12      	cmp	r3, #18
 800189e:	d123      	bne.n	80018e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	69b9      	ldr	r1, [r7, #24]
 80018e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80b4 	beq.w	8001a92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_GPIO_Init+0x30c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001946:	4a5b      	ldr	r2, [pc, #364]	; (8001ab4 <HAL_GPIO_Init+0x310>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_GPIO_Init+0x314>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a51      	ldr	r2, [pc, #324]	; (8001abc <HAL_GPIO_Init+0x318>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x222>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a50      	ldr	r2, [pc, #320]	; (8001ac0 <HAL_GPIO_Init+0x31c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x21e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <HAL_GPIO_Init+0x320>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x21a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <HAL_GPIO_Init+0x324>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x216>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <HAL_GPIO_Init+0x328>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x212>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_GPIO_Init+0x32c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x20e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <HAL_GPIO_Init+0x330>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x20a>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00e      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e00c      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b2:	2306      	movs	r3, #6
 80019b4:	e00a      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x310>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0e:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f ae90 	bls.w	80017c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e25b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d075      	beq.n	8001be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afa:	4ba3      	ldr	r3, [pc, #652]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d00c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4ba0      	ldr	r3, [pc, #640]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d112      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b12:	4b9d      	ldr	r3, [pc, #628]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1e:	d10b      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d05b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x108>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d157      	bne.n	8001be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e236      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_OscConfig+0x74>
 8001b42:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a90      	ldr	r2, [pc, #576]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x98>
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a8a      	ldr	r2, [pc, #552]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a87      	ldr	r2, [pc, #540]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b74:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a83      	ldr	r2, [pc, #524]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a80      	ldr	r2, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff f926 	bl	8000de4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f922 	bl	8000de4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1fb      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xc0>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f912 	bl	8000de4 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f90e 	bl	8000de4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1e7      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xe8>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf2:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e1bb      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4952      	ldr	r1, [pc, #328]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff f8c7 	bl	8000de4 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f8c3 	bl	8000de4 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e19c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4940      	ldr	r1, [pc, #256]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f8a6 	bl	8000de4 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f8a2 	bl	8000de4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e17b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d016      	beq.n	8001cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f886 	bl	8000de4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f882 	bl	8000de4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e15b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x200>
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff f86f 	bl	8000de4 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff f86b 	bl	8000de4 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e144      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a0 	beq.w	8001e76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f831 	bl	8000de4 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e011      	b.n	8001daa <HAL_RCC_OscConfig+0x2ce>
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	42470000 	.word	0x42470000
 8001d90:	42470e80 	.word	0x42470e80
 8001d94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d98:	f7ff f824 	bl	8000de4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0fd      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <HAL_RCC_OscConfig+0x4d4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x312>
 8001dd4:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a76      	ldr	r2, [pc, #472]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a73      	ldr	r2, [pc, #460]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dee:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a70      	ldr	r2, [pc, #448]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a6d      	ldr	r2, [pc, #436]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7fe ffe9 	bl	8000de4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe ffe5 	bl	8000de4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0bc      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x33a>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe ffd3 	bl	8000de4 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe ffcf 	bl	8000de4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0a6      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8092 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d05c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d141      	bne.n	8001f18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x4dc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe ffa3 	bl	8000de4 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7fe ff9f 	bl	8000de4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e078      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	4933      	ldr	r1, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_RCC_OscConfig+0x4dc>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe ff78 	bl	8000de4 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe ff74 	bl	8000de4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e04d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
 8001f16:	e045      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x4dc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe ff61 	bl	8000de4 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7fe ff5d 	bl	8000de4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e036      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x44a>
 8001f44:	e02e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e029      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_RCC_OscConfig+0x4d8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d115      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470060 	.word	0x42470060

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cc      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d90c      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800201a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d044      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d119      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d003      	beq.n	800207a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e067      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fe9a 	bl	8000de4 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe fe96 	bl	8000de4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20c      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fdfa 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00
 8002178:	40023800 	.word	0x40023800
 800217c:	08008ad4 	.word	0x08008ad4
 8002180:	2000001c 	.word	0x2000001c
 8002184:	20000020 	.word	0x20000020

08002188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	2300      	movs	r3, #0
 800219a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a0:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d00d      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x40>
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	f200 80bd 	bhi.w	800232c <HAL_RCC_GetSysClockFreq+0x1a4>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x34>
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ba:	e0b7      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021be:	60bb      	str	r3, [r7, #8]
       break;
 80021c0:	e0b7      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021c4:	60bb      	str	r3, [r7, #8]
      break;
 80021c6:	e0b4      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c8:	4b5d      	ldr	r3, [pc, #372]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d04d      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4b58      	ldr	r3, [pc, #352]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	461a      	mov	r2, r3
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	ea02 0800 	and.w	r8, r2, r0
 80021f6:	ea03 0901 	and.w	r9, r3, r1
 80021fa:	4640      	mov	r0, r8
 80021fc:	4649      	mov	r1, r9
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	014b      	lsls	r3, r1, #5
 8002208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800220c:	0142      	lsls	r2, r0, #5
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	ebb0 0008 	subs.w	r0, r0, r8
 8002216:	eb61 0109 	sbc.w	r1, r1, r9
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002228:	0182      	lsls	r2, r0, #6
 800222a:	1a12      	subs	r2, r2, r0
 800222c:	eb63 0301 	sbc.w	r3, r3, r1
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	00d9      	lsls	r1, r3, #3
 800223a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800223e:	00d0      	lsls	r0, r2, #3
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	eb12 0208 	adds.w	r2, r2, r8
 8002248:	eb43 0309 	adc.w	r3, r3, r9
 800224c:	f04f 0000 	mov.w	r0, #0
 8002250:	f04f 0100 	mov.w	r1, #0
 8002254:	0259      	lsls	r1, r3, #9
 8002256:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800225a:	0250      	lsls	r0, r2, #9
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	f7fe f808 	bl	8000280 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e04a      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	461a      	mov	r2, r3
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	ea02 0400 	and.w	r4, r2, r0
 8002292:	ea03 0501 	and.w	r5, r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	014b      	lsls	r3, r1, #5
 80022a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022a8:	0142      	lsls	r2, r0, #5
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	1b00      	subs	r0, r0, r4
 80022b0:	eb61 0105 	sbc.w	r1, r1, r5
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	018b      	lsls	r3, r1, #6
 80022be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022c2:	0182      	lsls	r2, r0, #6
 80022c4:	1a12      	subs	r2, r2, r0
 80022c6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	00d9      	lsls	r1, r3, #3
 80022d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022d8:	00d0      	lsls	r0, r2, #3
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	1912      	adds	r2, r2, r4
 80022e0:	eb45 0303 	adc.w	r3, r5, r3
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0299      	lsls	r1, r3, #10
 80022ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022f2:	0290      	lsls	r0, r2, #10
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f7fd ffbc 	bl	8000280 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	60bb      	str	r3, [r7, #8]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800232e:	60bb      	str	r3, [r7, #8]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	68bb      	ldr	r3, [r7, #8]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e022      	b.n	80023a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe fab1 	bl	80008d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2203      	movs	r2, #3
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f814 	bl	80023ac <HAL_SD_InitCard>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00a      	b.n	80023a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af04      	add	r7, sp, #16
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80023c8:	2376      	movs	r3, #118	; 0x76
 80023ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681d      	ldr	r5, [r3, #0]
 80023d0:	466c      	mov	r4, sp
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80023de:	f107 0308 	add.w	r3, r7, #8
 80023e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e4:	4628      	mov	r0, r5
 80023e6:	f001 faad 	bl	8003944 <SDIO_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80023f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e031      	b.n	8002460 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_SD_InitCard+0xbc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fae5 	bl	80039d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_SD_InitCard+0xbc>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 ffda 	bl	80033cc <SD_PowerON>
 8002418:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e013      	b.n	8002460 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fefb 	bl	8003234 <SD_InitCard>
 800243e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bdb0      	pop	{r4, r5, r7, pc}
 8002468:	422580a0 	.word	0x422580a0

0800246c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0c9      	b.n	8002628 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	f040 80c2 	bne.w	8002626 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80024a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	441a      	add	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d907      	bls.n	80024c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0b0      	b.n	8002628 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2203      	movs	r2, #3
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2200      	movs	r2, #0
 8002500:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3380      	adds	r3, #128	; 0x80
 800250c:	4619      	mov	r1, r3
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	025b      	lsls	r3, r3, #9
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	f7fe fe55 	bl	80011c4 <HAL_DMA_Start_IT>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d017      	beq.n	8002550 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a40      	ldr	r2, [pc, #256]	; (8002638 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e06b      	b.n	8002628 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002550:	4b3a      	ldr	r3, [pc, #232]	; (800263c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	2b01      	cmp	r3, #1
 800255c:	d002      	beq.n	8002564 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fac5 	bl	8003afc <SDMMC_CmdBlockLength>
 8002572:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00f      	beq.n	800259a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	431a      	orrs	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e046      	b.n	8002628 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80025a6:	2390      	movs	r3, #144	; 0x90
 80025a8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80025b2:	2301      	movs	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f107 0210 	add.w	r2, r7, #16
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fa6f 	bl	8003aa4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d90a      	bls.n	80025e2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2282      	movs	r2, #130	; 0x82
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fad3 	bl	8003b84 <SDMMC_CmdReadMultiBlock>
 80025de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80025e0:	e009      	b.n	80025f6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2281      	movs	r2, #129	; 0x81
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 faa6 	bl	8003b40 <SDMMC_CmdReadSingleBlock>
 80025f4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	431a      	orrs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e002      	b.n	8002628 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	08003043 	.word	0x08003043
 8002634:	080030b5 	.word	0x080030b5
 8002638:	004005ff 	.word	0x004005ff
 800263c:	4225858c 	.word	0x4225858c

08002640 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0ce      	b.n	8002806 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 80c7 	bne.w	8002804 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	441a      	add	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	429a      	cmp	r2, r3
 8002688:	d907      	bls.n	800269a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0b5      	b.n	8002806 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2203      	movs	r2, #3
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	4a53      	ldr	r2, [pc, #332]	; (8002810 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	4a52      	ldr	r2, [pc, #328]	; (8002814 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80026cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	2200      	movs	r2, #0
 80026d4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d002      	beq.n	80026e4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 fa05 	bl	8003afc <SDMMC_CmdBlockLength>
 80026f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00f      	beq.n	800271a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a46      	ldr	r2, [pc, #280]	; (8002818 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	431a      	orrs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e075      	b.n	8002806 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d90a      	bls.n	8002736 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	22a0      	movs	r2, #160	; 0xa0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800272c:	4618      	mov	r0, r3
 800272e:	f001 fa6d 	bl	8003c0c <SDMMC_CmdWriteMultiBlock>
 8002732:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002734:	e009      	b.n	800274a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2290      	movs	r2, #144	; 0x90
 800273a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002742:	4618      	mov	r0, r3
 8002744:	f001 fa40 	bl	8003bc8 <SDMMC_CmdWriteSingleBlock>
 8002748:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a30      	ldr	r2, [pc, #192]	; (8002818 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	431a      	orrs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e047      	b.n	8002806 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3380      	adds	r3, #128	; 0x80
 8002788:	461a      	mov	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	025b      	lsls	r3, r3, #9
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	f7fe fd18 	bl	80011c4 <HAL_DMA_Start_IT>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01c      	beq.n	80027d4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80027a8:	f023 0302 	bic.w	r3, r3, #2
 80027ac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e018      	b.n	8002806 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	025b      	lsls	r3, r3, #9
 80027de:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80027e0:	2390      	movs	r3, #144	; 0x90
 80027e2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f107 0210 	add.w	r2, r7, #16
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f952 	bl	8003aa4 <SDIO_ConfigData>

      return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3730      	adds	r7, #48	; 0x30
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	08003019 	.word	0x08003019
 8002814:	080030b5 	.word	0x080030b5
 8002818:	004005ff 	.word	0x004005ff
 800281c:	4225858c 	.word	0x4225858c

08002820 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_SD_IRQHandler+0x2e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 ffd6 	bl	80037f8 <SD_Read_IT>
 800284c:	e165      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 808f 	beq.w	800297c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002866:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002876:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800287a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d039      	beq.n	800290a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_SD_IRQHandler+0x8a>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d011      	beq.n	80028ce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 f9ce 	bl	8003c50 <SDMMC_CmdStopTransfer>
 80028b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f92f 	bl	8002b2c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <HAL_SD_IRQHandler+0xda>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f001 fe2c 	bl	8004558 <HAL_SD_RxCpltCallback>
 8002900:	e10b      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f001 fe1e 	bl	8004544 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002908:	e107      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8102 	beq.w	8002b1a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d011      	beq.n	8002944 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f993 	bl	8003c50 <SDMMC_CmdStopTransfer>
 800292a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8f4 	bl	8002b2c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 80e5 	bne.w	8002b1a <HAL_SD_IRQHandler+0x2fa>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 80df 	bne.w	8002b1a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0208 	bic.w	r2, r2, #8
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f001 fde5 	bl	8004544 <HAL_SD_TxCpltCallback>
}
 800297a:	e0ce      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_SD_IRQHandler+0x17c>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 ff80 	bl	800389a <SD_Write_IT>
 800299a:	e0be      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a2:	f240 233a 	movw	r3, #570	; 0x23a
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80b6 	beq.w	8002b1a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	f043 0202 	orr.w	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	f043 0208 	orr.w	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	f043 0208 	orr.w	r2, r3, #8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f240 723a 	movw	r2, #1850	; 0x73a
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002a48:	f023 0302 	bic.w	r3, r3, #2
 8002a4c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 f8fc 	bl	8003c50 <SDMMC_CmdStopTransfer>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f855 	bl	8002b2c <HAL_SD_ErrorCallback>
}
 8002a82:	e04a      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d045      	beq.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_SD_IRQHandler+0x282>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d011      	beq.n	8002ac6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_SD_IRQHandler+0x304>)
 8002aa8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fbe0 	bl	8001274 <HAL_DMA_Abort_IT>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02f      	beq.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fb4a 	bl	8003158 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002ac4:	e029      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_SD_IRQHandler+0x2ba>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d011      	beq.n	8002afe <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_SD_IRQHandler+0x308>)
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fbc4 	bl	8001274 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d013      	beq.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fb65 	bl	80031c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002afc:	e00d      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f001 fd0c 	bl	8004530 <HAL_SD_AbortCallback>
}
 8002b18:	e7ff      	b.n	8002b1a <HAL_SD_IRQHandler+0x2fa>
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	08003159 	.word	0x08003159
 8002b28:	080031c7 	.word	0x080031c7

08002b2c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b4e:	0f9b      	lsrs	r3, r3, #30
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6c:	0e1b      	lsrs	r3, r3, #24
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba0:	0d1b      	lsrs	r3, r3, #20
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bbe:	0bdb      	lsrs	r3, r3, #15
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd0:	0b9b      	lsrs	r3, r3, #14
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002be2:	0b5b      	lsrs	r3, r3, #13
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf4:	0b1b      	lsrs	r3, r3, #12
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2200      	movs	r2, #0
 8002c06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d163      	bne.n	8002cd8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002c20:	0f92      	lsrs	r2, r2, #30
 8002c22:	431a      	orrs	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2c:	0edb      	lsrs	r3, r3, #27
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3e:	0e1b      	lsrs	r3, r3, #24
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c50:	0d5b      	lsrs	r3, r3, #21
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	0bdb      	lsrs	r3, r3, #15
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	7e1b      	ldrb	r3, [r3, #24]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	3302      	adds	r3, #2
 8002c98:	2201      	movs	r2, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ca2:	fb02 f203 	mul.w	r2, r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	7a1b      	ldrb	r3, [r3, #8]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002cc4:	0a52      	lsrs	r2, r2, #9
 8002cc6:	fb02 f203 	mul.w	r2, r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd4:	661a      	str	r2, [r3, #96]	; 0x60
 8002cd6:	e031      	b.n	8002d3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d11d      	bne.n	8002d1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	029a      	lsls	r2, r3, #10
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	661a      	str	r2, [r3, #96]	; 0x60
 8002d1a:	e00f      	b.n	8002d3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_SD_GetCardCSD+0x344>)
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e09d      	b.n	8002e78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d40:	0b9b      	lsrs	r3, r3, #14
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d52:	09db      	lsrs	r3, r3, #7
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	0fdb      	lsrs	r3, r3, #31
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	0f5b      	lsrs	r3, r3, #29
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	0d9b      	lsrs	r3, r3, #22
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	0d5b      	lsrs	r3, r3, #21
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	0c1b      	lsrs	r3, r3, #16
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	0bdb      	lsrs	r3, r3, #15
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	0b9b      	lsrs	r3, r3, #14
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	0b1b      	lsrs	r3, r3, #12
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	004005ff 	.word	0x004005ff

08002e88 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b08e      	sub	sp, #56	; 0x38
 8002ee4:	af04      	add	r7, sp, #16
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2203      	movs	r2, #3
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d02e      	beq.n	8002f58 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f00:	d106      	bne.n	8002f10 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f0e:	e029      	b.n	8002f64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f16:	d10a      	bne.n	8002f2e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fb0d 	bl	8003538 <SD_WideBus_Enable>
 8002f1e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f2c:	e01a      	b.n	8002f64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb4a 	bl	80035ce <SD_WideBus_Disable>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
 8002f48:	e00c      	b.n	8002f64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
 8002f56:	e005      	b.n	8002f64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e024      	b.n	8002fca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681d      	ldr	r5, [r3, #0]
 8002fa6:	466c      	mov	r4, sp
 8002fa8:	f107 0318 	add.w	r3, r7, #24
 8002fac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f000 fcc2 	bl	8003944 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	004005ff 	.word	0x004005ff

08002fd8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa7c 	bl	80034e8 <SD_SendStatus>
 8002ff0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	0a5b      	lsrs	r3, r3, #9
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800300e:	693b      	ldr	r3, [r7, #16]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	2b82      	cmp	r3, #130	; 0x82
 8003056:	d111      	bne.n	800307c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fdf7 	bl	8003c50 <SDMMC_CmdStopTransfer>
 8003062:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff fd58 	bl	8002b2c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0208 	bic.w	r2, r2, #8
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f240 523a 	movw	r2, #1338	; 0x53a
 8003094:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f001 fa57 	bl	8004558 <HAL_SD_RxCpltCallback>
#endif
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe fa82 	bl	80015cc <HAL_DMA_GetError>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d03e      	beq.n	800314c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d002      	beq.n	80030ea <SD_DMAError+0x36>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d12d      	bne.n	8003146 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a19      	ldr	r2, [pc, #100]	; (8003154 <SD_DMAError+0xa0>)
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff62 	bl	8002fd8 <HAL_SD_GetCardState>
 8003114:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b06      	cmp	r3, #6
 800311a:	d002      	beq.n	8003122 <SD_DMAError+0x6e>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d10a      	bne.n	8003138 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fd92 	bl	8003c50 <SDMMC_CmdStopTransfer>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	431a      	orrs	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff fcf0 	bl	8002b2c <HAL_SD_ErrorCallback>
#endif
  }
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	004005ff 	.word	0x004005ff

08003158 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f240 523a 	movw	r2, #1338	; 0x53a
 800316e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff ff31 	bl	8002fd8 <HAL_SD_GetCardState>
 8003176:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b06      	cmp	r3, #6
 800318a:	d002      	beq.n	8003192 <SD_DMATxAbort+0x3a>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d10a      	bne.n	80031a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd5a 	bl	8003c50 <SDMMC_CmdStopTransfer>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d103      	bne.n	80031b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f001 f9bd 	bl	8004530 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80031b6:	e002      	b.n	80031be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff fcb7 	bl	8002b2c <HAL_SD_ErrorCallback>
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff fefa 	bl	8002fd8 <HAL_SD_GetCardState>
 80031e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d002      	beq.n	8003200 <SD_DMARxAbort+0x3a>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d10a      	bne.n	8003216 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fd23 	bl	8003c50 <SDMMC_CmdStopTransfer>
 800320a:	4602      	mov	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f001 f986 	bl	8004530 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003224:	e002      	b.n	800322c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f7ff fc80 	bl	8002b2c <HAL_SD_ErrorCallback>
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b094      	sub	sp, #80	; 0x50
 8003238:	af04      	add	r7, sp, #16
 800323a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800323c:	2301      	movs	r3, #1
 800323e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fbd5 	bl	80039f4 <SDIO_GetPowerState>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003250:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003254:	e0b6      	b.n	80033c4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	2b03      	cmp	r3, #3
 800325c:	d02f      	beq.n	80032be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fdfe 	bl	8003e64 <SDMMC_CmdSendCID>
 8003268:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <SD_InitCard+0x40>
    {
      return errorstate;
 8003270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003272:	e0a7      	b.n	80033c4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fbff 	bl	8003a7e <SDIO_GetResponse>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2104      	movs	r1, #4
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fbf6 	bl	8003a7e <SDIO_GetResponse>
 8003292:	4602      	mov	r2, r0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2108      	movs	r1, #8
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fbed 	bl	8003a7e <SDIO_GetResponse>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	210c      	movs	r1, #12
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fbe4 	bl	8003a7e <SDIO_GetResponse>
 80032b6:	4602      	mov	r2, r0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d00d      	beq.n	80032e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f107 020e 	add.w	r2, r7, #14
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fe04 	bl	8003ede <SDMMC_CmdSetRelAdd>
 80032d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	e070      	b.n	80033c4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d036      	beq.n	8003358 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 fdce 	bl	8003ea0 <SDMMC_CmdSendCSD>
 8003304:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <SD_InitCard+0xdc>
    {
      return errorstate;
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	e059      	b.n	80033c4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fbb1 	bl	8003a7e <SDIO_GetResponse>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2104      	movs	r1, #4
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fba8 	bl	8003a7e <SDIO_GetResponse>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2108      	movs	r1, #8
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fb9f 	bl	8003a7e <SDIO_GetResponse>
 8003340:	4602      	mov	r2, r0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	210c      	movs	r1, #12
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fb96 	bl	8003a7e <SDIO_GetResponse>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2104      	movs	r1, #4
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fb8d 	bl	8003a7e <SDIO_GetResponse>
 8003364:	4603      	mov	r3, r0
 8003366:	0d1a      	lsrs	r2, r3, #20
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800336c:	f107 0310 	add.w	r3, r7, #16
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff fbe4 	bl	8002b40 <HAL_SD_GetCardCSD>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800337e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003382:	e01f      	b.n	80033c4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	461a      	mov	r2, r3
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	4608      	mov	r0, r1
 8003396:	f000 fc7d 	bl	8003c94 <SDMMC_CmdSelDesel>
 800339a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <SD_InitCard+0x172>
  {
    return errorstate;
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	e00e      	b.n	80033c4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681d      	ldr	r5, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	466c      	mov	r4, sp
 80033ae:	f103 0210 	add.w	r2, r3, #16
 80033b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033b8:	3304      	adds	r3, #4
 80033ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033bc:	4628      	mov	r0, r5
 80033be:	f000 fac1 	bl	8003944 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3740      	adds	r7, #64	; 0x40
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bdb0      	pop	{r4, r5, r7, pc}

080033cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fc78 	bl	8003cda <SDMMC_CmdGoIdleState>
 80033ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	e072      	b.n	80034dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fc8b 	bl	8003d16 <SDMMC_CmdOperCond>
 8003400:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fc61 	bl	8003cda <SDMMC_CmdGoIdleState>
 8003418:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	e05b      	b.n	80034dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	2b01      	cmp	r3, #1
 8003430:	d137      	bne.n	80034a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fc8b 	bl	8003d54 <SDMMC_CmdAppCommand>
 800343e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d02d      	beq.n	80034a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800344a:	e047      	b.n	80034dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fc7e 	bl	8003d54 <SDMMC_CmdAppCommand>
 8003458:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <SD_PowerON+0x98>
    {
      return errorstate;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	e03b      	b.n	80034dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	491e      	ldr	r1, [pc, #120]	; (80034e4 <SD_PowerON+0x118>)
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fc94 	bl	8003d98 <SDMMC_CmdAppOperCommand>
 8003470:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800347c:	e02e      	b.n	80034dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fafa 	bl	8003a7e <SDIO_GetResponse>
 800348a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	0fdb      	lsrs	r3, r3, #31
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <SD_PowerON+0xcc>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <SD_PowerON+0xce>
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]

    count++;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	3301      	adds	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d802      	bhi.n	80034b2 <SD_PowerON+0xe6>
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0cc      	beq.n	800344c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d902      	bls.n	80034c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80034bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c0:	e00c      	b.n	80034dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
 80034d2:	e002      	b.n	80034da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	c1100000 	.word	0xc1100000

080034e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80034f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034fc:	e018      	b.n	8003530 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 fd08 	bl	8003f20 <SDMMC_CmdSendStatus>
 8003510:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	e009      	b.n	8003530 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f000 faab 	bl	8003a7e <SDIO_GetResponse>
 8003528:	4602      	mov	r2, r0
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fa95 	bl	8003a7e <SDIO_GetResponse>
 8003554:	4603      	mov	r3, r0
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800355e:	d102      	bne.n	8003566 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003564:	e02f      	b.n	80035c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f879 	bl	8003664 <SD_FindSCR>
 8003572:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	e023      	b.n	80035c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 fbdd 	bl	8003d54 <SDMMC_CmdAppCommand>
 800359a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	e00f      	b.n	80035c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fc16 	bl	8003dde <SDMMC_CmdBusWidth>
 80035b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	e003      	b.n	80035c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80035be:	2300      	movs	r3, #0
 80035c0:	e001      	b.n	80035c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80035c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2100      	movs	r1, #0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fa4a 	bl	8003a7e <SDIO_GetResponse>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f4:	d102      	bne.n	80035fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80035f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035fa:	e02f      	b.n	800365c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f82e 	bl	8003664 <SD_FindSCR>
 8003608:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	e023      	b.n	800365c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01c      	beq.n	8003658 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f000 fb92 	bl	8003d54 <SDMMC_CmdAppCommand>
 8003630:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	e00f      	b.n	800365c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fbcb 	bl	8003dde <SDMMC_CmdBusWidth>
 8003648:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	e003      	b.n	800365c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003654:	2300      	movs	r3, #0
 8003656:	e001      	b.n	800365c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003658:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b08f      	sub	sp, #60	; 0x3c
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800366e:	f7fd fbb9 	bl	8000de4 <HAL_GetTick>
 8003672:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2108      	movs	r1, #8
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa36 	bl	8003afc <SDMMC_CmdBlockLength>
 8003690:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	e0a9      	b.n	80037f0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f000 fb53 	bl	8003d54 <SDMMC_CmdAppCommand>
 80036ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <SD_FindSCR+0x56>
  {
    return errorstate;
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	e09a      	b.n	80037f0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80036c0:	2308      	movs	r3, #8
 80036c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80036c4:	2330      	movs	r3, #48	; 0x30
 80036c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80036c8:	2302      	movs	r3, #2
 80036ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f107 0210 	add.w	r2, r7, #16
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f9e0 	bl	8003aa4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fb9a 	bl	8003e22 <SDMMC_CmdSendSCR>
 80036ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d022      	beq.n	800373c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	e07a      	b.n	80037f0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f107 0208 	add.w	r2, r7, #8
 8003714:	18d4      	adds	r4, r2, r3
 8003716:	4608      	mov	r0, r1
 8003718:	f000 f93f 	bl	800399a <SDIO_ReadFIFO>
 800371c:	4603      	mov	r3, r0
 800371e:	6023      	str	r3, [r4, #0]
      index++;
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	3301      	adds	r3, #1
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003726:	f7fd fb5d 	bl	8000de4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d102      	bne.n	800373c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003736:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800373a:	e059      	b.n	80037f0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003742:	f240 432a 	movw	r3, #1066	; 0x42a
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0d6      	beq.n	80036fa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2208      	movs	r2, #8
 8003760:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003762:	2308      	movs	r3, #8
 8003764:	e044      	b.n	80037f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2202      	movs	r2, #2
 800377a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800377c:	2302      	movs	r3, #2
 800377e:	e037      	b.n	80037f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2220      	movs	r2, #32
 8003794:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003796:	2320      	movs	r3, #32
 8003798:	e02a      	b.n	80037f0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f240 523a 	movw	r2, #1338	; 0x53a
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	061a      	lsls	r2, r3, #24
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80037ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	0e1b      	lsrs	r3, r3, #24
 80037c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	601a      	str	r2, [r3, #0]
    scr++;
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	3304      	adds	r3, #4
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	061a      	lsls	r2, r3, #24
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	0e1b      	lsrs	r3, r3, #24
 80037e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	373c      	adds	r7, #60	; 0x3c
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}

080037f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03f      	beq.n	8003892 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e033      	b.n	8003880 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f8bc 	bl	800399a <SDIO_ReadFIFO>
 8003822:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3301      	adds	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3b01      	subs	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3b01      	subs	r3, #1
 800384c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3301      	adds	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3b01      	subs	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	0e1b      	lsrs	r3, r3, #24
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3301      	adds	r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	3b01      	subs	r3, #1
 8003878:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b07      	cmp	r3, #7
 8003884:	d9c8      	bls.n	8003818 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d043      	beq.n	800393c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e037      	b.n	800392a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	021a      	lsls	r2, r3, #8
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	041a      	lsls	r2, r3, #16
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	061a      	lsls	r2, r3, #24
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4313      	orrs	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3b01      	subs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f107 0208 	add.w	r2, r7, #8
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f848 	bl	80039b4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3301      	adds	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b07      	cmp	r3, #7
 800392e:	d9c4      	bls.n	80038ba <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003944:	b084      	sub	sp, #16
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	f107 001c 	add.w	r0, r7, #28
 8003952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800395a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800395c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800395e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003962:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003966:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800396a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800396e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800397e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	b004      	add	sp, #16
 8003998:	4770      	bx	lr

0800399a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2203      	movs	r2, #3
 80039e2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80039e4:	2002      	movs	r0, #2
 80039e6:	f7fd fa09 	bl	8000dfc <HAL_Delay>
  
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0303 	and.w	r3, r3, #3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003a34:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003a3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a4a:	f023 030f 	bic.w	r3, r3, #15
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	b2db      	uxtb	r3, r3
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	4413      	add	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
}  
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003aca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003ad0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003ad6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0

}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b0e:	2340      	movs	r3, #64	; 0x40
 8003b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b1c:	f107 0308 	add.w	r3, r7, #8
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ff74 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	2110      	movs	r1, #16
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa40 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003b34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b36:	69fb      	ldr	r3, [r7, #28]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003b4e:	2311      	movs	r3, #17
 8003b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b52:	2340      	movs	r3, #64	; 0x40
 8003b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ff52 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	2111      	movs	r1, #17
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa1e 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003b92:	2312      	movs	r3, #18
 8003b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b96:	2340      	movs	r3, #64	; 0x40
 8003b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ba4:	f107 0308 	add.w	r3, r7, #8
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ff30 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	2112      	movs	r1, #18
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9fc 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003bd6:	2318      	movs	r3, #24
 8003bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bda:	2340      	movs	r3, #64	; 0x40
 8003bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003be8:	f107 0308 	add.w	r3, r7, #8
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff0e 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	2118      	movs	r1, #24
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f9da 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c02:	69fb      	ldr	r3, [r7, #28]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003c1a:	2319      	movs	r3, #25
 8003c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c2c:	f107 0308 	add.w	r3, r7, #8
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff feec 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	2119      	movs	r1, #25
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9b8 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c46:	69fb      	ldr	r3, [r7, #28]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c60:	2340      	movs	r3, #64	; 0x40
 8003c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fecb 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <SDMMC_CmdStopTransfer+0x40>)
 8003c7c:	210c      	movs	r1, #12
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f998 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c86:	69fb      	ldr	r3, [r7, #28]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	05f5e100 	.word	0x05f5e100

08003c94 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003ca4:	2307      	movs	r3, #7
 8003ca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cb6:	f107 0310 	add.w	r3, r7, #16
 8003cba:	4619      	mov	r1, r3
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff fea7 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	2107      	movs	r1, #7
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f973 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3728      	adds	r7, #40	; 0x28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b088      	sub	sp, #32
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cf8:	f107 0308 	add.w	r3, r7, #8
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fe86 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f92d 	bl	8003f64 <SDMMC_GetCmdError>
 8003d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b088      	sub	sp, #32
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003d1e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003d24:	2308      	movs	r3, #8
 8003d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d28:	2340      	movs	r3, #64	; 0x40
 8003d2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fe67 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fb16 	bl	8004374 <SDMMC_GetCmdResp7>
 8003d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003d62:	2337      	movs	r3, #55	; 0x37
 8003d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d66:	2340      	movs	r3, #64	; 0x40
 8003d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fe48 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	2137      	movs	r1, #55	; 0x37
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f914 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003dae:	2329      	movs	r3, #41	; 0x29
 8003db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003db2:	2340      	movs	r3, #64	; 0x40
 8003db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dc0:	f107 0308 	add.w	r3, r7, #8
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fe22 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa23 	bl	8004218 <SDMMC_GetCmdResp3>
 8003dd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b088      	sub	sp, #32
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003dec:	2306      	movs	r3, #6
 8003dee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003df0:	2340      	movs	r3, #64	; 0x40
 8003df2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fe03 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	2106      	movs	r1, #6
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8cf 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003e16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e18:	69fb      	ldr	r3, [r7, #28]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b088      	sub	sp, #32
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003e2e:	2333      	movs	r3, #51	; 0x33
 8003e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fde2 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	2133      	movs	r1, #51	; 0x33
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8ae 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003e70:	2302      	movs	r3, #2
 8003e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003e74:	23c0      	movs	r3, #192	; 0xc0
 8003e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e82:	f107 0308 	add.w	r3, r7, #8
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fdc1 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f97c 	bl	800418c <SDMMC_GetCmdResp2>
 8003e94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e96:	69fb      	ldr	r3, [r7, #28]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003eae:	2309      	movs	r3, #9
 8003eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003eb2:	23c0      	movs	r3, #192	; 0xc0
 8003eb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ebe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fda2 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f95d 	bl	800418c <SDMMC_GetCmdResp2>
 8003ed2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b088      	sub	sp, #32
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003eec:	2303      	movs	r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ef0:	2340      	movs	r3, #64	; 0x40
 8003ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003efc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003efe:	f107 0308 	add.w	r3, r7, #8
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fd83 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f9bc 	bl	800428c <SDMMC_GetCmdResp6>
 8003f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f16:	69fb      	ldr	r3, [r7, #28]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003f2e:	230d      	movs	r3, #13
 8003f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f40:	f107 0308 	add.w	r3, r7, #8
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fd62 	bl	8003a10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	210d      	movs	r1, #13
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f82e 	bl	8003fb4 <SDMMC_GetCmdResp1>
 8003f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003f64:	b490      	push	{r4, r7}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <SDMMC_GetCmdError+0x48>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0f      	ldr	r2, [pc, #60]	; (8003fb0 <SDMMC_GetCmdError+0x4c>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0a5b      	lsrs	r3, r3, #9
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003f80:	4623      	mov	r3, r4
 8003f82:	1e5c      	subs	r4, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f8c:	e009      	b.n	8003fa2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f2      	beq.n	8003f80 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	22c5      	movs	r2, #197	; 0xc5
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc90      	pop	{r4, r7}
 8003faa:	4770      	bx	lr
 8003fac:	2000001c 	.word	0x2000001c
 8003fb0:	10624dd3 	.word	0x10624dd3

08003fb4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <SDMMC_GetCmdResp1+0x1cc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6f      	ldr	r2, [pc, #444]	; (8004184 <SDMMC_GetCmdResp1+0x1d0>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	0a5b      	lsrs	r3, r3, #9
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	1e5c      	subs	r4, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003fdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fe0:	e0c9      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <SDMMC_GetCmdResp1+0x20>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1eb      	bne.n	8003fd4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2204      	movs	r2, #4
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800400e:	2304      	movs	r3, #4
 8004010:	e0b1      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004024:	2301      	movs	r3, #1
 8004026:	e0a6      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	22c5      	movs	r2, #197	; 0xc5
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff fd18 	bl	8003a64 <SDIO_GetCommandResponse>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	7afb      	ldrb	r3, [r7, #11]
 800403a:	4293      	cmp	r3, r2
 800403c:	d001      	beq.n	8004042 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800403e:	2301      	movs	r3, #1
 8004040:	e099      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004042:	2100      	movs	r1, #0
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff fd1a 	bl	8003a7e <SDIO_GetResponse>
 800404a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <SDMMC_GetCmdResp1+0x1d4>)
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004056:	2300      	movs	r3, #0
 8004058:	e08d      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	da02      	bge.n	8004066 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004064:	e087      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004070:	2340      	movs	r3, #64	; 0x40
 8004072:	e080      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	e079      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800408c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004090:	e071      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800409c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a0:	e069      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80040ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b0:	e061      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80040bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040c0:	e059      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80040cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d0:	e051      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80040dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040e0:	e049      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80040ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040f0:	e041      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80040fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004100:	e039      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800410c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004110:	e031      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800411c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004120:	e029      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800412c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004130:	e021      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800413c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004140:	e019      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800414c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004150:	e011      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800415c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004160:	e009      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800416c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004170:	e001      	b.n	8004176 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd90      	pop	{r4, r7, pc}
 800417e:	bf00      	nop
 8004180:	2000001c 	.word	0x2000001c
 8004184:	10624dd3 	.word	0x10624dd3
 8004188:	fdffe008 	.word	0xfdffe008

0800418c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800418c:	b490      	push	{r4, r7}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <SDMMC_GetCmdResp2+0x84>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <SDMMC_GetCmdResp2+0x88>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0a5b      	lsrs	r3, r3, #9
 80041a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80041a8:	4623      	mov	r3, r4
 80041aa:	1e5c      	subs	r4, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041b4:	e026      	b.n	8004204 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <SDMMC_GetCmdResp2+0x1c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1eb      	bne.n	80041a8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041e2:	2304      	movs	r3, #4
 80041e4:	e00e      	b.n	8004204 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e003      	b.n	8004204 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	22c5      	movs	r2, #197	; 0xc5
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bc90      	pop	{r4, r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	2000001c 	.word	0x2000001c
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004218:	b490      	push	{r4, r7}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004220:	4b18      	ldr	r3, [pc, #96]	; (8004284 <SDMMC_GetCmdResp3+0x6c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a18      	ldr	r2, [pc, #96]	; (8004288 <SDMMC_GetCmdResp3+0x70>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0a5b      	lsrs	r3, r3, #9
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004234:	4623      	mov	r3, r4
 8004236:	1e5c      	subs	r4, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800423c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004240:	e01b      	b.n	800427a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <SDMMC_GetCmdResp3+0x1c>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1eb      	bne.n	8004234 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800426e:	2304      	movs	r3, #4
 8004270:	e003      	b.n	800427a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	22c5      	movs	r2, #197	; 0xc5
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bc90      	pop	{r4, r7}
 8004282:	4770      	bx	lr
 8004284:	2000001c 	.word	0x2000001c
 8004288:	10624dd3 	.word	0x10624dd3

0800428c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	460b      	mov	r3, r1
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800429a:	4b34      	ldr	r3, [pc, #208]	; (800436c <SDMMC_GetCmdResp6+0xe0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a34      	ldr	r2, [pc, #208]	; (8004370 <SDMMC_GetCmdResp6+0xe4>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	0a5b      	lsrs	r3, r3, #9
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80042ae:	4623      	mov	r3, r4
 80042b0:	1e5c      	subs	r4, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042ba:	e052      	b.n	8004362 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <SDMMC_GetCmdResp6+0x22>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1eb      	bne.n	80042ae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2204      	movs	r2, #4
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042e8:	2304      	movs	r3, #4
 80042ea:	e03a      	b.n	8004362 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042fe:	2301      	movs	r3, #1
 8004300:	e02f      	b.n	8004362 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fbae 	bl	8003a64 <SDIO_GetCommandResponse>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	4293      	cmp	r3, r2
 8004310:	d001      	beq.n	8004316 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004312:	2301      	movs	r3, #1
 8004314:	e025      	b.n	8004362 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	22c5      	movs	r2, #197	; 0xc5
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800431c:	2100      	movs	r1, #0
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff fbad 	bl	8003a7e <SDIO_GetResponse>
 8004324:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800433a:	2300      	movs	r3, #0
 800433c:	e011      	b.n	8004362 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434c:	e009      	b.n	8004362 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800435c:	e001      	b.n	8004362 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800435e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	bf00      	nop
 800436c:	2000001c 	.word	0x2000001c
 8004370:	10624dd3 	.word	0x10624dd3

08004374 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004374:	b490      	push	{r4, r7}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <SDMMC_GetCmdResp7+0x90>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <SDMMC_GetCmdResp7+0x94>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0a5b      	lsrs	r3, r3, #9
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004390:	4623      	mov	r3, r4
 8004392:	1e5c      	subs	r4, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800439c:	e02c      	b.n	80043f8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <SDMMC_GetCmdResp7+0x1c>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1eb      	bne.n	8004390 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2204      	movs	r2, #4
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043ca:	2304      	movs	r3, #4
 80043cc:	e014      	b.n	80043f8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e009      	b.n	80043f8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2240      	movs	r2, #64	; 0x40
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80043f6:	2300      	movs	r3, #0
  
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc90      	pop	{r4, r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000001c 	.word	0x2000001c
 8004408:	10624dd3 	.word	0x10624dd3

0800440c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004410:	4904      	ldr	r1, [pc, #16]	; (8004424 <MX_FATFS_Init+0x18>)
 8004412:	4805      	ldr	r0, [pc, #20]	; (8004428 <MX_FATFS_Init+0x1c>)
 8004414:	f003 fa18 	bl	8007848 <FATFS_LinkDriver>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <MX_FATFS_Init+0x20>)
 800441e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200004ac 	.word	0x200004ac
 8004428:	08008aec 	.word	0x08008aec
 800442c:	200004a8 	.word	0x200004a8

08004430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800444a:	f000 f896 	bl	800457a <BSP_SD_IsDetected>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e012      	b.n	800447e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <BSP_SD_Init+0x48>)
 800445a:	f7fd ff77 	bl	800234c <HAL_SD_Init>
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800446c:	4806      	ldr	r0, [pc, #24]	; (8004488 <BSP_SD_Init+0x48>)
 800446e:	f7fe fd37 	bl	8002ee0 <HAL_SD_ConfigWideBusOperation>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800447c:	79fb      	ldrb	r3, [r7, #7]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2000041c 	.word	0x2000041c

0800448c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	68f9      	ldr	r1, [r7, #12]
 80044a2:	4806      	ldr	r0, [pc, #24]	; (80044bc <BSP_SD_ReadBlocks_DMA+0x30>)
 80044a4:	f7fd ffe2 	bl	800246c <HAL_SD_ReadBlocks_DMA>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	2000041c 	.word	0x2000041c

080044c0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	4806      	ldr	r0, [pc, #24]	; (80044f0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80044d8:	f7fe f8b2 	bl	8002640 <HAL_SD_WriteBlocks_DMA>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	2000041c 	.word	0x2000041c

080044f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80044f8:	4805      	ldr	r0, [pc, #20]	; (8004510 <BSP_SD_GetCardState+0x1c>)
 80044fa:	f7fe fd6d 	bl	8002fd8 <HAL_SD_GetCardState>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b04      	cmp	r3, #4
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
}
 800450a:	4618      	mov	r0, r3
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	2000041c 	.word	0x2000041c

08004514 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4803      	ldr	r0, [pc, #12]	; (800452c <BSP_SD_GetCardInfo+0x18>)
 8004520:	f7fe fcb2 	bl	8002e88 <HAL_SD_GetCardInfo>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	2000041c 	.word	0x2000041c

08004530 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004538:	f000 f818 	bl	800456c <BSP_SD_AbortCallback>
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800454c:	f000 f98c 	bl	8004868 <BSP_SD_WriteCpltCallback>
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004560:	f000 f98e 	bl	8004880 <BSP_SD_ReadCpltCallback>
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0

}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004580:	2301      	movs	r3, #1
 8004582:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	b2db      	uxtb	r3, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800459c:	f7fc fc22 	bl	8000de4 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80045a2:	e006      	b.n	80045b2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80045a4:	f7ff ffa6 	bl	80044f4 <BSP_SD_GetCardState>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e009      	b.n	80045c6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80045b2:	f7fc fc17 	bl	8000de4 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d8f0      	bhi.n	80045a4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <SD_CheckStatus+0x38>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80045e0:	f7ff ff88 	bl	80044f4 <BSP_SD_GetCardState>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d107      	bne.n	80045fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <SD_CheckStatus+0x38>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <SD_CheckStatus+0x38>)
 80045f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80045fa:	4b03      	ldr	r3, [pc, #12]	; (8004608 <SD_CheckStatus+0x38>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000025 	.word	0x20000025

0800460c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004616:	f7ff ff13 	bl	8004440 <BSP_SD_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff ffd4 	bl	80045d0 <SD_CheckStatus>
 8004628:	4603      	mov	r3, r0
 800462a:	461a      	mov	r2, r3
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <SD_initialize+0x34>)
 800462e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <SD_initialize+0x34>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000025 	.word	0x20000025

08004644 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ffbd 	bl	80045d0 <SD_CheckStatus>
 8004656:	4603      	mov	r3, r0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004674:	f247 5030 	movw	r0, #30000	; 0x7530
 8004678:	f7ff ff8c 	bl	8004594 <SD_CheckStatusWithTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	da01      	bge.n	8004686 <SD_read+0x26>
  {
    return res;
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	e03b      	b.n	80046fe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	68b8      	ldr	r0, [r7, #8]
 800468c:	f7ff fefe 	bl	800448c <BSP_SD_ReadBlocks_DMA>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d132      	bne.n	80046fc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <SD_read+0xa8>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800469c:	f7fc fba2 	bl	8000de4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80046a2:	bf00      	nop
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <SD_read+0xa8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <SD_read+0x5e>
 80046ac:	f7fc fb9a 	bl	8000de4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f247 522f 	movw	r2, #29999	; 0x752f
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d9f2      	bls.n	80046a4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <SD_read+0xa8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
 80046ca:	e017      	b.n	80046fc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <SD_read+0xa8>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80046d2:	f7fc fb87 	bl	8000de4 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80046d8:	e007      	b.n	80046ea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80046da:	f7ff ff0b 	bl	80044f4 <BSP_SD_GetCardState>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <SD_read+0x8a>
          {
            res = RES_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80046e8:	e008      	b.n	80046fc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80046ea:	f7fc fb7b 	bl	8000de4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d9ee      	bls.n	80046da <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200000b0 	.word	0x200000b0

0800470c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <SD_write+0xa8>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004726:	f247 5030 	movw	r0, #30000	; 0x7530
 800472a:	f7ff ff33 	bl	8004594 <SD_CheckStatusWithTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	da01      	bge.n	8004738 <SD_write+0x2c>
  {
    return res;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	e038      	b.n	80047aa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	68b8      	ldr	r0, [r7, #8]
 800473e:	f7ff febf 	bl	80044c0 <BSP_SD_WriteBlocks_DMA>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d12f      	bne.n	80047a8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004748:	f7fc fb4c 	bl	8000de4 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800474e:	bf00      	nop
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <SD_write+0xa8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d108      	bne.n	800476a <SD_write+0x5e>
 8004758:	f7fc fb44 	bl	8000de4 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f247 522f 	movw	r2, #29999	; 0x752f
 8004766:	4293      	cmp	r3, r2
 8004768:	d9f2      	bls.n	8004750 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <SD_write+0xa8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
 8004776:	e017      	b.n	80047a8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <SD_write+0xa8>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800477e:	f7fc fb31 	bl	8000de4 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004784:	e007      	b.n	8004796 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004786:	f7ff feb5 	bl	80044f4 <BSP_SD_GetCardState>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <SD_write+0x8a>
          {
            res = RES_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]
            break;
 8004794:	e008      	b.n	80047a8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004796:	f7fc fb25 	bl	8000de4 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d9ee      	bls.n	8004786 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200000ac 	.word	0x200000ac

080047b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	; 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	603a      	str	r2, [r7, #0]
 80047c2:	71fb      	strb	r3, [r7, #7]
 80047c4:	460b      	mov	r3, r1
 80047c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047ce:	4b25      	ldr	r3, [pc, #148]	; (8004864 <SD_ioctl+0xac>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <SD_ioctl+0x28>
 80047dc:	2303      	movs	r3, #3
 80047de:	e03c      	b.n	800485a <SD_ioctl+0xa2>

  switch (cmd)
 80047e0:	79bb      	ldrb	r3, [r7, #6]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d834      	bhi.n	8004850 <SD_ioctl+0x98>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <SD_ioctl+0x34>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	08004805 	.word	0x08004805
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	08004837 	.word	0x08004837
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004802:	e028      	b.n	8004856 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fe83 	bl	8004514 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800481a:	e01c      	b.n	8004856 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800481c:	f107 030c 	add.w	r3, r7, #12
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fe77 	bl	8004514 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	b29a      	uxth	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004834:	e00f      	b.n	8004856 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004836:	f107 030c 	add.w	r3, r7, #12
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fe6a 	bl	8004514 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	0a5a      	lsrs	r2, r3, #9
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800484e:	e002      	b.n	8004856 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004850:	2304      	movs	r3, #4
 8004852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800485a:	4618      	mov	r0, r3
 800485c:	3730      	adds	r7, #48	; 0x30
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000025 	.word	0x20000025

08004868 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800486c:	4b03      	ldr	r3, [pc, #12]	; (800487c <BSP_SD_WriteCpltCallback+0x14>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	200000ac 	.word	0x200000ac

08004880 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <BSP_SD_ReadCpltCallback+0x14>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	200000b0 	.word	0x200000b0

08004898 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <disk_status+0x30>)
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	79fa      	ldrb	r2, [r7, #7]
 80048b0:	4905      	ldr	r1, [pc, #20]	; (80048c8 <disk_status+0x30>)
 80048b2:	440a      	add	r2, r1
 80048b4:	7a12      	ldrb	r2, [r2, #8]
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	200002dc 	.word	0x200002dc

080048cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <disk_initialize+0x48>)
 80048de:	5cd3      	ldrb	r3, [r2, r3]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d111      	bne.n	8004908 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <disk_initialize+0x48>)
 80048e8:	2101      	movs	r1, #1
 80048ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	4a09      	ldr	r2, [pc, #36]	; (8004914 <disk_initialize+0x48>)
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	79fa      	ldrb	r2, [r7, #7]
 80048fa:	4906      	ldr	r1, [pc, #24]	; (8004914 <disk_initialize+0x48>)
 80048fc:	440a      	add	r2, r1
 80048fe:	7a12      	ldrb	r2, [r2, #8]
 8004900:	4610      	mov	r0, r2
 8004902:	4798      	blx	r3
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200002dc 	.word	0x200002dc

08004918 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <disk_read+0x3c>)
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	689c      	ldr	r4, [r3, #8]
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	4a07      	ldr	r2, [pc, #28]	; (8004954 <disk_read+0x3c>)
 8004938:	4413      	add	r3, r2
 800493a:	7a18      	ldrb	r0, [r3, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	47a0      	blx	r4
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]
  return res;
 8004948:	7dfb      	ldrb	r3, [r7, #23]
}
 800494a:	4618      	mov	r0, r3
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	bd90      	pop	{r4, r7, pc}
 8004952:	bf00      	nop
 8004954:	200002dc 	.word	0x200002dc

08004958 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	4603      	mov	r3, r0
 8004966:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <disk_write+0x3c>)
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68dc      	ldr	r4, [r3, #12]
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <disk_write+0x3c>)
 8004978:	4413      	add	r3, r2
 800497a:	7a18      	ldrb	r0, [r3, #8]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	47a0      	blx	r4
 8004984:	4603      	mov	r3, r0
 8004986:	75fb      	strb	r3, [r7, #23]
  return res;
 8004988:	7dfb      	ldrb	r3, [r7, #23]
}
 800498a:	4618      	mov	r0, r3
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd90      	pop	{r4, r7, pc}
 8004992:	bf00      	nop
 8004994:	200002dc 	.word	0x200002dc

08004998 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	603a      	str	r2, [r7, #0]
 80049a2:	71fb      	strb	r3, [r7, #7]
 80049a4:	460b      	mov	r3, r1
 80049a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <disk_ioctl+0x38>)
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	79fa      	ldrb	r2, [r7, #7]
 80049b6:	4906      	ldr	r1, [pc, #24]	; (80049d0 <disk_ioctl+0x38>)
 80049b8:	440a      	add	r2, r1
 80049ba:	7a10      	ldrb	r0, [r2, #8]
 80049bc:	79b9      	ldrb	r1, [r7, #6]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4798      	blx	r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200002dc 	.word	0x200002dc

080049d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3301      	adds	r3, #1
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	b21a      	sxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b21b      	sxth	r3, r3
 80049f0:	4313      	orrs	r3, r2
 80049f2:	b21b      	sxth	r3, r3
 80049f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80049f6:	89fb      	ldrh	r3, [r7, #14]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3303      	adds	r3, #3
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	3202      	adds	r2, #2
 8004a1c:	7812      	ldrb	r2, [r2, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	3201      	adds	r2, #1
 8004a2a:	7812      	ldrb	r2, [r2, #0]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	887a      	ldrh	r2, [r7, #2]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	887b      	ldrh	r3, [r7, #2]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	1c53      	adds	r3, r2, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	6179      	str	r1, [r7, #20]
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f1      	bne.n	8004af2 <mem_cpy+0x1a>
	}
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	617a      	str	r2, [r7, #20]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f3      	bne.n	8004b2a <mem_set+0x10>
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	61fa      	str	r2, [r7, #28]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	61ba      	str	r2, [r7, #24]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	1acb      	subs	r3, r1, r3
 8004b7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <mem_cmp+0x40>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0eb      	beq.n	8004b68 <mem_cmp+0x18>

	return r;
 8004b90:	697b      	ldr	r3, [r7, #20]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3724      	adds	r7, #36	; 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ba8:	e002      	b.n	8004bb0 <chk_chr+0x12>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3301      	adds	r3, #1
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <chk_chr+0x26>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d1f2      	bne.n	8004baa <chk_chr+0xc>
	return *str;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e029      	b.n	8004c3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004be8:	4a27      	ldr	r2, [pc, #156]	; (8004c88 <chk_lock+0xb4>)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	4413      	add	r3, r2
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01d      	beq.n	8004c32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004bf6:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <chk_lock+0xb4>)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	4413      	add	r3, r2
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d116      	bne.n	8004c36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004c08:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <chk_lock+0xb4>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	4413      	add	r3, r2
 8004c10:	3304      	adds	r3, #4
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d10c      	bne.n	8004c36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <chk_lock+0xb4>)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	4413      	add	r3, r2
 8004c24:	3308      	adds	r3, #8
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d102      	bne.n	8004c36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c30:	e007      	b.n	8004c42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d9d2      	bls.n	8004be8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d109      	bne.n	8004c5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <chk_lock+0x80>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d101      	bne.n	8004c58 <chk_lock+0x84>
 8004c54:	2300      	movs	r3, #0
 8004c56:	e010      	b.n	8004c7a <chk_lock+0xa6>
 8004c58:	2312      	movs	r3, #18
 8004c5a:	e00e      	b.n	8004c7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <chk_lock+0xa0>
 8004c62:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <chk_lock+0xb4>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	4413      	add	r3, r2
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c72:	d101      	bne.n	8004c78 <chk_lock+0xa4>
 8004c74:	2310      	movs	r3, #16
 8004c76:	e000      	b.n	8004c7a <chk_lock+0xa6>
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	200000bc 	.word	0x200000bc

08004c8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	e002      	b.n	8004c9e <enq_lock+0x12>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d806      	bhi.n	8004cb2 <enq_lock+0x26>
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <enq_lock+0x40>)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	4413      	add	r3, r2
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f2      	bne.n	8004c98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	200000bc 	.word	0x200000bc

08004cd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e01f      	b.n	8004d20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004ce0:	4a41      	ldr	r2, [pc, #260]	; (8004de8 <inc_lock+0x118>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	4413      	add	r3, r2
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d113      	bne.n	8004d1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004cf2:	4a3d      	ldr	r2, [pc, #244]	; (8004de8 <inc_lock+0x118>)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d109      	bne.n	8004d1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004d06:	4a38      	ldr	r2, [pc, #224]	; (8004de8 <inc_lock+0x118>)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3308      	adds	r3, #8
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d006      	beq.n	8004d28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d9dc      	bls.n	8004ce0 <inc_lock+0x10>
 8004d26:	e000      	b.n	8004d2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004d28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d132      	bne.n	8004d96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e002      	b.n	8004d3c <inc_lock+0x6c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d806      	bhi.n	8004d50 <inc_lock+0x80>
 8004d42:	4a29      	ldr	r2, [pc, #164]	; (8004de8 <inc_lock+0x118>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4413      	add	r3, r2
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f2      	bne.n	8004d36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d101      	bne.n	8004d5a <inc_lock+0x8a>
 8004d56:	2300      	movs	r3, #0
 8004d58:	e040      	b.n	8004ddc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4922      	ldr	r1, [pc, #136]	; (8004de8 <inc_lock+0x118>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	440b      	add	r3, r1
 8004d66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	491e      	ldr	r1, [pc, #120]	; (8004de8 <inc_lock+0x118>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	440b      	add	r3, r1
 8004d74:	3304      	adds	r3, #4
 8004d76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	491a      	ldr	r1, [pc, #104]	; (8004de8 <inc_lock+0x118>)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	440b      	add	r3, r1
 8004d84:	3308      	adds	r3, #8
 8004d86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004d88:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <inc_lock+0x118>)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	4413      	add	r3, r2
 8004d90:	330c      	adds	r3, #12
 8004d92:	2200      	movs	r2, #0
 8004d94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <inc_lock+0xe0>
 8004d9c:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <inc_lock+0x118>)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	4413      	add	r3, r2
 8004da4:	330c      	adds	r3, #12
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <inc_lock+0xe0>
 8004dac:	2300      	movs	r3, #0
 8004dae:	e015      	b.n	8004ddc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d108      	bne.n	8004dc8 <inc_lock+0xf8>
 8004db6:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <inc_lock+0x118>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	4413      	add	r3, r2
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	e001      	b.n	8004dcc <inc_lock+0xfc>
 8004dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dcc:	4906      	ldr	r1, [pc, #24]	; (8004de8 <inc_lock+0x118>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	440b      	add	r3, r1
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	200000bc 	.word	0x200000bc

08004dec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d825      	bhi.n	8004e4c <dec_lock+0x60>
		n = Files[i].ctr;
 8004e00:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <dec_lock+0x74>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	4413      	add	r3, r2
 8004e08:	330c      	adds	r3, #12
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e14:	d101      	bne.n	8004e1a <dec_lock+0x2e>
 8004e16:	2300      	movs	r3, #0
 8004e18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004e1a:	89fb      	ldrh	r3, [r7, #14]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <dec_lock+0x3a>
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e26:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <dec_lock+0x74>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	4413      	add	r3, r2
 8004e2e:	330c      	adds	r3, #12
 8004e30:	89fa      	ldrh	r2, [r7, #14]
 8004e32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e34:	89fb      	ldrh	r3, [r7, #14]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <dec_lock+0x5a>
 8004e3a:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <dec_lock+0x74>)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	4413      	add	r3, r2
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	737b      	strb	r3, [r7, #13]
 8004e4a:	e001      	b.n	8004e50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e50:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	200000bc 	.word	0x200000bc

08004e64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e010      	b.n	8004e94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e72:	4a0d      	ldr	r2, [pc, #52]	; (8004ea8 <clear_lock+0x44>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	4413      	add	r3, r2
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d105      	bne.n	8004e8e <clear_lock+0x2a>
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <clear_lock+0x44>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	4413      	add	r3, r2
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3301      	adds	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d9eb      	bls.n	8004e72 <clear_lock+0xe>
	}
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	200000bc 	.word	0x200000bc

08004eac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	78db      	ldrb	r3, [r3, #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d034      	beq.n	8004f2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7858      	ldrb	r0, [r3, #1]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	f7ff fd40 	bl	8004958 <disk_write>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	e022      	b.n	8004f2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d217      	bcs.n	8004f2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	789b      	ldrb	r3, [r3, #2]
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	e010      	b.n	8004f24 <sync_window+0x78>
					wsect += fs->fsize;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7858      	ldrb	r0, [r3, #1]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f16:	2301      	movs	r3, #1
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	f7ff fd1d 	bl	8004958 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d8eb      	bhi.n	8004f02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d01b      	beq.n	8004f84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ffad 	bl	8004eac <sync_window>
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d113      	bne.n	8004f84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	7858      	ldrb	r0, [r3, #1]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f66:	2301      	movs	r3, #1
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	f7ff fcd5 	bl	8004918 <disk_read>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f74:	f04f 33ff 	mov.w	r3, #4294967295
 8004f78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ff87 	bl	8004eac <sync_window>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d159      	bne.n	800505c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d149      	bne.n	8005044 <sync_fs+0xb4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	791b      	ldrb	r3, [r3, #4]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d145      	bne.n	8005044 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	899b      	ldrh	r3, [r3, #12]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f7ff fda8 	bl	8004b1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3338      	adds	r3, #56	; 0x38
 8004fce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fd2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fd37 	bl	8004a4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3338      	adds	r3, #56	; 0x38
 8004fe0:	4921      	ldr	r1, [pc, #132]	; (8005068 <sync_fs+0xd8>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fd4c 	bl	8004a80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3338      	adds	r3, #56	; 0x38
 8004fec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ff0:	491e      	ldr	r1, [pc, #120]	; (800506c <sync_fs+0xdc>)
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fd44 	bl	8004a80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3338      	adds	r3, #56	; 0x38
 8004ffc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f7ff fd3a 	bl	8004a80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3338      	adds	r3, #56	; 0x38
 8005010:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7ff fd30 	bl	8004a80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7858      	ldrb	r0, [r3, #1]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005038:	2301      	movs	r3, #1
 800503a:	f7ff fc8d 	bl	8004958 <disk_write>
			fs->fsi_flag = 0;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	785b      	ldrb	r3, [r3, #1]
 8005048:	2200      	movs	r2, #0
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff fca3 	bl	8004998 <disk_ioctl>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <sync_fs+0xcc>
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	41615252 	.word	0x41615252
 800506c:	61417272 	.word	0x61417272

08005070 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3b02      	subs	r3, #2
 800507e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	3b02      	subs	r3, #2
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d301      	bcc.n	8005090 <clust2sect+0x20>
 800508c:	2300      	movs	r3, #0
 800508e:	e008      	b.n	80050a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	895b      	ldrh	r3, [r3, #10]
 8005094:	461a      	mov	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	fb03 f202 	mul.w	r2, r3, r2
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	4413      	add	r3, r2
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d904      	bls.n	80050ce <get_fat+0x20>
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80050ce:	2301      	movs	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e0bb      	b.n	800524c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295
 80050d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b03      	cmp	r3, #3
 80050e0:	f000 8083 	beq.w	80051ea <get_fat+0x13c>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	f300 80a7 	bgt.w	8005238 <get_fat+0x18a>
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d002      	beq.n	80050f4 <get_fat+0x46>
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d056      	beq.n	80051a0 <get_fat+0xf2>
 80050f2:	e0a1      	b.n	8005238 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	899b      	ldrh	r3, [r3, #12]
 800510a:	4619      	mov	r1, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005112:	4413      	add	r3, r2
 8005114:	4619      	mov	r1, r3
 8005116:	6938      	ldr	r0, [r7, #16]
 8005118:	f7ff ff0c 	bl	8004f34 <move_window>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	f040 808d 	bne.w	800523e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	60fa      	str	r2, [r7, #12]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	8992      	ldrh	r2, [r2, #12]
 800512e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005132:	fb02 f201 	mul.w	r2, r2, r1
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005140:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	899b      	ldrh	r3, [r3, #12]
 800514a:	4619      	mov	r1, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005152:	4413      	add	r3, r2
 8005154:	4619      	mov	r1, r3
 8005156:	6938      	ldr	r0, [r7, #16]
 8005158:	f7ff feec 	bl	8004f34 <move_window>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d16f      	bne.n	8005242 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	899b      	ldrh	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	fbb3 f1f2 	udiv	r1, r3, r2
 800516e:	fb02 f201 	mul.w	r2, r2, r1
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <get_fat+0xe8>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	e002      	b.n	800519c <get_fat+0xee>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519c:	617b      	str	r3, [r7, #20]
			break;
 800519e:	e055      	b.n	800524c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	899b      	ldrh	r3, [r3, #12]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	4619      	mov	r1, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80051b4:	4413      	add	r3, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	6938      	ldr	r0, [r7, #16]
 80051ba:	f7ff febb 	bl	8004f34 <move_window>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d140      	bne.n	8005246 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	8992      	ldrh	r2, [r2, #12]
 80051d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80051d6:	fb02 f200 	mul.w	r2, r2, r0
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	440b      	add	r3, r1
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fbf8 	bl	80049d4 <ld_word>
 80051e4:	4603      	mov	r3, r0
 80051e6:	617b      	str	r3, [r7, #20]
			break;
 80051e8:	e030      	b.n	800524c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	899b      	ldrh	r3, [r3, #12]
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	4619      	mov	r1, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80051fe:	4413      	add	r3, r2
 8005200:	4619      	mov	r1, r3
 8005202:	6938      	ldr	r0, [r7, #16]
 8005204:	f7ff fe96 	bl	8004f34 <move_window>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11d      	bne.n	800524a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	8992      	ldrh	r2, [r2, #12]
 800521c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005220:	fb02 f200 	mul.w	r2, r2, r0
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	440b      	add	r3, r1
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fbeb 	bl	8004a04 <ld_dword>
 800522e:	4603      	mov	r3, r0
 8005230:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005234:	617b      	str	r3, [r7, #20]
			break;
 8005236:	e009      	b.n	800524c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e006      	b.n	800524c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800523e:	bf00      	nop
 8005240:	e004      	b.n	800524c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005242:	bf00      	nop
 8005244:	e002      	b.n	800524c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005246:	bf00      	nop
 8005248:	e000      	b.n	800524c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800524a:	bf00      	nop
		}
	}

	return val;
 800524c:	697b      	ldr	r3, [r7, #20]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005256:	b590      	push	{r4, r7, lr}
 8005258:	b089      	sub	sp, #36	; 0x24
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005262:	2302      	movs	r3, #2
 8005264:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b01      	cmp	r3, #1
 800526a:	f240 8102 	bls.w	8005472 <put_fat+0x21c>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	429a      	cmp	r2, r3
 8005276:	f080 80fc 	bcs.w	8005472 <put_fat+0x21c>
		switch (fs->fs_type) {
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b03      	cmp	r3, #3
 8005280:	f000 80b6 	beq.w	80053f0 <put_fat+0x19a>
 8005284:	2b03      	cmp	r3, #3
 8005286:	f300 80fd 	bgt.w	8005484 <put_fat+0x22e>
 800528a:	2b01      	cmp	r3, #1
 800528c:	d003      	beq.n	8005296 <put_fat+0x40>
 800528e:	2b02      	cmp	r3, #2
 8005290:	f000 8083 	beq.w	800539a <put_fat+0x144>
 8005294:	e0f6      	b.n	8005484 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4413      	add	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	899b      	ldrh	r3, [r3, #12]
 80052ac:	4619      	mov	r1, r3
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80052b4:	4413      	add	r3, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fe3b 	bl	8004f34 <move_window>
 80052be:	4603      	mov	r3, r0
 80052c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052c2:	7ffb      	ldrb	r3, [r7, #31]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 80d6 	bne.w	8005476 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	61ba      	str	r2, [r7, #24]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	8992      	ldrh	r2, [r2, #12]
 80052da:	fbb3 f0f2 	udiv	r0, r3, r2
 80052de:	fb02 f200 	mul.w	r2, r2, r0
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	440b      	add	r3, r1
 80052e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <put_fat+0xb8>
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	b25b      	sxtb	r3, r3
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	b25a      	sxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	b25b      	sxtb	r3, r3
 8005306:	4313      	orrs	r3, r2
 8005308:	b25b      	sxtb	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e001      	b.n	8005312 <put_fat+0xbc>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	899b      	ldrh	r3, [r3, #12]
 8005324:	4619      	mov	r1, r3
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	fbb3 f3f1 	udiv	r3, r3, r1
 800532c:	4413      	add	r3, r2
 800532e:	4619      	mov	r1, r3
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff fdff 	bl	8004f34 <move_window>
 8005336:	4603      	mov	r3, r0
 8005338:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800533a:	7ffb      	ldrb	r3, [r7, #31]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 809c 	bne.w	800547a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	899b      	ldrh	r3, [r3, #12]
 800534c:	461a      	mov	r2, r3
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	fbb3 f0f2 	udiv	r0, r3, r2
 8005354:	fb02 f200 	mul.w	r2, r2, r0
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	440b      	add	r3, r1
 800535c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <put_fat+0x11a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e00e      	b.n	800538e <put_fat+0x138>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b25b      	sxtb	r3, r3
 8005376:	f023 030f 	bic.w	r3, r3, #15
 800537a:	b25a      	sxtb	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	b25b      	sxtb	r3, r3
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	b25b      	sxtb	r3, r3
 8005388:	4313      	orrs	r3, r2
 800538a:	b25b      	sxtb	r3, r3
 800538c:	b2db      	uxtb	r3, r3
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	70da      	strb	r2, [r3, #3]
			break;
 8005398:	e074      	b.n	8005484 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	899b      	ldrh	r3, [r3, #12]
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80053ae:	4413      	add	r3, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff fdbe 	bl	8004f34 <move_window>
 80053b8:	4603      	mov	r3, r0
 80053ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d15d      	bne.n	800547e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	8992      	ldrh	r2, [r2, #12]
 80053d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80053d4:	fb02 f200 	mul.w	r2, r2, r0
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	440b      	add	r3, r1
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	b292      	uxth	r2, r2
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fb31 	bl	8004a4a <st_word>
			fs->wflag = 1;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	70da      	strb	r2, [r3, #3]
			break;
 80053ee:	e049      	b.n	8005484 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	899b      	ldrh	r3, [r3, #12]
 80053f8:	089b      	lsrs	r3, r3, #2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4619      	mov	r1, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	fbb3 f3f1 	udiv	r3, r3, r1
 8005404:	4413      	add	r3, r2
 8005406:	4619      	mov	r1, r3
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff fd93 	bl	8004f34 <move_window>
 800540e:	4603      	mov	r3, r0
 8005410:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d134      	bne.n	8005482 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	8992      	ldrh	r2, [r2, #12]
 800542c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005430:	fb02 f200 	mul.w	r2, r2, r0
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	440b      	add	r3, r1
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fae3 	bl	8004a04 <ld_dword>
 800543e:	4603      	mov	r3, r0
 8005440:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005444:	4323      	orrs	r3, r4
 8005446:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	8992      	ldrh	r2, [r2, #12]
 8005456:	fbb3 f0f2 	udiv	r0, r3, r2
 800545a:	fb02 f200 	mul.w	r2, r2, r0
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	440b      	add	r3, r1
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fb0b 	bl	8004a80 <st_dword>
			fs->wflag = 1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	70da      	strb	r2, [r3, #3]
			break;
 8005470:	e008      	b.n	8005484 <put_fat+0x22e>
		}
	}
 8005472:	bf00      	nop
 8005474:	e006      	b.n	8005484 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005476:	bf00      	nop
 8005478:	e004      	b.n	8005484 <put_fat+0x22e>
			if (res != FR_OK) break;
 800547a:	bf00      	nop
 800547c:	e002      	b.n	8005484 <put_fat+0x22e>
			if (res != FR_OK) break;
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005482:	bf00      	nop
	return res;
 8005484:	7ffb      	ldrb	r3, [r7, #31]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3724      	adds	r7, #36	; 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd90      	pop	{r4, r7, pc}

0800548e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b088      	sub	sp, #32
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d904      	bls.n	80054b4 <remove_chain+0x26>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d301      	bcc.n	80054b8 <remove_chain+0x2a>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e04b      	b.n	8005550 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80054be:	f04f 32ff 	mov.w	r2, #4294967295
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	69b8      	ldr	r0, [r7, #24]
 80054c6:	f7ff fec6 	bl	8005256 <put_fat>
 80054ca:	4603      	mov	r3, r0
 80054cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <remove_chain+0x4a>
 80054d4:	7ffb      	ldrb	r3, [r7, #31]
 80054d6:	e03b      	b.n	8005550 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7ff fde7 	bl	80050ae <get_fat>
 80054e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d031      	beq.n	800554c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <remove_chain+0x64>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e02e      	b.n	8005550 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d101      	bne.n	80054fe <remove_chain+0x70>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e028      	b.n	8005550 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80054fe:	2200      	movs	r2, #0
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f7ff fea7 	bl	8005256 <put_fat>
 8005508:	4603      	mov	r3, r0
 800550a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800550c:	7ffb      	ldrb	r3, [r7, #31]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <remove_chain+0x88>
 8005512:	7ffb      	ldrb	r3, [r7, #31]
 8005514:	e01c      	b.n	8005550 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	3b02      	subs	r3, #2
 8005520:	429a      	cmp	r2, r3
 8005522:	d20b      	bcs.n	800553c <remove_chain+0xae>
			fs->free_clst++;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	791b      	ldrb	r3, [r3, #4]
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	b2da      	uxtb	r2, r3
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3c6      	bcc.n	80054d8 <remove_chain+0x4a>
 800554a:	e000      	b.n	800554e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800554c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10d      	bne.n	800558a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <create_chain+0x2c>
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	429a      	cmp	r2, r3
 8005582:	d31b      	bcc.n	80055bc <create_chain+0x64>
 8005584:	2301      	movs	r3, #1
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	e018      	b.n	80055bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fd8e 	bl	80050ae <get_fat>
 8005592:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d801      	bhi.n	800559e <create_chain+0x46>
 800559a:	2301      	movs	r3, #1
 800559c:	e070      	b.n	8005680 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d101      	bne.n	80055aa <create_chain+0x52>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	e06a      	b.n	8005680 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d201      	bcs.n	80055b8 <create_chain+0x60>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	e063      	b.n	8005680 <create_chain+0x128>
		scl = clst;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	3301      	adds	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d307      	bcc.n	80055e0 <create_chain+0x88>
				ncl = 2;
 80055d0:	2302      	movs	r3, #2
 80055d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d901      	bls.n	80055e0 <create_chain+0x88>
 80055dc:	2300      	movs	r3, #0
 80055de:	e04f      	b.n	8005680 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff fd63 	bl	80050ae <get_fat>
 80055e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00e      	beq.n	800560e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d003      	beq.n	80055fe <create_chain+0xa6>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d101      	bne.n	8005602 <create_chain+0xaa>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	e03e      	b.n	8005680 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	429a      	cmp	r2, r3
 8005608:	d1da      	bne.n	80055c0 <create_chain+0x68>
 800560a:	2300      	movs	r3, #0
 800560c:	e038      	b.n	8005680 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800560e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005610:	f04f 32ff 	mov.w	r2, #4294967295
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	6938      	ldr	r0, [r7, #16]
 8005618:	f7ff fe1d 	bl	8005256 <put_fat>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <create_chain+0xe2>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d006      	beq.n	800563a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	6938      	ldr	r0, [r7, #16]
 8005632:	f7ff fe10 	bl	8005256 <put_fat>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d116      	bne.n	800566e <create_chain+0x116>
		fs->last_clst = ncl;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	3b02      	subs	r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d804      	bhi.n	800565e <create_chain+0x106>
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	791b      	ldrb	r3, [r3, #4]
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	711a      	strb	r2, [r3, #4]
 800566c:	e007      	b.n	800567e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d102      	bne.n	800567a <create_chain+0x122>
 8005674:	f04f 33ff 	mov.w	r3, #4294967295
 8005678:	e000      	b.n	800567c <create_chain+0x124>
 800567a:	2301      	movs	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800567e:	69fb      	ldr	r3, [r7, #28]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	3304      	adds	r3, #4
 800569e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	899b      	ldrh	r3, [r3, #12]
 80056a4:	461a      	mov	r2, r3
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	8952      	ldrh	r2, [r2, #10]
 80056b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	613a      	str	r2, [r7, #16]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <clmt_clust+0x42>
 80056c6:	2300      	movs	r3, #0
 80056c8:	e010      	b.n	80056ec <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d307      	bcc.n	80056e2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3304      	adds	r3, #4
 80056de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056e0:	e7e9      	b.n	80056b6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80056e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	4413      	add	r3, r2
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570e:	d204      	bcs.n	800571a <dir_sdi+0x22>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <dir_sdi+0x26>
		return FR_INT_ERR;
 800571a:	2302      	movs	r3, #2
 800571c:	e071      	b.n	8005802 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <dir_sdi+0x46>
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d902      	bls.n	800573e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10c      	bne.n	800575e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	8912      	ldrh	r2, [r2, #8]
 800574c:	4293      	cmp	r3, r2
 800574e:	d301      	bcc.n	8005754 <dir_sdi+0x5c>
 8005750:	2302      	movs	r3, #2
 8005752:	e056      	b.n	8005802 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	61da      	str	r2, [r3, #28]
 800575c:	e02d      	b.n	80057ba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	895b      	ldrh	r3, [r3, #10]
 8005762:	461a      	mov	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	899b      	ldrh	r3, [r3, #12]
 8005768:	fb03 f302 	mul.w	r3, r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800576e:	e019      	b.n	80057a4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6979      	ldr	r1, [r7, #20]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fc9a 	bl	80050ae <get_fat>
 800577a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d101      	bne.n	8005788 <dir_sdi+0x90>
 8005784:	2301      	movs	r3, #1
 8005786:	e03c      	b.n	8005802 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d904      	bls.n	8005798 <dir_sdi+0xa0>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d301      	bcc.n	800579c <dir_sdi+0xa4>
 8005798:	2302      	movs	r3, #2
 800579a:	e032      	b.n	8005802 <dir_sdi+0x10a>
			ofs -= csz;
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d2e1      	bcs.n	8005770 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80057ac:	6979      	ldr	r1, [r7, #20]
 80057ae:	6938      	ldr	r0, [r7, #16]
 80057b0:	f7ff fc5e 	bl	8005070 <clust2sect>
 80057b4:	4602      	mov	r2, r0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <dir_sdi+0xd4>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e01a      	b.n	8005802 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	899b      	ldrh	r3, [r3, #12]
 80057d4:	4619      	mov	r1, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80057dc:	441a      	add	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	899b      	ldrh	r3, [r3, #12]
 80057ec:	461a      	mov	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80057f4:	fb02 f200 	mul.w	r2, r2, r0
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	18ca      	adds	r2, r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	3320      	adds	r3, #32
 8005820:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <dir_next+0x28>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005830:	d301      	bcc.n	8005836 <dir_next+0x2c>
 8005832:	2304      	movs	r3, #4
 8005834:	e0bb      	b.n	80059ae <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	899b      	ldrh	r3, [r3, #12]
 800583a:	461a      	mov	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005842:	fb02 f201 	mul.w	r2, r2, r1
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	f040 809d 	bne.w	8005988 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	8912      	ldrh	r2, [r2, #8]
 8005868:	4293      	cmp	r3, r2
 800586a:	f0c0 808d 	bcc.w	8005988 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	61da      	str	r2, [r3, #28]
 8005874:	2304      	movs	r3, #4
 8005876:	e09a      	b.n	80059ae <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	899b      	ldrh	r3, [r3, #12]
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	fbb3 f3f2 	udiv	r3, r3, r2
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	8952      	ldrh	r2, [r2, #10]
 8005888:	3a01      	subs	r2, #1
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d17b      	bne.n	8005988 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f7ff fc08 	bl	80050ae <get_fat>
 800589e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d801      	bhi.n	80058aa <dir_next+0xa0>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e081      	b.n	80059ae <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d101      	bne.n	80058b6 <dir_next+0xac>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e07b      	b.n	80059ae <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d359      	bcc.n	8005974 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	61da      	str	r2, [r3, #28]
 80058cc:	2304      	movs	r3, #4
 80058ce:	e06e      	b.n	80059ae <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7ff fe3d 	bl	8005558 <create_chain>
 80058de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <dir_next+0xe0>
 80058e6:	2307      	movs	r3, #7
 80058e8:	e061      	b.n	80059ae <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <dir_next+0xea>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e05c      	b.n	80059ae <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d101      	bne.n	8005900 <dir_next+0xf6>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e056      	b.n	80059ae <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff fad3 	bl	8004eac <sync_window>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <dir_next+0x106>
 800590c:	2301      	movs	r3, #1
 800590e:	e04e      	b.n	80059ae <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	899b      	ldrh	r3, [r3, #12]
 800591a:	461a      	mov	r2, r3
 800591c:	2100      	movs	r1, #0
 800591e:	f7ff f8fc 	bl	8004b1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff fba1 	bl	8005070 <clust2sect>
 800592e:	4602      	mov	r2, r0
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	635a      	str	r2, [r3, #52]	; 0x34
 8005934:	e012      	b.n	800595c <dir_next+0x152>
						fs->wflag = 1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff fab5 	bl	8004eac <sync_window>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <dir_next+0x142>
 8005948:	2301      	movs	r3, #1
 800594a:	e030      	b.n	80059ae <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3301      	adds	r3, #1
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	635a      	str	r2, [r3, #52]	; 0x34
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	895b      	ldrh	r3, [r3, #10]
 8005960:	461a      	mov	r2, r3
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4293      	cmp	r3, r2
 8005966:	d3e6      	bcc.n	8005936 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff fb77 	bl	8005070 <clust2sect>
 8005982:	4602      	mov	r2, r0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	899b      	ldrh	r3, [r3, #12]
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	fbb3 f0f2 	udiv	r0, r3, r2
 80059a0:	fb02 f200 	mul.w	r2, r2, r0
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	18ca      	adds	r2, r1, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b086      	sub	sp, #24
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80059c6:	2100      	movs	r1, #0
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fe95 	bl	80056f8 <dir_sdi>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d12b      	bne.n	8005a30 <dir_alloc+0x7a>
		n = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff faa6 	bl	8004f34 <move_window>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d11d      	bne.n	8005a2e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2be5      	cmp	r3, #229	; 0xe5
 80059fa:	d004      	beq.n	8005a06 <dir_alloc+0x50>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d107      	bne.n	8005a16 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d102      	bne.n	8005a1a <dir_alloc+0x64>
 8005a14:	e00c      	b.n	8005a30 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fef4 	bl	800580a <dir_next>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0d7      	beq.n	80059dc <dir_alloc+0x26>
 8005a2c:	e000      	b.n	8005a30 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005a2e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d101      	bne.n	8005a3a <dir_alloc+0x84>
 8005a36:	2307      	movs	r3, #7
 8005a38:	75fb      	strb	r3, [r7, #23]
	return res;
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	331a      	adds	r3, #26
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe ffbe 	bl	80049d4 <ld_word>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d109      	bne.n	8005a78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3314      	adds	r3, #20
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe ffb3 	bl	80049d4 <ld_word>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	331a      	adds	r3, #26
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	b292      	uxth	r2, r2
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe ffd6 	bl	8004a4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d109      	bne.n	8005aba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f103 0214 	add.w	r2, r3, #20
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	0c1b      	lsrs	r3, r3, #16
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fe ffc8 	bl	8004a4a <st_word>
	}
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	331a      	adds	r3, #26
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe ff7e 	bl	80049d4 <ld_word>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <cmp_lfn+0x1e>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e059      	b.n	8005b96 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aea:	1e5a      	subs	r2, r3, #1
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005af8:	2301      	movs	r3, #1
 8005afa:	81fb      	strh	r3, [r7, #14]
 8005afc:	2300      	movs	r3, #0
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	e033      	b.n	8005b6a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005b02:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <cmp_lfn+0xdc>)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4413      	add	r3, r2
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4413      	add	r3, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe ff5f 	bl	80049d4 <ld_word>
 8005b16:	4603      	mov	r3, r0
 8005b18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005b1a:	89fb      	ldrh	r3, [r7, #14]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01a      	beq.n	8005b56 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2bfe      	cmp	r3, #254	; 0xfe
 8005b24:	d812      	bhi.n	8005b4c <cmp_lfn+0x88>
 8005b26:	89bb      	ldrh	r3, [r7, #12]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fed9 	bl	80078e0 <ff_wtoupper>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	461c      	mov	r4, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	617a      	str	r2, [r7, #20]
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fecd 	bl	80078e0 <ff_wtoupper>
 8005b46:	4603      	mov	r3, r0
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	d001      	beq.n	8005b50 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e022      	b.n	8005b96 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005b50:	89bb      	ldrh	r3, [r7, #12]
 8005b52:	81fb      	strh	r3, [r7, #14]
 8005b54:	e006      	b.n	8005b64 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005b56:	89bb      	ldrh	r3, [r7, #12]
 8005b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d001      	beq.n	8005b64 <cmp_lfn+0xa0>
 8005b60:	2300      	movs	r3, #0
 8005b62:	e018      	b.n	8005b96 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	3301      	adds	r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b0c      	cmp	r3, #12
 8005b6e:	d9c8      	bls.n	8005b02 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <cmp_lfn+0xd0>
 8005b7c:	89fb      	ldrh	r3, [r7, #14]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <cmp_lfn+0xd0>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <cmp_lfn+0xd0>
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005b94:	2301      	movs	r3, #1
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd90      	pop	{r4, r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08008b80 	.word	0x08008b80

08005ba4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4611      	mov	r1, r2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	71fb      	strb	r3, [r7, #7]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	330d      	adds	r3, #13
 8005bbe:	79ba      	ldrb	r2, [r7, #6]
 8005bc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	330b      	adds	r3, #11
 8005bc6:	220f      	movs	r2, #15
 8005bc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	331a      	adds	r3, #26
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe ff36 	bl	8004a4a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	1e5a      	subs	r2, r3, #1
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	82fb      	strh	r3, [r7, #22]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005bf6:	8afb      	ldrh	r3, [r7, #22]
 8005bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <put_lfn+0x6c>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	61fa      	str	r2, [r7, #28]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005c10:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <put_lfn+0xcc>)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	4413      	add	r3, r2
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	8afa      	ldrh	r2, [r7, #22]
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe ff11 	bl	8004a4a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005c28:	8afb      	ldrh	r3, [r7, #22]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <put_lfn+0x90>
 8005c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c32:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	d9da      	bls.n	8005bf6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005c40:	8afb      	ldrh	r3, [r7, #22]
 8005c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d006      	beq.n	8005c58 <put_lfn+0xb4>
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <put_lfn+0xbc>
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c5e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	79fa      	ldrb	r2, [r7, #7]
 8005c64:	701a      	strb	r2, [r3, #0]
}
 8005c66:	bf00      	nop
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	08008b80 	.word	0x08008b80

08005c74 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	; 0x30
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005c82:	220b      	movs	r2, #11
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7fe ff26 	bl	8004ad8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d92b      	bls.n	8005cea <gen_numname+0x76>
		sr = seq;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005c96:	e022      	b.n	8005cde <gen_numname+0x6a>
			wc = *lfn++;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	1c9a      	adds	r2, r3, #2
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca6:	e017      	b.n	8005cd8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	005a      	lsls	r2, r3, #1
 8005cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005cb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <gen_numname+0x5e>
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005ccc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005cd0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d9e4      	bls.n	8005ca8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1d8      	bne.n	8005c98 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005cea:	2307      	movs	r3, #7
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	3330      	adds	r3, #48	; 0x30
 8005cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d02:	2b39      	cmp	r3, #57	; 0x39
 8005d04:	d904      	bls.n	8005d10 <gen_numname+0x9c>
 8005d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d0a:	3307      	adds	r3, #7
 8005d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	1e5a      	subs	r2, r3, #1
 8005d14:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005d20:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1de      	bne.n	8005cee <gen_numname+0x7a>
	ns[i] = '~';
 8005d30:	f107 0214 	add.w	r2, r7, #20
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	4413      	add	r3, r2
 8005d38:	227e      	movs	r2, #126	; 0x7e
 8005d3a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d40:	e002      	b.n	8005d48 <gen_numname+0xd4>
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	3301      	adds	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d205      	bcs.n	8005d5c <gen_numname+0xe8>
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	4413      	add	r3, r2
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d1f2      	bne.n	8005d42 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	2b07      	cmp	r3, #7
 8005d60:	d808      	bhi.n	8005d74 <gen_numname+0x100>
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005d72:	e000      	b.n	8005d76 <gen_numname+0x102>
 8005d74:	2120      	movs	r1, #32
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	460a      	mov	r2, r1
 8005d82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	2b07      	cmp	r3, #7
 8005d88:	d9e8      	bls.n	8005d5c <gen_numname+0xe8>
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	3730      	adds	r7, #48	; 0x30
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005da0:	230b      	movs	r3, #11
 8005da2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	0852      	lsrs	r2, r2, #1
 8005daa:	01db      	lsls	r3, r3, #7
 8005dac:	4313      	orrs	r3, r2
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	6079      	str	r1, [r7, #4]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4413      	add	r3, r2
 8005dba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1ed      	bne.n	8005da4 <sum_sfn+0x10>
	return sum;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b086      	sub	sp, #24
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005de4:	2100      	movs	r1, #0
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fc86 	bl	80056f8 <dir_sdi>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <dir_find+0x24>
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	e0a9      	b.n	8005f4e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005dfa:	23ff      	movs	r3, #255	; 0xff
 8005dfc:	753b      	strb	r3, [r7, #20]
 8005dfe:	7d3b      	ldrb	r3, [r7, #20]
 8005e00:	757b      	strb	r3, [r7, #21]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6938      	ldr	r0, [r7, #16]
 8005e12:	f7ff f88f 	bl	8004f34 <move_window>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f040 8090 	bne.w	8005f42 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e2a:	7dbb      	ldrb	r3, [r7, #22]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <dir_find+0x60>
 8005e30:	2304      	movs	r3, #4
 8005e32:	75fb      	strb	r3, [r7, #23]
 8005e34:	e08a      	b.n	8005f4c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	330b      	adds	r3, #11
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e42:	73fb      	strb	r3, [r7, #15]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7bfa      	ldrb	r2, [r7, #15]
 8005e48:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005e4a:	7dbb      	ldrb	r3, [r7, #22]
 8005e4c:	2be5      	cmp	r3, #229	; 0xe5
 8005e4e:	d007      	beq.n	8005e60 <dir_find+0x8a>
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <dir_find+0x98>
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b0f      	cmp	r3, #15
 8005e5e:	d006      	beq.n	8005e6e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e60:	23ff      	movs	r3, #255	; 0xff
 8005e62:	757b      	strb	r3, [r7, #21]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6c:	e05e      	b.n	8005f2c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b0f      	cmp	r3, #15
 8005e72:	d136      	bne.n	8005ee2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d154      	bne.n	8005f2c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005e82:	7dbb      	ldrb	r3, [r7, #22]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00d      	beq.n	8005ea8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	7b5b      	ldrb	r3, [r3, #13]
 8005e92:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005e94:	7dbb      	ldrb	r3, [r7, #22]
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	75bb      	strb	r3, [r7, #22]
 8005e9c:	7dbb      	ldrb	r3, [r7, #22]
 8005e9e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ea8:	7dba      	ldrb	r2, [r7, #22]
 8005eaa:	7d7b      	ldrb	r3, [r7, #21]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d115      	bne.n	8005edc <dir_find+0x106>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	330d      	adds	r3, #13
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	7d3a      	ldrb	r2, [r7, #20]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d10e      	bne.n	8005edc <dir_find+0x106>
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f7ff fdfb 	bl	8005ac4 <cmp_lfn>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <dir_find+0x106>
 8005ed4:	7d7b      	ldrb	r3, [r7, #21]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	e000      	b.n	8005ede <dir_find+0x108>
 8005edc:	23ff      	movs	r3, #255	; 0xff
 8005ede:	757b      	strb	r3, [r7, #21]
 8005ee0:	e024      	b.n	8005f2c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005ee2:	7d7b      	ldrb	r3, [r7, #21]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <dir_find+0x126>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff ff51 	bl	8005d94 <sum_sfn>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	7d3b      	ldrb	r3, [r7, #20]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d024      	beq.n	8005f46 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <dir_find+0x14a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a18      	ldr	r0, [r3, #32]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3324      	adds	r3, #36	; 0x24
 8005f12:	220b      	movs	r2, #11
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7fe fe1b 	bl	8004b50 <mem_cmp>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d014      	beq.n	8005f4a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f20:	23ff      	movs	r3, #255	; 0xff
 8005f22:	757b      	strb	r3, [r7, #21]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fc6b 	bl	800580a <dir_next>
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f43f af65 	beq.w	8005e0a <dir_find+0x34>
 8005f40:	e004      	b.n	8005f4c <dir_find+0x176>
		if (res != FR_OK) break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005f4a:	bf00      	nop

	return res;
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f6c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <dir_register+0x20>
 8005f74:	2306      	movs	r3, #6
 8005f76:	e0e0      	b.n	800613a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005f78:	2300      	movs	r3, #0
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7c:	e002      	b.n	8005f84 <dir_register+0x2c>
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	3301      	adds	r3, #1
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f4      	bne.n	8005f7e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005f9a:	f107 030c 	add.w	r3, r7, #12
 8005f9e:	220c      	movs	r2, #12
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fd99 	bl	8004ad8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d032      	beq.n	8006016 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2240      	movs	r2, #64	; 0x40
 8005fb4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005fb8:	2301      	movs	r3, #1
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbc:	e016      	b.n	8005fec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	f107 010c 	add.w	r1, r7, #12
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	f7ff fe51 	bl	8005c74 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff feff 	bl	8005dd6 <dir_find>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	3301      	adds	r3, #1
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	2b63      	cmp	r3, #99	; 0x63
 8005ff0:	d9e5      	bls.n	8005fbe <dir_register+0x66>
 8005ff2:	e000      	b.n	8005ff6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005ff4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	2b64      	cmp	r3, #100	; 0x64
 8005ffa:	d101      	bne.n	8006000 <dir_register+0xa8>
 8005ffc:	2307      	movs	r3, #7
 8005ffe:	e09c      	b.n	800613a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006004:	2b04      	cmp	r3, #4
 8006006:	d002      	beq.n	800600e <dir_register+0xb6>
 8006008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800600c:	e095      	b.n	800613a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800600e:	7dfa      	ldrb	r2, [r7, #23]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <dir_register+0xd8>
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	330c      	adds	r3, #12
 8006024:	4a47      	ldr	r2, [pc, #284]	; (8006144 <dir_register+0x1ec>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	089b      	lsrs	r3, r3, #2
 800602c:	3301      	adds	r3, #1
 800602e:	e000      	b.n	8006032 <dir_register+0xda>
 8006030:	2301      	movs	r3, #1
 8006032:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006034:	6a39      	ldr	r1, [r7, #32]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fcbd 	bl	80059b6 <dir_alloc>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006046:	2b00      	cmp	r3, #0
 8006048:	d148      	bne.n	80060dc <dir_register+0x184>
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	3b01      	subs	r3, #1
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d042      	beq.n	80060dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	015b      	lsls	r3, r3, #5
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fb48 	bl	80056f8 <dir_sdi>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800606e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006072:	2b00      	cmp	r3, #0
 8006074:	d132      	bne.n	80060dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3324      	adds	r3, #36	; 0x24
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fe8a 	bl	8005d94 <sum_sfn>
 8006080:	4603      	mov	r3, r0
 8006082:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4619      	mov	r1, r3
 800608a:	69f8      	ldr	r0, [r7, #28]
 800608c:	f7fe ff52 	bl	8004f34 <move_window>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800609a:	2b00      	cmp	r3, #0
 800609c:	d11d      	bne.n	80060da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	6918      	ldr	r0, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a19      	ldr	r1, [r3, #32]
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	7efb      	ldrb	r3, [r7, #27]
 80060ac:	f7ff fd7a 	bl	8005ba4 <put_lfn>
				fs->wflag = 1;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2201      	movs	r2, #1
 80060b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80060b6:	2100      	movs	r1, #0
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff fba6 	bl	800580a <dir_next>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80060c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d107      	bne.n	80060dc <dir_register+0x184>
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1d5      	bne.n	8006084 <dir_register+0x12c>
 80060d8:	e000      	b.n	80060dc <dir_register+0x184>
				if (res != FR_OK) break;
 80060da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80060dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d128      	bne.n	8006136 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4619      	mov	r1, r3
 80060ea:	69f8      	ldr	r0, [r7, #28]
 80060ec:	f7fe ff22 	bl	8004f34 <move_window>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80060f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11b      	bne.n	8006136 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	2220      	movs	r2, #32
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fd07 	bl	8004b1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a18      	ldr	r0, [r3, #32]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3324      	adds	r3, #36	; 0x24
 8006114:	220b      	movs	r2, #11
 8006116:	4619      	mov	r1, r3
 8006118:	f7fe fcde 	bl	8004ad8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	330c      	adds	r3, #12
 8006128:	f002 0218 	and.w	r2, r2, #24
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2201      	movs	r2, #1
 8006134:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800613a:	4618      	mov	r0, r3
 800613c:	3730      	adds	r7, #48	; 0x30
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	4ec4ec4f 	.word	0x4ec4ec4f

08006148 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	61ba      	str	r2, [r7, #24]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006178:	2b1f      	cmp	r3, #31
 800617a:	d940      	bls.n	80061fe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800617c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800617e:	2b2f      	cmp	r3, #47	; 0x2f
 8006180:	d006      	beq.n	8006190 <create_name+0x48>
 8006182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006184:	2b5c      	cmp	r3, #92	; 0x5c
 8006186:	d110      	bne.n	80061aa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006188:	e002      	b.n	8006190 <create_name+0x48>
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	3301      	adds	r3, #1
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4413      	add	r3, r2
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b2f      	cmp	r3, #47	; 0x2f
 800619a:	d0f6      	beq.n	800618a <create_name+0x42>
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	4413      	add	r3, r2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b5c      	cmp	r3, #92	; 0x5c
 80061a6:	d0f0      	beq.n	800618a <create_name+0x42>
			break;
 80061a8:	e02a      	b.n	8006200 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2bfe      	cmp	r3, #254	; 0xfe
 80061ae:	d901      	bls.n	80061b4 <create_name+0x6c>
 80061b0:	2306      	movs	r3, #6
 80061b2:	e177      	b.n	80064a4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80061b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80061ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061bc:	2101      	movs	r1, #1
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 fb52 	bl	8007868 <ff_convert>
 80061c4:	4603      	mov	r3, r0
 80061c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <create_name+0x8a>
 80061ce:	2306      	movs	r3, #6
 80061d0:	e168      	b.n	80064a4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80061d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d4:	2b7f      	cmp	r3, #127	; 0x7f
 80061d6:	d809      	bhi.n	80061ec <create_name+0xa4>
 80061d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061da:	4619      	mov	r1, r3
 80061dc:	48b3      	ldr	r0, [pc, #716]	; (80064ac <create_name+0x364>)
 80061de:	f7fe fcde 	bl	8004b9e <chk_chr>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <create_name+0xa4>
 80061e8:	2306      	movs	r3, #6
 80061ea:	e15b      	b.n	80064a4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	617a      	str	r2, [r7, #20]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061fa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80061fc:	e7b4      	b.n	8006168 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80061fe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	441a      	add	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800620a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800620c:	2b1f      	cmp	r3, #31
 800620e:	d801      	bhi.n	8006214 <create_name+0xcc>
 8006210:	2304      	movs	r3, #4
 8006212:	e000      	b.n	8006216 <create_name+0xce>
 8006214:	2300      	movs	r3, #0
 8006216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800621a:	e011      	b.n	8006240 <create_name+0xf8>
		w = lfn[di - 1];
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006222:	3b01      	subs	r3, #1
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800622e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006230:	2b20      	cmp	r3, #32
 8006232:	d002      	beq.n	800623a <create_name+0xf2>
 8006234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006236:	2b2e      	cmp	r3, #46	; 0x2e
 8006238:	d106      	bne.n	8006248 <create_name+0x100>
		di--;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	3b01      	subs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1ea      	bne.n	800621c <create_name+0xd4>
 8006246:	e000      	b.n	800624a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006248:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	2200      	movs	r2, #0
 8006254:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <create_name+0x118>
 800625c:	2306      	movs	r3, #6
 800625e:	e121      	b.n	80064a4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3324      	adds	r3, #36	; 0x24
 8006264:	220b      	movs	r2, #11
 8006266:	2120      	movs	r1, #32
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fc56 	bl	8004b1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e002      	b.n	800627a <create_name+0x132>
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	3301      	adds	r3, #1
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	2b20      	cmp	r3, #32
 8006286:	d0f5      	beq.n	8006274 <create_name+0x12c>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	2b2e      	cmp	r3, #46	; 0x2e
 8006294:	d0ee      	beq.n	8006274 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d009      	beq.n	80062b0 <create_name+0x168>
 800629c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062a0:	f043 0303 	orr.w	r3, r3, #3
 80062a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80062a8:	e002      	b.n	80062b0 <create_name+0x168>
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <create_name+0x182>
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	3b01      	subs	r3, #1
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	2b2e      	cmp	r3, #46	; 0x2e
 80062c8:	d1ef      	bne.n	80062aa <create_name+0x162>

	i = b = 0; ni = 8;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062d0:	2300      	movs	r3, #0
 80062d2:	623b      	str	r3, [r7, #32]
 80062d4:	2308      	movs	r3, #8
 80062d6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	61ba      	str	r2, [r7, #24]
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80062e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8090 	beq.w	8006410 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80062f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d006      	beq.n	8006304 <create_name+0x1bc>
 80062f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f8:	2b2e      	cmp	r3, #46	; 0x2e
 80062fa:	d10a      	bne.n	8006312 <create_name+0x1ca>
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	d006      	beq.n	8006312 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006308:	f043 0303 	orr.w	r3, r3, #3
 800630c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006310:	e07d      	b.n	800640e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	429a      	cmp	r2, r3
 8006318:	d203      	bcs.n	8006322 <create_name+0x1da>
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	429a      	cmp	r2, r3
 8006320:	d123      	bne.n	800636a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	2b0b      	cmp	r3, #11
 8006326:	d106      	bne.n	8006336 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800632c:	f043 0303 	orr.w	r3, r3, #3
 8006330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006334:	e06f      	b.n	8006416 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	429a      	cmp	r2, r3
 800633c:	d005      	beq.n	800634a <create_name+0x202>
 800633e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006342:	f043 0303 	orr.w	r3, r3, #3
 8006346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	429a      	cmp	r2, r3
 8006350:	d860      	bhi.n	8006414 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	2308      	movs	r3, #8
 8006358:	623b      	str	r3, [r7, #32]
 800635a:	230b      	movs	r3, #11
 800635c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800635e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006368:	e051      	b.n	800640e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800636a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800636c:	2b7f      	cmp	r3, #127	; 0x7f
 800636e:	d914      	bls.n	800639a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006372:	2100      	movs	r1, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f001 fa77 	bl	8007868 <ff_convert>
 800637a:	4603      	mov	r3, r0
 800637c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800637e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <create_name+0x246>
 8006384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006386:	3b80      	subs	r3, #128	; 0x80
 8006388:	4a49      	ldr	r2, [pc, #292]	; (80064b0 <create_name+0x368>)
 800638a:	5cd3      	ldrb	r3, [r2, r3]
 800638c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800638e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006392:	f043 0302 	orr.w	r3, r3, #2
 8006396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800639a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <create_name+0x268>
 80063a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063a2:	4619      	mov	r1, r3
 80063a4:	4843      	ldr	r0, [pc, #268]	; (80064b4 <create_name+0x36c>)
 80063a6:	f7fe fbfa 	bl	8004b9e <chk_chr>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80063b0:	235f      	movs	r3, #95	; 0x5f
 80063b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063b8:	f043 0303 	orr.w	r3, r3, #3
 80063bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063c0:	e01b      	b.n	80063fa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80063c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d909      	bls.n	80063dc <create_name+0x294>
 80063c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ca:	2b5a      	cmp	r3, #90	; 0x5a
 80063cc:	d806      	bhi.n	80063dc <create_name+0x294>
					b |= 2;
 80063ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063da:	e00e      	b.n	80063fa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80063dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063de:	2b60      	cmp	r3, #96	; 0x60
 80063e0:	d90b      	bls.n	80063fa <create_name+0x2b2>
 80063e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063e4:	2b7a      	cmp	r3, #122	; 0x7a
 80063e6:	d808      	bhi.n	80063fa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80063e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063f6:	3b20      	subs	r3, #32
 80063f8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	623a      	str	r2, [r7, #32]
 8006400:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006402:	b2d1      	uxtb	r1, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	460a      	mov	r2, r1
 800640a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800640e:	e763      	b.n	80062d8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006414:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800641c:	2be5      	cmp	r3, #229	; 0xe5
 800641e:	d103      	bne.n	8006428 <create_name+0x2e0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2205      	movs	r2, #5
 8006424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b08      	cmp	r3, #8
 800642c:	d104      	bne.n	8006438 <create_name+0x2f0>
 800642e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006438:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800643c:	f003 030c 	and.w	r3, r3, #12
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d005      	beq.n	8006450 <create_name+0x308>
 8006444:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b03      	cmp	r3, #3
 800644e:	d105      	bne.n	800645c <create_name+0x314>
 8006450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006454:	f043 0302 	orr.w	r3, r3, #2
 8006458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800645c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d117      	bne.n	8006498 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006468:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d105      	bne.n	8006480 <create_name+0x338>
 8006474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006478:	f043 0310 	orr.w	r3, r3, #16
 800647c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006484:	f003 030c 	and.w	r3, r3, #12
 8006488:	2b04      	cmp	r3, #4
 800648a:	d105      	bne.n	8006498 <create_name+0x350>
 800648c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006490:	f043 0308 	orr.w	r3, r3, #8
 8006494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800649e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80064a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3728      	adds	r7, #40	; 0x28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	08008a8c 	.word	0x08008a8c
 80064b0:	08008b00 	.word	0x08008b00
 80064b4:	08008a98 	.word	0x08008a98

080064b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064cc:	e002      	b.n	80064d4 <follow_path+0x1c>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b2f      	cmp	r3, #47	; 0x2f
 80064da:	d0f8      	beq.n	80064ce <follow_path+0x16>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b5c      	cmp	r3, #92	; 0x5c
 80064e2:	d0f4      	beq.n	80064ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2200      	movs	r2, #0
 80064e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b1f      	cmp	r3, #31
 80064f0:	d80a      	bhi.n	8006508 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2280      	movs	r2, #128	; 0x80
 80064f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80064fa:	2100      	movs	r1, #0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff f8fb 	bl	80056f8 <dir_sdi>
 8006502:	4603      	mov	r3, r0
 8006504:	75fb      	strb	r3, [r7, #23]
 8006506:	e048      	b.n	800659a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006508:	463b      	mov	r3, r7
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fe1b 	bl	8006148 <create_name>
 8006512:	4603      	mov	r3, r0
 8006514:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d139      	bne.n	8006590 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fc5a 	bl	8005dd6 <dir_find>
 8006522:	4603      	mov	r3, r0
 8006524:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800652c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b04      	cmp	r3, #4
 8006538:	d12c      	bne.n	8006594 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d127      	bne.n	8006594 <follow_path+0xdc>
 8006544:	2305      	movs	r3, #5
 8006546:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006548:	e024      	b.n	8006594 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800654a:	7afb      	ldrb	r3, [r7, #11]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d121      	bne.n	8006598 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	799b      	ldrb	r3, [r3, #6]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006560:	2305      	movs	r3, #5
 8006562:	75fb      	strb	r3, [r7, #23]
 8006564:	e019      	b.n	800659a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	8992      	ldrh	r2, [r2, #12]
 8006574:	fbb3 f0f2 	udiv	r0, r3, r2
 8006578:	fb02 f200 	mul.w	r2, r2, r0
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	440b      	add	r3, r1
 8006580:	4619      	mov	r1, r3
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff fa5e 	bl	8005a44 <ld_clust>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800658e:	e7bb      	b.n	8006508 <follow_path+0x50>
			if (res != FR_OK) break;
 8006590:	bf00      	nop
 8006592:	e002      	b.n	800659a <follow_path+0xe2>
				break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006598:	bf00      	nop
			}
		}
	}

	return res;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295
 80065b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d031      	beq.n	800661e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e002      	b.n	80065c8 <get_ldnumber+0x24>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	3301      	adds	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b1f      	cmp	r3, #31
 80065ce:	d903      	bls.n	80065d8 <get_ldnumber+0x34>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b3a      	cmp	r3, #58	; 0x3a
 80065d6:	d1f4      	bne.n	80065c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b3a      	cmp	r3, #58	; 0x3a
 80065de:	d11c      	bne.n	800661a <get_ldnumber+0x76>
			tp = *path;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	60fa      	str	r2, [r7, #12]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	3b30      	subs	r3, #48	; 0x30
 80065f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d80e      	bhi.n	8006616 <get_ldnumber+0x72>
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d10a      	bne.n	8006616 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <get_ldnumber+0x72>
					vol = (int)i;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	3301      	adds	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	e002      	b.n	8006620 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800661e:	693b      	ldr	r3, [r7, #16]
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	70da      	strb	r2, [r3, #3]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fe fc74 	bl	8004f34 <move_window>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <check_fs+0x2a>
 8006652:	2304      	movs	r3, #4
 8006654:	e038      	b.n	80066c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3338      	adds	r3, #56	; 0x38
 800665a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe f9b8 	bl	80049d4 <ld_word>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800666c:	429a      	cmp	r2, r3
 800666e:	d001      	beq.n	8006674 <check_fs+0x48>
 8006670:	2303      	movs	r3, #3
 8006672:	e029      	b.n	80066c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800667a:	2be9      	cmp	r3, #233	; 0xe9
 800667c:	d009      	beq.n	8006692 <check_fs+0x66>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006684:	2beb      	cmp	r3, #235	; 0xeb
 8006686:	d11e      	bne.n	80066c6 <check_fs+0x9a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800668e:	2b90      	cmp	r3, #144	; 0x90
 8006690:	d119      	bne.n	80066c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3338      	adds	r3, #56	; 0x38
 8006696:	3336      	adds	r3, #54	; 0x36
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe f9b3 	bl	8004a04 <ld_dword>
 800669e:	4603      	mov	r3, r0
 80066a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066a4:	4a0a      	ldr	r2, [pc, #40]	; (80066d0 <check_fs+0xa4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d101      	bne.n	80066ae <check_fs+0x82>
 80066aa:	2300      	movs	r3, #0
 80066ac:	e00c      	b.n	80066c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3338      	adds	r3, #56	; 0x38
 80066b2:	3352      	adds	r3, #82	; 0x52
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe f9a5 	bl	8004a04 <ld_dword>
 80066ba:	4603      	mov	r3, r0
 80066bc:	4a05      	ldr	r2, [pc, #20]	; (80066d4 <check_fs+0xa8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <check_fs+0x9a>
 80066c2:	2300      	movs	r3, #0
 80066c4:	e000      	b.n	80066c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066c6:	2302      	movs	r3, #2
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	00544146 	.word	0x00544146
 80066d4:	33544146 	.word	0x33544146

080066d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b096      	sub	sp, #88	; 0x58
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ff59 	bl	80065a4 <get_ldnumber>
 80066f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da01      	bge.n	80066fe <find_volume+0x26>
 80066fa:	230b      	movs	r3, #11
 80066fc:	e268      	b.n	8006bd0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066fe:	4ab0      	ldr	r2, [pc, #704]	; (80069c0 <find_volume+0x2e8>)
 8006700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006706:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <find_volume+0x3a>
 800670e:	230c      	movs	r3, #12
 8006710:	e25e      	b.n	8006bd0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006716:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01a      	beq.n	800675e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe f8b3 	bl	8004898 <disk_status>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10c      	bne.n	800675e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <find_volume+0x82>
 800674a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006756:	230a      	movs	r3, #10
 8006758:	e23a      	b.n	8006bd0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800675a:	2300      	movs	r3, #0
 800675c:	e238      	b.n	8006bd0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006766:	b2da      	uxtb	r2, r3
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe f8ab 	bl	80048cc <disk_initialize>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800677c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006788:	2303      	movs	r3, #3
 800678a:	e221      	b.n	8006bd0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <find_volume+0xca>
 8006792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800679e:	230a      	movs	r3, #10
 80067a0:	e216      	b.n	8006bd0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	7858      	ldrb	r0, [r3, #1]
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	330c      	adds	r3, #12
 80067aa:	461a      	mov	r2, r3
 80067ac:	2102      	movs	r1, #2
 80067ae:	f7fe f8f3 	bl	8004998 <disk_ioctl>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <find_volume+0xe4>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e209      	b.n	8006bd0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	899b      	ldrh	r3, [r3, #12]
 80067c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c4:	d80d      	bhi.n	80067e2 <find_volume+0x10a>
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	899b      	ldrh	r3, [r3, #12]
 80067ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ce:	d308      	bcc.n	80067e2 <find_volume+0x10a>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	899b      	ldrh	r3, [r3, #12]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	899b      	ldrh	r3, [r3, #12]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4013      	ands	r3, r2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <find_volume+0x10e>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e1f4      	b.n	8006bd0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80067ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067ee:	f7ff ff1d 	bl	800662c <check_fs>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80067f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d14b      	bne.n	8006898 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006800:	2300      	movs	r3, #0
 8006802:	643b      	str	r3, [r7, #64]	; 0x40
 8006804:	e01f      	b.n	8006846 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800680c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006814:	4413      	add	r3, r2
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	3304      	adds	r3, #4
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <find_volume+0x158>
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	3308      	adds	r3, #8
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe f8ec 	bl	8004a04 <ld_dword>
 800682c:	4602      	mov	r2, r0
 800682e:	e000      	b.n	8006832 <find_volume+0x15a>
 8006830:	2200      	movs	r2, #0
 8006832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800683a:	440b      	add	r3, r1
 800683c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006842:	3301      	adds	r3, #1
 8006844:	643b      	str	r3, [r7, #64]	; 0x40
 8006846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006848:	2b03      	cmp	r3, #3
 800684a:	d9dc      	bls.n	8006806 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800684c:	2300      	movs	r3, #0
 800684e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <find_volume+0x184>
 8006856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006858:	3b01      	subs	r3, #1
 800685a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800685c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006864:	4413      	add	r3, r2
 8006866:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800686a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <find_volume+0x1a6>
 8006872:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006876:	f7ff fed9 	bl	800662c <check_fs>
 800687a:	4603      	mov	r3, r0
 800687c:	e000      	b.n	8006880 <find_volume+0x1a8>
 800687e:	2303      	movs	r3, #3
 8006880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006888:	2b01      	cmp	r3, #1
 800688a:	d905      	bls.n	8006898 <find_volume+0x1c0>
 800688c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800688e:	3301      	adds	r3, #1
 8006890:	643b      	str	r3, [r7, #64]	; 0x40
 8006892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006894:	2b03      	cmp	r3, #3
 8006896:	d9e1      	bls.n	800685c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800689c:	2b04      	cmp	r3, #4
 800689e:	d101      	bne.n	80068a4 <find_volume+0x1cc>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e195      	b.n	8006bd0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d901      	bls.n	80068b0 <find_volume+0x1d8>
 80068ac:	230d      	movs	r3, #13
 80068ae:	e18f      	b.n	8006bd0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	3338      	adds	r3, #56	; 0x38
 80068b4:	330b      	adds	r3, #11
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe f88c 	bl	80049d4 <ld_word>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	899b      	ldrh	r3, [r3, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d001      	beq.n	80068cc <find_volume+0x1f4>
 80068c8:	230d      	movs	r3, #13
 80068ca:	e181      	b.n	8006bd0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	3338      	adds	r3, #56	; 0x38
 80068d0:	3316      	adds	r3, #22
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe f87e 	bl	80049d4 <ld_word>
 80068d8:	4603      	mov	r3, r0
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80068dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <find_volume+0x218>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	3338      	adds	r3, #56	; 0x38
 80068e6:	3324      	adds	r3, #36	; 0x24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe f88b 	bl	8004a04 <ld_dword>
 80068ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	789b      	ldrb	r3, [r3, #2]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d005      	beq.n	8006914 <find_volume+0x23c>
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	789b      	ldrb	r3, [r3, #2]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d001      	beq.n	8006914 <find_volume+0x23c>
 8006910:	230d      	movs	r3, #13
 8006912:	e15d      	b.n	8006bd0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	789b      	ldrb	r3, [r3, #2]
 8006918:	461a      	mov	r2, r3
 800691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006928:	b29a      	uxth	r2, r3
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	895b      	ldrh	r3, [r3, #10]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <find_volume+0x270>
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	895b      	ldrh	r3, [r3, #10]
 800693a:	461a      	mov	r2, r3
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	895b      	ldrh	r3, [r3, #10]
 8006940:	3b01      	subs	r3, #1
 8006942:	4013      	ands	r3, r2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <find_volume+0x274>
 8006948:	230d      	movs	r3, #13
 800694a:	e141      	b.n	8006bd0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	3338      	adds	r3, #56	; 0x38
 8006950:	3311      	adds	r3, #17
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe f83e 	bl	80049d4 <ld_word>
 8006958:	4603      	mov	r3, r0
 800695a:	461a      	mov	r2, r3
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	891b      	ldrh	r3, [r3, #8]
 8006964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006966:	8992      	ldrh	r2, [r2, #12]
 8006968:	0952      	lsrs	r2, r2, #5
 800696a:	b292      	uxth	r2, r2
 800696c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006970:	fb02 f201 	mul.w	r2, r2, r1
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <find_volume+0x2a8>
 800697c:	230d      	movs	r3, #13
 800697e:	e127      	b.n	8006bd0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	3338      	adds	r3, #56	; 0x38
 8006984:	3313      	adds	r3, #19
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe f824 	bl	80049d4 <ld_word>
 800698c:	4603      	mov	r3, r0
 800698e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <find_volume+0x2cc>
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	3338      	adds	r3, #56	; 0x38
 800699a:	3320      	adds	r3, #32
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe f831 	bl	8004a04 <ld_dword>
 80069a2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	3338      	adds	r3, #56	; 0x38
 80069a8:	330e      	adds	r3, #14
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe f812 	bl	80049d4 <ld_word>
 80069b0:	4603      	mov	r3, r0
 80069b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <find_volume+0x2ec>
 80069ba:	230d      	movs	r3, #13
 80069bc:	e108      	b.n	8006bd0 <find_volume+0x4f8>
 80069be:	bf00      	nop
 80069c0:	200000b4 	.word	0x200000b4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c8:	4413      	add	r3, r2
 80069ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069cc:	8911      	ldrh	r1, [r2, #8]
 80069ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d0:	8992      	ldrh	r2, [r2, #12]
 80069d2:	0952      	lsrs	r2, r2, #5
 80069d4:	b292      	uxth	r2, r2
 80069d6:	fbb1 f2f2 	udiv	r2, r1, r2
 80069da:	b292      	uxth	r2, r2
 80069dc:	4413      	add	r3, r2
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80069e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d201      	bcs.n	80069ec <find_volume+0x314>
 80069e8:	230d      	movs	r3, #13
 80069ea:	e0f1      	b.n	8006bd0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80069ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f4:	8952      	ldrh	r2, [r2, #10]
 80069f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <find_volume+0x32e>
 8006a02:	230d      	movs	r3, #13
 8006a04:	e0e4      	b.n	8006bd0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006a06:	2303      	movs	r3, #3
 8006a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d802      	bhi.n	8006a1c <find_volume+0x344>
 8006a16:	2302      	movs	r3, #2
 8006a18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d802      	bhi.n	8006a2c <find_volume+0x354>
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3e:	441a      	add	r2, r3
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	441a      	add	r2, r3
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006a4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d11e      	bne.n	8006a94 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	3338      	adds	r3, #56	; 0x38
 8006a5a:	332a      	adds	r3, #42	; 0x2a
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fd ffb9 	bl	80049d4 <ld_word>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <find_volume+0x394>
 8006a68:	230d      	movs	r3, #13
 8006a6a:	e0b1      	b.n	8006bd0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	891b      	ldrh	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <find_volume+0x3a0>
 8006a74:	230d      	movs	r3, #13
 8006a76:	e0ab      	b.n	8006bd0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	3338      	adds	r3, #56	; 0x38
 8006a7c:	332c      	adds	r3, #44	; 0x2c
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fd ffc0 	bl	8004a04 <ld_dword>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	647b      	str	r3, [r7, #68]	; 0x44
 8006a92:	e01f      	b.n	8006ad4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	891b      	ldrh	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <find_volume+0x3c8>
 8006a9c:	230d      	movs	r3, #13
 8006a9e:	e097      	b.n	8006bd0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	441a      	add	r2, r3
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d103      	bne.n	8006abc <find_volume+0x3e4>
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	e00a      	b.n	8006ad2 <find_volume+0x3fa>
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	4413      	add	r3, r2
 8006ac6:	085a      	lsrs	r2, r3, #1
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006ad2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	6a1a      	ldr	r2, [r3, #32]
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	899b      	ldrh	r3, [r3, #12]
 8006adc:	4619      	mov	r1, r3
 8006ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae6:	8989      	ldrh	r1, [r1, #12]
 8006ae8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d201      	bcs.n	8006af4 <find_volume+0x41c>
 8006af0:	230d      	movs	r3, #13
 8006af2:	e06d      	b.n	8006bd0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	f04f 32ff 	mov.w	r2, #4294967295
 8006afa:	619a      	str	r2, [r3, #24]
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	2280      	movs	r2, #128	; 0x80
 8006b08:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d149      	bne.n	8006ba6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	3338      	adds	r3, #56	; 0x38
 8006b16:	3330      	adds	r3, #48	; 0x30
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd ff5b 	bl	80049d4 <ld_word>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d140      	bne.n	8006ba6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b26:	3301      	adds	r3, #1
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b2c:	f7fe fa02 	bl	8004f34 <move_window>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d137      	bne.n	8006ba6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	2200      	movs	r2, #0
 8006b3a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	3338      	adds	r3, #56	; 0x38
 8006b40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fd ff45 	bl	80049d4 <ld_word>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d127      	bne.n	8006ba6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	3338      	adds	r3, #56	; 0x38
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fd ff52 	bl	8004a04 <ld_dword>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <find_volume+0x500>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d11e      	bne.n	8006ba6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	3338      	adds	r3, #56	; 0x38
 8006b6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fd ff47 	bl	8004a04 <ld_dword>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4a18      	ldr	r2, [pc, #96]	; (8006bdc <find_volume+0x504>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d113      	bne.n	8006ba6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	3338      	adds	r3, #56	; 0x38
 8006b82:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fd ff3c 	bl	8004a04 <ld_dword>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	3338      	adds	r3, #56	; 0x38
 8006b96:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fd ff32 	bl	8004a04 <ld_dword>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006bac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <find_volume+0x508>)
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <find_volume+0x508>)
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <find_volume+0x508>)
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <find_volume+0x50c>)
 8006bc6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006bc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bca:	f7fe f94b 	bl	8004e64 <clear_lock>
#endif
	return FR_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3758      	adds	r7, #88	; 0x58
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	41615252 	.word	0x41615252
 8006bdc:	61417272 	.word	0x61417272
 8006be0:	200000b8 	.word	0x200000b8
 8006be4:	200000dc 	.word	0x200000dc

08006be8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006bf2:	2309      	movs	r3, #9
 8006bf4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01c      	beq.n	8006c36 <validate+0x4e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d018      	beq.n	8006c36 <validate+0x4e>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d013      	beq.n	8006c36 <validate+0x4e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	889a      	ldrh	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	88db      	ldrh	r3, [r3, #6]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d10c      	bne.n	8006c36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fd fe38 	bl	8004898 <disk_status>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <validate+0x4e>
			res = FR_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <validate+0x5a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	e000      	b.n	8006c44 <validate+0x5c>
 8006c42:	2300      	movs	r3, #0
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	6013      	str	r3, [r2, #0]
	return res;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c66:	f107 0310 	add.w	r3, r7, #16
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fc9a 	bl	80065a4 <get_ldnumber>
 8006c70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da01      	bge.n	8006c7c <f_mount+0x28>
 8006c78:	230b      	movs	r3, #11
 8006c7a:	e02b      	b.n	8006cd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c7c:	4a17      	ldr	r2, [pc, #92]	; (8006cdc <f_mount+0x88>)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006c8c:	69b8      	ldr	r0, [r7, #24]
 8006c8e:	f7fe f8e9 	bl	8004e64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	490d      	ldr	r1, [pc, #52]	; (8006cdc <f_mount+0x88>)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <f_mount+0x66>
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d001      	beq.n	8006cbe <f_mount+0x6a>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e00a      	b.n	8006cd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006cbe:	f107 010c 	add.w	r1, r7, #12
 8006cc2:	f107 0308 	add.w	r3, r7, #8
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff fd05 	bl	80066d8 <find_volume>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	200000b4 	.word	0x200000b4

08006ce0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b09a      	sub	sp, #104	; 0x68
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <f_open+0x18>
 8006cf4:	2309      	movs	r3, #9
 8006cf6:	e1bb      	b.n	8007070 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d00:	79fa      	ldrb	r2, [r7, #7]
 8006d02:	f107 0114 	add.w	r1, r7, #20
 8006d06:	f107 0308 	add.w	r3, r7, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff fce4 	bl	80066d8 <find_volume>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006d16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 819f 	bne.w	800705e <f_open+0x37e>
		dj.obj.fs = fs;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	f107 0318 	add.w	r3, r7, #24
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fbc3 	bl	80064b8 <follow_path>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11a      	bne.n	8006d76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da03      	bge.n	8006d52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d4a:	2306      	movs	r3, #6
 8006d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006d50:	e011      	b.n	8006d76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bf14      	ite	ne
 8006d5c:	2301      	movne	r3, #1
 8006d5e:	2300      	moveq	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	f107 0318 	add.w	r3, r7, #24
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fd ff32 	bl	8004bd4 <chk_lock>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	f003 031c 	and.w	r3, r3, #28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d07f      	beq.n	8006e80 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006d80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d017      	beq.n	8006db8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d10e      	bne.n	8006dae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d90:	f7fd ff7c 	bl	8004c8c <enq_lock>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d006      	beq.n	8006da8 <f_open+0xc8>
 8006d9a:	f107 0318 	add.w	r3, r7, #24
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff f8da 	bl	8005f58 <dir_register>
 8006da4:	4603      	mov	r3, r0
 8006da6:	e000      	b.n	8006daa <f_open+0xca>
 8006da8:	2312      	movs	r3, #18
 8006daa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	f043 0308 	orr.w	r3, r3, #8
 8006db4:	71fb      	strb	r3, [r7, #7]
 8006db6:	e010      	b.n	8006dda <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006db8:	7fbb      	ldrb	r3, [r7, #30]
 8006dba:	f003 0311 	and.w	r3, r3, #17
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <f_open+0xea>
					res = FR_DENIED;
 8006dc2:	2307      	movs	r3, #7
 8006dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006dc8:	e007      	b.n	8006dda <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <f_open+0xfa>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d168      	bne.n	8006eb4 <f_open+0x1d4>
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d063      	beq.n	8006eb4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006dec:	f7fd fb20 	bl	8004430 <get_fattime>
 8006df0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	330e      	adds	r3, #14
 8006df6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fd fe41 	bl	8004a80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	3316      	adds	r3, #22
 8006e02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fd fe3b 	bl	8004a80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	330b      	adds	r3, #11
 8006e0e:	2220      	movs	r2, #32
 8006e10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e16:	4611      	mov	r1, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fe13 	bl	8005a44 <ld_clust>
 8006e1e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e24:	2200      	movs	r2, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe fe2b 	bl	8005a82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	331c      	adds	r3, #28
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fd fe24 	bl	8004a80 <st_dword>
					fs->wflag = 1;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d037      	beq.n	8006eb4 <f_open+0x1d4>
						dw = fs->winsect;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006e4a:	f107 0318 	add.w	r3, r7, #24
 8006e4e:	2200      	movs	r2, #0
 8006e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fb1b 	bl	800548e <remove_chain>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006e5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d126      	bne.n	8006eb4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe f862 	bl	8004f34 <move_window>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e7a:	3a01      	subs	r2, #1
 8006e7c:	615a      	str	r2, [r3, #20]
 8006e7e:	e019      	b.n	8006eb4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d115      	bne.n	8006eb4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e88:	7fbb      	ldrb	r3, [r7, #30]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006e92:	2304      	movs	r3, #4
 8006e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006e98:	e00c      	b.n	8006eb4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <f_open+0x1d4>
 8006ea4:	7fbb      	ldrb	r3, [r7, #30]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <f_open+0x1d4>
						res = FR_DENIED;
 8006eae:	2307      	movs	r3, #7
 8006eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006eb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d128      	bne.n	8006f0e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ecc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf14      	ite	ne
 8006ee6:	2301      	movne	r3, #1
 8006ee8:	2300      	moveq	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	f107 0318 	add.w	r3, r7, #24
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fd feeb 	bl	8004cd0 <inc_lock>
 8006efa:	4602      	mov	r2, r0
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <f_open+0x22e>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 80a3 	bne.w	800705e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fd90 	bl	8005a44 <ld_clust>
 8006f24:	4602      	mov	r2, r0
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	331c      	adds	r3, #28
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fd fd68 	bl	8004a04 <ld_dword>
 8006f34:	4602      	mov	r2, r0
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	88da      	ldrh	r2, [r3, #6]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	79fa      	ldrb	r2, [r7, #7]
 8006f52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3330      	adds	r3, #48	; 0x30
 8006f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fd fdd2 	bl	8004b1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d06e      	beq.n	800705e <f_open+0x37e>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d06a      	beq.n	800705e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	895b      	ldrh	r3, [r3, #10]
 8006f94:	461a      	mov	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	899b      	ldrh	r3, [r3, #12]
 8006f9a:	fb03 f302 	mul.w	r3, r3, r2
 8006f9e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fac:	e016      	b.n	8006fdc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe f87b 	bl	80050ae <get_fat>
 8006fb8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d802      	bhi.n	8006fc6 <f_open+0x2e6>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d102      	bne.n	8006fd4 <f_open+0x2f4>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d103      	bne.n	8006fec <f_open+0x30c>
 8006fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d8e0      	bhi.n	8006fae <f_open+0x2ce>
				}
				fp->clust = clst;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ff0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006ff2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d131      	bne.n	800705e <f_open+0x37e>
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	899b      	ldrh	r3, [r3, #12]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007002:	fbb3 f1f2 	udiv	r1, r3, r2
 8007006:	fb02 f201 	mul.w	r2, r2, r1
 800700a:	1a9b      	subs	r3, r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d026      	beq.n	800705e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe f82b 	bl	8005070 <clust2sect>
 800701a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800701c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <f_open+0x34a>
						res = FR_INT_ERR;
 8007022:	2302      	movs	r3, #2
 8007024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007028:	e019      	b.n	800705e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	899b      	ldrh	r3, [r3, #12]
 800702e:	461a      	mov	r2, r3
 8007030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007032:	fbb3 f2f2 	udiv	r2, r3, r2
 8007036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007038:	441a      	add	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	7858      	ldrb	r0, [r3, #1]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	2301      	movs	r3, #1
 800704e:	f7fd fc63 	bl	8004918 <disk_read>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <f_open+0x37e>
 8007058:	2301      	movs	r3, #1
 800705a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800705e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <f_open+0x38c>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800706c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007070:	4618      	mov	r0, r3
 8007072:	3768      	adds	r7, #104	; 0x68
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08e      	sub	sp, #56	; 0x38
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f107 0214 	add.w	r2, r7, #20
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fda5 	bl	8006be8 <validate>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d107      	bne.n	80070bc <f_read+0x44>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	7d5b      	ldrb	r3, [r3, #21]
 80070b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80070b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <f_read+0x4a>
 80070bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070c0:	e135      	b.n	800732e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	7d1b      	ldrb	r3, [r3, #20]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <f_read+0x5a>
 80070ce:	2307      	movs	r3, #7
 80070d0:	e12d      	b.n	800732e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	f240 811e 	bls.w	8007324 <f_read+0x2ac>
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80070ec:	e11a      	b.n	8007324 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	8992      	ldrh	r2, [r2, #12]
 80070f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80070fa:	fb02 f201 	mul.w	r2, r2, r1
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 80d5 	bne.w	80072b0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	8992      	ldrh	r2, [r2, #12]
 800710e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	8952      	ldrh	r2, [r2, #10]
 8007116:	3a01      	subs	r2, #1
 8007118:	4013      	ands	r3, r2
 800711a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d12f      	bne.n	8007182 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d103      	bne.n	8007132 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	633b      	str	r3, [r7, #48]	; 0x30
 8007130:	e013      	b.n	800715a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	4619      	mov	r1, r3
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7fe faa1 	bl	8005688 <clmt_clust>
 8007146:	6338      	str	r0, [r7, #48]	; 0x30
 8007148:	e007      	b.n	800715a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fd ffab 	bl	80050ae <get_fat>
 8007158:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2b01      	cmp	r3, #1
 800715e:	d804      	bhi.n	800716a <f_read+0xf2>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2202      	movs	r2, #2
 8007164:	755a      	strb	r2, [r3, #21]
 8007166:	2302      	movs	r3, #2
 8007168:	e0e1      	b.n	800732e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d104      	bne.n	800717c <f_read+0x104>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	755a      	strb	r2, [r3, #21]
 8007178:	2301      	movs	r3, #1
 800717a:	e0d8      	b.n	800732e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007180:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7fd ff70 	bl	8005070 <clust2sect>
 8007190:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <f_read+0x12a>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2202      	movs	r2, #2
 800719c:	755a      	strb	r2, [r3, #21]
 800719e:	2302      	movs	r3, #2
 80071a0:	e0c5      	b.n	800732e <f_read+0x2b6>
			sect += csect;
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	899b      	ldrh	r3, [r3, #12]
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d041      	beq.n	8007242 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	4413      	add	r3, r2
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	8952      	ldrh	r2, [r2, #10]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d905      	bls.n	80071d8 <f_read+0x160>
					cc = fs->csize - csect;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	895b      	ldrh	r3, [r3, #10]
 80071d0:	461a      	mov	r2, r3
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	7858      	ldrb	r0, [r3, #1]
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071e2:	f7fd fb99 	bl	8004918 <disk_read>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <f_read+0x17e>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2201      	movs	r2, #1
 80071f0:	755a      	strb	r2, [r3, #21]
 80071f2:	2301      	movs	r3, #1
 80071f4:	e09b      	b.n	800732e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	7d1b      	ldrb	r3, [r3, #20]
 80071fa:	b25b      	sxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	da18      	bge.n	8007232 <f_read+0x1ba>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1a      	ldr	r2, [r3, #32]
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800720a:	429a      	cmp	r2, r3
 800720c:	d911      	bls.n	8007232 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	8992      	ldrh	r2, [r2, #12]
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007220:	18d0      	adds	r0, r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	899b      	ldrh	r3, [r3, #12]
 800722c:	461a      	mov	r2, r3
 800722e:	f7fd fc53 	bl	8004ad8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	899b      	ldrh	r3, [r3, #12]
 8007236:	461a      	mov	r2, r3
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007240:	e05c      	b.n	80072fc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	d02e      	beq.n	80072aa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	7d1b      	ldrb	r3, [r3, #20]
 8007250:	b25b      	sxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	da18      	bge.n	8007288 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	7858      	ldrb	r0, [r3, #1]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1a      	ldr	r2, [r3, #32]
 8007264:	2301      	movs	r3, #1
 8007266:	f7fd fb77 	bl	8004958 <disk_write>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d004      	beq.n	800727a <f_read+0x202>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	755a      	strb	r2, [r3, #21]
 8007276:	2301      	movs	r3, #1
 8007278:	e059      	b.n	800732e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	7d1b      	ldrb	r3, [r3, #20]
 800727e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	7858      	ldrb	r0, [r3, #1]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007292:	2301      	movs	r3, #1
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	f7fd fb3f 	bl	8004918 <disk_read>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d004      	beq.n	80072aa <f_read+0x232>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	755a      	strb	r2, [r3, #21]
 80072a6:	2301      	movs	r3, #1
 80072a8:	e041      	b.n	800732e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	899b      	ldrh	r3, [r3, #12]
 80072b4:	4618      	mov	r0, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	8992      	ldrh	r2, [r2, #12]
 80072be:	fbb3 f1f2 	udiv	r1, r3, r2
 80072c2:	fb02 f201 	mul.w	r2, r2, r1
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	1ac3      	subs	r3, r0, r3
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80072cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d901      	bls.n	80072d8 <f_read+0x260>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	8992      	ldrh	r2, [r2, #12]
 80072e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80072ea:	fb02 f200 	mul.w	r2, r2, r0
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	440b      	add	r3, r1
 80072f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f4:	4619      	mov	r1, r3
 80072f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f8:	f7fd fbee 	bl	8004ad8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80072fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	4413      	add	r3, r2
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	699a      	ldr	r2, [r3, #24]
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	441a      	add	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	619a      	str	r2, [r3, #24]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	441a      	add	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f47f aee1 	bne.w	80070ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3738      	adds	r7, #56	; 0x38
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b08c      	sub	sp, #48	; 0x30
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f107 0210 	add.w	r2, r7, #16
 8007354:	4611      	mov	r1, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fc46 	bl	8006be8 <validate>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007366:	2b00      	cmp	r3, #0
 8007368:	d107      	bne.n	800737a <f_write+0x44>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	7d5b      	ldrb	r3, [r3, #21]
 800736e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <f_write+0x4a>
 800737a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800737e:	e16a      	b.n	8007656 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	7d1b      	ldrb	r3, [r3, #20]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <f_write+0x5a>
 800738c:	2307      	movs	r3, #7
 800738e:	e162      	b.n	8007656 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	441a      	add	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	429a      	cmp	r2, r3
 800739e:	f080 814c 	bcs.w	800763a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	43db      	mvns	r3, r3
 80073a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80073aa:	e146      	b.n	800763a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	8992      	ldrh	r2, [r2, #12]
 80073b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b8:	fb02 f201 	mul.w	r2, r2, r1
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f040 80f1 	bne.w	80075a6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	8992      	ldrh	r2, [r2, #12]
 80073cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	8952      	ldrh	r2, [r2, #10]
 80073d4:	3a01      	subs	r2, #1
 80073d6:	4013      	ands	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d143      	bne.n	8007468 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10c      	bne.n	8007402 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11a      	bne.n	800742a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe f8ad 	bl	8005558 <create_chain>
 80073fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8007400:	e013      	b.n	800742a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	4619      	mov	r1, r3
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7fe f939 	bl	8005688 <clmt_clust>
 8007416:	62b8      	str	r0, [r7, #40]	; 0x28
 8007418:	e007      	b.n	800742a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fe f898 	bl	8005558 <create_chain>
 8007428:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8109 	beq.w	8007644 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	2b01      	cmp	r3, #1
 8007436:	d104      	bne.n	8007442 <f_write+0x10c>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2202      	movs	r2, #2
 800743c:	755a      	strb	r2, [r3, #21]
 800743e:	2302      	movs	r3, #2
 8007440:	e109      	b.n	8007656 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d104      	bne.n	8007454 <f_write+0x11e>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	755a      	strb	r2, [r3, #21]
 8007450:	2301      	movs	r3, #1
 8007452:	e100      	b.n	8007656 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007458:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <f_write+0x132>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007466:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	7d1b      	ldrb	r3, [r3, #20]
 800746c:	b25b      	sxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	da18      	bge.n	80074a4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	7858      	ldrb	r0, [r3, #1]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a1a      	ldr	r2, [r3, #32]
 8007480:	2301      	movs	r3, #1
 8007482:	f7fd fa69 	bl	8004958 <disk_write>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <f_write+0x160>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	755a      	strb	r2, [r3, #21]
 8007492:	2301      	movs	r3, #1
 8007494:	e0df      	b.n	8007656 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	7d1b      	ldrb	r3, [r3, #20]
 800749a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fd fddf 	bl	8005070 <clust2sect>
 80074b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d104      	bne.n	80074c4 <f_write+0x18e>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2202      	movs	r2, #2
 80074be:	755a      	strb	r2, [r3, #21]
 80074c0:	2302      	movs	r3, #2
 80074c2:	e0c8      	b.n	8007656 <f_write+0x320>
			sect += csect;
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	4413      	add	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	899b      	ldrh	r3, [r3, #12]
 80074d0:	461a      	mov	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d043      	beq.n	8007568 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	4413      	add	r3, r2
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	8952      	ldrh	r2, [r2, #10]
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d905      	bls.n	80074fa <f_write+0x1c4>
					cc = fs->csize - csect;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	895b      	ldrh	r3, [r3, #10]
 80074f2:	461a      	mov	r2, r3
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	7858      	ldrb	r0, [r3, #1]
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	69f9      	ldr	r1, [r7, #28]
 8007504:	f7fd fa28 	bl	8004958 <disk_write>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <f_write+0x1e2>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	755a      	strb	r2, [r3, #21]
 8007514:	2301      	movs	r3, #1
 8007516:	e09e      	b.n	8007656 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	429a      	cmp	r2, r3
 8007524:	d918      	bls.n	8007558 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	8992      	ldrh	r2, [r2, #12]
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	18d1      	adds	r1, r2, r3
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	899b      	ldrh	r3, [r3, #12]
 8007544:	461a      	mov	r2, r3
 8007546:	f7fd fac7 	bl	8004ad8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	7d1b      	ldrb	r3, [r3, #20]
 800754e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007552:	b2da      	uxtb	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	899b      	ldrh	r3, [r3, #12]
 800755c:	461a      	mov	r2, r3
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007566:	e04b      	b.n	8007600 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	429a      	cmp	r2, r3
 8007570:	d016      	beq.n	80075a0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800757a:	429a      	cmp	r2, r3
 800757c:	d210      	bcs.n	80075a0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	7858      	ldrb	r0, [r3, #1]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007588:	2301      	movs	r3, #1
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	f7fd f9c4 	bl	8004918 <disk_read>
 8007590:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	755a      	strb	r2, [r3, #21]
 800759c:	2301      	movs	r3, #1
 800759e:	e05a      	b.n	8007656 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	899b      	ldrh	r3, [r3, #12]
 80075aa:	4618      	mov	r0, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	8992      	ldrh	r2, [r2, #12]
 80075b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80075b8:	fb02 f201 	mul.w	r2, r2, r1
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	1ac3      	subs	r3, r0, r3
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80075c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d901      	bls.n	80075ce <f_write+0x298>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	8992      	ldrh	r2, [r2, #12]
 80075dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80075e0:	fb02 f200 	mul.w	r2, r2, r0
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	440b      	add	r3, r1
 80075e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ea:	69f9      	ldr	r1, [r7, #28]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fa73 	bl	8004ad8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	7d1b      	ldrb	r3, [r3, #20]
 80075f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	4413      	add	r3, r2
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	441a      	add	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	619a      	str	r2, [r3, #24]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	429a      	cmp	r2, r3
 800761e:	bf38      	it	cc
 8007620:	461a      	movcc	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	441a      	add	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f47f aeb5 	bne.w	80073ac <f_write+0x76>
 8007642:	e000      	b.n	8007646 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007644:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7d1b      	ldrb	r3, [r3, #20]
 800764a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800764e:	b2da      	uxtb	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3730      	adds	r7, #48	; 0x30
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b086      	sub	sp, #24
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f107 0208 	add.w	r2, r7, #8
 800766c:	4611      	mov	r1, r2
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff faba 	bl	8006be8 <validate>
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d168      	bne.n	8007750 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	7d1b      	ldrb	r3, [r3, #20]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d062      	beq.n	8007750 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	7d1b      	ldrb	r3, [r3, #20]
 800768e:	b25b      	sxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	da15      	bge.n	80076c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	7858      	ldrb	r0, [r3, #1]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1a      	ldr	r2, [r3, #32]
 80076a2:	2301      	movs	r3, #1
 80076a4:	f7fd f958 	bl	8004958 <disk_write>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <f_sync+0x54>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e04f      	b.n	8007752 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7d1b      	ldrb	r3, [r3, #20]
 80076b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80076c0:	f7fc feb6 	bl	8004430 <get_fattime>
 80076c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7fd fc30 	bl	8004f34 <move_window>
 80076d4:	4603      	mov	r3, r0
 80076d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d138      	bne.n	8007750 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	330b      	adds	r3, #11
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	330b      	adds	r3, #11
 80076ee:	f042 0220 	orr.w	r2, r2, #32
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	461a      	mov	r2, r3
 8007700:	68f9      	ldr	r1, [r7, #12]
 8007702:	f7fe f9be 	bl	8005a82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f103 021c 	add.w	r2, r3, #28
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7fd f9b4 	bl	8004a80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3316      	adds	r3, #22
 800771c:	6939      	ldr	r1, [r7, #16]
 800771e:	4618      	mov	r0, r3
 8007720:	f7fd f9ae 	bl	8004a80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3312      	adds	r3, #18
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd f98d 	bl	8004a4a <st_word>
					fs->wflag = 1;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2201      	movs	r2, #1
 8007734:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4618      	mov	r0, r3
 800773a:	f7fd fc29 	bl	8004f90 <sync_fs>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7d1b      	ldrb	r3, [r3, #20]
 8007746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800774a:	b2da      	uxtb	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007750:	7dfb      	ldrb	r3, [r7, #23]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ff7b 	bl	800765e <f_sync>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d118      	bne.n	80077a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f107 0208 	add.w	r2, r7, #8
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fa34 	bl	8006be8 <validate>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10c      	bne.n	80077a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fd fb2c 	bl	8004dec <dec_lock>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077c6:	4b1f      	ldr	r3, [pc, #124]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 80077c8:	7a5b      	ldrb	r3, [r3, #9]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d131      	bne.n	8007834 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077d0:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 80077d2:	7a5b      	ldrb	r3, [r3, #9]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	461a      	mov	r2, r3
 80077d8:	4b1a      	ldr	r3, [pc, #104]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 80077da:	2100      	movs	r1, #0
 80077dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077de:	4b19      	ldr	r3, [pc, #100]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 80077e0:	7a5b      	ldrb	r3, [r3, #9]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	4a17      	ldr	r2, [pc, #92]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077ee:	4b15      	ldr	r3, [pc, #84]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 80077f0:	7a5b      	ldrb	r3, [r3, #9]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 80077f8:	4413      	add	r3, r2
 80077fa:	79fa      	ldrb	r2, [r7, #7]
 80077fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077fe:	4b11      	ldr	r3, [pc, #68]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 8007800:	7a5b      	ldrb	r3, [r3, #9]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	b2d1      	uxtb	r1, r2
 8007808:	4a0e      	ldr	r2, [pc, #56]	; (8007844 <FATFS_LinkDriverEx+0x94>)
 800780a:	7251      	strb	r1, [r2, #9]
 800780c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800780e:	7dbb      	ldrb	r3, [r7, #22]
 8007810:	3330      	adds	r3, #48	; 0x30
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3301      	adds	r3, #1
 800781c:	223a      	movs	r2, #58	; 0x3a
 800781e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	3302      	adds	r3, #2
 8007824:	222f      	movs	r2, #47	; 0x2f
 8007826:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3303      	adds	r3, #3
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
}
 8007836:	4618      	mov	r0, r3
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	200002dc 	.word	0x200002dc

08007848 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007852:	2200      	movs	r2, #0
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ffaa 	bl	80077b0 <FATFS_LinkDriverEx>
 800785c:	4603      	mov	r3, r0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	2b7f      	cmp	r3, #127	; 0x7f
 8007878:	d802      	bhi.n	8007880 <ff_convert+0x18>
		c = chr;
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	81fb      	strh	r3, [r7, #14]
 800787e:	e025      	b.n	80078cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	2bff      	cmp	r3, #255	; 0xff
 800788a:	d805      	bhi.n	8007898 <ff_convert+0x30>
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	3b80      	subs	r3, #128	; 0x80
 8007890:	4a12      	ldr	r2, [pc, #72]	; (80078dc <ff_convert+0x74>)
 8007892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007896:	e000      	b.n	800789a <ff_convert+0x32>
 8007898:	2300      	movs	r3, #0
 800789a:	81fb      	strh	r3, [r7, #14]
 800789c:	e016      	b.n	80078cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800789e:	2300      	movs	r3, #0
 80078a0:	81fb      	strh	r3, [r7, #14]
 80078a2:	e009      	b.n	80078b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80078a4:	89fb      	ldrh	r3, [r7, #14]
 80078a6:	4a0d      	ldr	r2, [pc, #52]	; (80078dc <ff_convert+0x74>)
 80078a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ac:	88fa      	ldrh	r2, [r7, #6]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d006      	beq.n	80078c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80078b2:	89fb      	ldrh	r3, [r7, #14]
 80078b4:	3301      	adds	r3, #1
 80078b6:	81fb      	strh	r3, [r7, #14]
 80078b8:	89fb      	ldrh	r3, [r7, #14]
 80078ba:	2b7f      	cmp	r3, #127	; 0x7f
 80078bc:	d9f2      	bls.n	80078a4 <ff_convert+0x3c>
 80078be:	e000      	b.n	80078c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80078c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80078c2:	89fb      	ldrh	r3, [r7, #14]
 80078c4:	3380      	adds	r3, #128	; 0x80
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80078cc:	89fb      	ldrh	r3, [r7, #14]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	08008b90 	.word	0x08008b90

080078e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f0:	d201      	bcs.n	80078f6 <ff_wtoupper+0x16>
 80078f2:	4b3e      	ldr	r3, [pc, #248]	; (80079ec <ff_wtoupper+0x10c>)
 80078f4:	e000      	b.n	80078f8 <ff_wtoupper+0x18>
 80078f6:	4b3e      	ldr	r3, [pc, #248]	; (80079f0 <ff_wtoupper+0x110>)
 80078f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	617a      	str	r2, [r7, #20]
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007904:	8a7b      	ldrh	r3, [r7, #18]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d068      	beq.n	80079dc <ff_wtoupper+0xfc>
 800790a:	88fa      	ldrh	r2, [r7, #6]
 800790c:	8a7b      	ldrh	r3, [r7, #18]
 800790e:	429a      	cmp	r2, r3
 8007910:	d364      	bcc.n	80079dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	1c9a      	adds	r2, r3, #2
 8007916:	617a      	str	r2, [r7, #20]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	823b      	strh	r3, [r7, #16]
 800791c:	8a3b      	ldrh	r3, [r7, #16]
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	81fb      	strh	r3, [r7, #14]
 8007922:	8a3b      	ldrh	r3, [r7, #16]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007928:	88fa      	ldrh	r2, [r7, #6]
 800792a:	8a79      	ldrh	r1, [r7, #18]
 800792c:	8a3b      	ldrh	r3, [r7, #16]
 800792e:	440b      	add	r3, r1
 8007930:	429a      	cmp	r2, r3
 8007932:	da49      	bge.n	80079c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007934:	89fb      	ldrh	r3, [r7, #14]
 8007936:	2b08      	cmp	r3, #8
 8007938:	d84f      	bhi.n	80079da <ff_wtoupper+0xfa>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <ff_wtoupper+0x60>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007965 	.word	0x08007965
 8007944:	08007977 	.word	0x08007977
 8007948:	0800798d 	.word	0x0800798d
 800794c:	08007995 	.word	0x08007995
 8007950:	0800799d 	.word	0x0800799d
 8007954:	080079a5 	.word	0x080079a5
 8007958:	080079ad 	.word	0x080079ad
 800795c:	080079b5 	.word	0x080079b5
 8007960:	080079bd 	.word	0x080079bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	8a7b      	ldrh	r3, [r7, #18]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	80fb      	strh	r3, [r7, #6]
 8007974:	e027      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007976:	88fa      	ldrh	r2, [r7, #6]
 8007978:	8a7b      	ldrh	r3, [r7, #18]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	b29b      	uxth	r3, r3
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	b29b      	uxth	r3, r3
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	80fb      	strh	r3, [r7, #6]
 800798a:	e01c      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	3b10      	subs	r3, #16
 8007990:	80fb      	strh	r3, [r7, #6]
 8007992:	e018      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	3b20      	subs	r3, #32
 8007998:	80fb      	strh	r3, [r7, #6]
 800799a:	e014      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	3b30      	subs	r3, #48	; 0x30
 80079a0:	80fb      	strh	r3, [r7, #6]
 80079a2:	e010      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	3b1a      	subs	r3, #26
 80079a8:	80fb      	strh	r3, [r7, #6]
 80079aa:	e00c      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	3308      	adds	r3, #8
 80079b0:	80fb      	strh	r3, [r7, #6]
 80079b2:	e008      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	3b50      	subs	r3, #80	; 0x50
 80079b8:	80fb      	strh	r3, [r7, #6]
 80079ba:	e004      	b.n	80079c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80079bc:	88fb      	ldrh	r3, [r7, #6]
 80079be:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80079c2:	80fb      	strh	r3, [r7, #6]
 80079c4:	bf00      	nop
			}
			break;
 80079c6:	e008      	b.n	80079da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80079c8:	89fb      	ldrh	r3, [r7, #14]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d195      	bne.n	80078fa <ff_wtoupper+0x1a>
 80079ce:	8a3b      	ldrh	r3, [r7, #16]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4413      	add	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80079d8:	e78f      	b.n	80078fa <ff_wtoupper+0x1a>
			break;
 80079da:	bf00      	nop
	}

	return chr;
 80079dc:	88fb      	ldrh	r3, [r7, #6]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	08008c90 	.word	0x08008c90
 80079f0:	08008e84 	.word	0x08008e84

080079f4 <__errno>:
 80079f4:	4b01      	ldr	r3, [pc, #4]	; (80079fc <__errno+0x8>)
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000028 	.word	0x20000028

08007a00 <__libc_init_array>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	4d0d      	ldr	r5, [pc, #52]	; (8007a38 <__libc_init_array+0x38>)
 8007a04:	4c0d      	ldr	r4, [pc, #52]	; (8007a3c <__libc_init_array+0x3c>)
 8007a06:	1b64      	subs	r4, r4, r5
 8007a08:	10a4      	asrs	r4, r4, #2
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	42a6      	cmp	r6, r4
 8007a0e:	d109      	bne.n	8007a24 <__libc_init_array+0x24>
 8007a10:	4d0b      	ldr	r5, [pc, #44]	; (8007a40 <__libc_init_array+0x40>)
 8007a12:	4c0c      	ldr	r4, [pc, #48]	; (8007a44 <__libc_init_array+0x44>)
 8007a14:	f000 ffec 	bl	80089f0 <_init>
 8007a18:	1b64      	subs	r4, r4, r5
 8007a1a:	10a4      	asrs	r4, r4, #2
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	42a6      	cmp	r6, r4
 8007a20:	d105      	bne.n	8007a2e <__libc_init_array+0x2e>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a28:	4798      	blx	r3
 8007a2a:	3601      	adds	r6, #1
 8007a2c:	e7ee      	b.n	8007a0c <__libc_init_array+0xc>
 8007a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a32:	4798      	blx	r3
 8007a34:	3601      	adds	r6, #1
 8007a36:	e7f2      	b.n	8007a1e <__libc_init_array+0x1e>
 8007a38:	08008fe0 	.word	0x08008fe0
 8007a3c:	08008fe0 	.word	0x08008fe0
 8007a40:	08008fe0 	.word	0x08008fe0
 8007a44:	08008fe4 	.word	0x08008fe4

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <iprintf>:
 8007a58:	b40f      	push	{r0, r1, r2, r3}
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <iprintf+0x2c>)
 8007a5c:	b513      	push	{r0, r1, r4, lr}
 8007a5e:	681c      	ldr	r4, [r3, #0]
 8007a60:	b124      	cbz	r4, 8007a6c <iprintf+0x14>
 8007a62:	69a3      	ldr	r3, [r4, #24]
 8007a64:	b913      	cbnz	r3, 8007a6c <iprintf+0x14>
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 fa5e 	bl	8007f28 <__sinit>
 8007a6c:	ab05      	add	r3, sp, #20
 8007a6e:	9a04      	ldr	r2, [sp, #16]
 8007a70:	68a1      	ldr	r1, [r4, #8]
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fc2f 	bl	80082d8 <_vfiprintf_r>
 8007a7a:	b002      	add	sp, #8
 8007a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a80:	b004      	add	sp, #16
 8007a82:	4770      	bx	lr
 8007a84:	20000028 	.word	0x20000028

08007a88 <_puts_r>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	460e      	mov	r6, r1
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	b118      	cbz	r0, 8007a98 <_puts_r+0x10>
 8007a90:	6983      	ldr	r3, [r0, #24]
 8007a92:	b90b      	cbnz	r3, 8007a98 <_puts_r+0x10>
 8007a94:	f000 fa48 	bl	8007f28 <__sinit>
 8007a98:	69ab      	ldr	r3, [r5, #24]
 8007a9a:	68ac      	ldr	r4, [r5, #8]
 8007a9c:	b913      	cbnz	r3, 8007aa4 <_puts_r+0x1c>
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fa42 	bl	8007f28 <__sinit>
 8007aa4:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <_puts_r+0xd0>)
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	d120      	bne.n	8007aec <_puts_r+0x64>
 8007aaa:	686c      	ldr	r4, [r5, #4]
 8007aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_puts_r+0x36>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	0598      	lsls	r0, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_puts_r+0x36>
 8007ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aba:	f000 fad3 	bl	8008064 <__retarget_lock_acquire_recursive>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	0719      	lsls	r1, r3, #28
 8007ac2:	d51d      	bpl.n	8007b00 <_puts_r+0x78>
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	b1db      	cbz	r3, 8007b00 <_puts_r+0x78>
 8007ac8:	3e01      	subs	r6, #1
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	60a3      	str	r3, [r4, #8]
 8007ad4:	bb39      	cbnz	r1, 8007b26 <_puts_r+0x9e>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da38      	bge.n	8007b4c <_puts_r+0xc4>
 8007ada:	4622      	mov	r2, r4
 8007adc:	210a      	movs	r1, #10
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 f848 	bl	8007b74 <__swbuf_r>
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d011      	beq.n	8007b0c <_puts_r+0x84>
 8007ae8:	250a      	movs	r5, #10
 8007aea:	e011      	b.n	8007b10 <_puts_r+0x88>
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <_puts_r+0xd4>)
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d101      	bne.n	8007af6 <_puts_r+0x6e>
 8007af2:	68ac      	ldr	r4, [r5, #8]
 8007af4:	e7da      	b.n	8007aac <_puts_r+0x24>
 8007af6:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <_puts_r+0xd8>)
 8007af8:	429c      	cmp	r4, r3
 8007afa:	bf08      	it	eq
 8007afc:	68ec      	ldreq	r4, [r5, #12]
 8007afe:	e7d5      	b.n	8007aac <_puts_r+0x24>
 8007b00:	4621      	mov	r1, r4
 8007b02:	4628      	mov	r0, r5
 8007b04:	f000 f888 	bl	8007c18 <__swsetup_r>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d0dd      	beq.n	8007ac8 <_puts_r+0x40>
 8007b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d405      	bmi.n	8007b22 <_puts_r+0x9a>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	d402      	bmi.n	8007b22 <_puts_r+0x9a>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 faa2 	bl	8008066 <__retarget_lock_release_recursive>
 8007b22:	4628      	mov	r0, r5
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da04      	bge.n	8007b34 <_puts_r+0xac>
 8007b2a:	69a2      	ldr	r2, [r4, #24]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	dc06      	bgt.n	8007b3e <_puts_r+0xb6>
 8007b30:	290a      	cmp	r1, #10
 8007b32:	d004      	beq.n	8007b3e <_puts_r+0xb6>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	6022      	str	r2, [r4, #0]
 8007b3a:	7019      	strb	r1, [r3, #0]
 8007b3c:	e7c5      	b.n	8007aca <_puts_r+0x42>
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 f817 	bl	8007b74 <__swbuf_r>
 8007b46:	3001      	adds	r0, #1
 8007b48:	d1bf      	bne.n	8007aca <_puts_r+0x42>
 8007b4a:	e7df      	b.n	8007b0c <_puts_r+0x84>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	250a      	movs	r5, #10
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	6022      	str	r2, [r4, #0]
 8007b54:	701d      	strb	r5, [r3, #0]
 8007b56:	e7db      	b.n	8007b10 <_puts_r+0x88>
 8007b58:	08008f64 	.word	0x08008f64
 8007b5c:	08008f84 	.word	0x08008f84
 8007b60:	08008f44 	.word	0x08008f44

08007b64 <puts>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <puts+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f7ff bf8d 	b.w	8007a88 <_puts_r>
 8007b6e:	bf00      	nop
 8007b70:	20000028 	.word	0x20000028

08007b74 <__swbuf_r>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	460e      	mov	r6, r1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	b118      	cbz	r0, 8007b86 <__swbuf_r+0x12>
 8007b7e:	6983      	ldr	r3, [r0, #24]
 8007b80:	b90b      	cbnz	r3, 8007b86 <__swbuf_r+0x12>
 8007b82:	f000 f9d1 	bl	8007f28 <__sinit>
 8007b86:	4b21      	ldr	r3, [pc, #132]	; (8007c0c <__swbuf_r+0x98>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d12b      	bne.n	8007be4 <__swbuf_r+0x70>
 8007b8c:	686c      	ldr	r4, [r5, #4]
 8007b8e:	69a3      	ldr	r3, [r4, #24]
 8007b90:	60a3      	str	r3, [r4, #8]
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	071a      	lsls	r2, r3, #28
 8007b96:	d52f      	bpl.n	8007bf8 <__swbuf_r+0x84>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	b36b      	cbz	r3, 8007bf8 <__swbuf_r+0x84>
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	1ac0      	subs	r0, r0, r3
 8007ba2:	6963      	ldr	r3, [r4, #20]
 8007ba4:	b2f6      	uxtb	r6, r6
 8007ba6:	4283      	cmp	r3, r0
 8007ba8:	4637      	mov	r7, r6
 8007baa:	dc04      	bgt.n	8007bb6 <__swbuf_r+0x42>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 f926 	bl	8007e00 <_fflush_r>
 8007bb4:	bb30      	cbnz	r0, 8007c04 <__swbuf_r+0x90>
 8007bb6:	68a3      	ldr	r3, [r4, #8]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	60a3      	str	r3, [r4, #8]
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	6022      	str	r2, [r4, #0]
 8007bc2:	701e      	strb	r6, [r3, #0]
 8007bc4:	6963      	ldr	r3, [r4, #20]
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	4283      	cmp	r3, r0
 8007bca:	d004      	beq.n	8007bd6 <__swbuf_r+0x62>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	07db      	lsls	r3, r3, #31
 8007bd0:	d506      	bpl.n	8007be0 <__swbuf_r+0x6c>
 8007bd2:	2e0a      	cmp	r6, #10
 8007bd4:	d104      	bne.n	8007be0 <__swbuf_r+0x6c>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 f911 	bl	8007e00 <_fflush_r>
 8007bde:	b988      	cbnz	r0, 8007c04 <__swbuf_r+0x90>
 8007be0:	4638      	mov	r0, r7
 8007be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <__swbuf_r+0x9c>)
 8007be6:	429c      	cmp	r4, r3
 8007be8:	d101      	bne.n	8007bee <__swbuf_r+0x7a>
 8007bea:	68ac      	ldr	r4, [r5, #8]
 8007bec:	e7cf      	b.n	8007b8e <__swbuf_r+0x1a>
 8007bee:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <__swbuf_r+0xa0>)
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	bf08      	it	eq
 8007bf4:	68ec      	ldreq	r4, [r5, #12]
 8007bf6:	e7ca      	b.n	8007b8e <__swbuf_r+0x1a>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 f80c 	bl	8007c18 <__swsetup_r>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d0cb      	beq.n	8007b9c <__swbuf_r+0x28>
 8007c04:	f04f 37ff 	mov.w	r7, #4294967295
 8007c08:	e7ea      	b.n	8007be0 <__swbuf_r+0x6c>
 8007c0a:	bf00      	nop
 8007c0c:	08008f64 	.word	0x08008f64
 8007c10:	08008f84 	.word	0x08008f84
 8007c14:	08008f44 	.word	0x08008f44

08007c18 <__swsetup_r>:
 8007c18:	4b32      	ldr	r3, [pc, #200]	; (8007ce4 <__swsetup_r+0xcc>)
 8007c1a:	b570      	push	{r4, r5, r6, lr}
 8007c1c:	681d      	ldr	r5, [r3, #0]
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	b125      	cbz	r5, 8007c2e <__swsetup_r+0x16>
 8007c24:	69ab      	ldr	r3, [r5, #24]
 8007c26:	b913      	cbnz	r3, 8007c2e <__swsetup_r+0x16>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f97d 	bl	8007f28 <__sinit>
 8007c2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ce8 <__swsetup_r+0xd0>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	d10f      	bne.n	8007c54 <__swsetup_r+0x3c>
 8007c34:	686c      	ldr	r4, [r5, #4]
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c3c:	0719      	lsls	r1, r3, #28
 8007c3e:	d42c      	bmi.n	8007c9a <__swsetup_r+0x82>
 8007c40:	06dd      	lsls	r5, r3, #27
 8007c42:	d411      	bmi.n	8007c68 <__swsetup_r+0x50>
 8007c44:	2309      	movs	r3, #9
 8007c46:	6033      	str	r3, [r6, #0]
 8007c48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c52:	e03e      	b.n	8007cd2 <__swsetup_r+0xba>
 8007c54:	4b25      	ldr	r3, [pc, #148]	; (8007cec <__swsetup_r+0xd4>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	d101      	bne.n	8007c5e <__swsetup_r+0x46>
 8007c5a:	68ac      	ldr	r4, [r5, #8]
 8007c5c:	e7eb      	b.n	8007c36 <__swsetup_r+0x1e>
 8007c5e:	4b24      	ldr	r3, [pc, #144]	; (8007cf0 <__swsetup_r+0xd8>)
 8007c60:	429c      	cmp	r4, r3
 8007c62:	bf08      	it	eq
 8007c64:	68ec      	ldreq	r4, [r5, #12]
 8007c66:	e7e6      	b.n	8007c36 <__swsetup_r+0x1e>
 8007c68:	0758      	lsls	r0, r3, #29
 8007c6a:	d512      	bpl.n	8007c92 <__swsetup_r+0x7a>
 8007c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c6e:	b141      	cbz	r1, 8007c82 <__swsetup_r+0x6a>
 8007c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c74:	4299      	cmp	r1, r3
 8007c76:	d002      	beq.n	8007c7e <__swsetup_r+0x66>
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f000 fa59 	bl	8008130 <_free_r>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6363      	str	r3, [r4, #52]	; 0x34
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6063      	str	r3, [r4, #4]
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f043 0308 	orr.w	r3, r3, #8
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	b94b      	cbnz	r3, 8007cb2 <__swsetup_r+0x9a>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca8:	d003      	beq.n	8007cb2 <__swsetup_r+0x9a>
 8007caa:	4621      	mov	r1, r4
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 f9ff 	bl	80080b0 <__smakebuf_r>
 8007cb2:	89a0      	ldrh	r0, [r4, #12]
 8007cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cb8:	f010 0301 	ands.w	r3, r0, #1
 8007cbc:	d00a      	beq.n	8007cd4 <__swsetup_r+0xbc>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60a3      	str	r3, [r4, #8]
 8007cc2:	6963      	ldr	r3, [r4, #20]
 8007cc4:	425b      	negs	r3, r3
 8007cc6:	61a3      	str	r3, [r4, #24]
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	b943      	cbnz	r3, 8007cde <__swsetup_r+0xc6>
 8007ccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cd0:	d1ba      	bne.n	8007c48 <__swsetup_r+0x30>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	0781      	lsls	r1, r0, #30
 8007cd6:	bf58      	it	pl
 8007cd8:	6963      	ldrpl	r3, [r4, #20]
 8007cda:	60a3      	str	r3, [r4, #8]
 8007cdc:	e7f4      	b.n	8007cc8 <__swsetup_r+0xb0>
 8007cde:	2000      	movs	r0, #0
 8007ce0:	e7f7      	b.n	8007cd2 <__swsetup_r+0xba>
 8007ce2:	bf00      	nop
 8007ce4:	20000028 	.word	0x20000028
 8007ce8:	08008f64 	.word	0x08008f64
 8007cec:	08008f84 	.word	0x08008f84
 8007cf0:	08008f44 	.word	0x08008f44

08007cf4 <__sflush_r>:
 8007cf4:	898a      	ldrh	r2, [r1, #12]
 8007cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	0710      	lsls	r0, r2, #28
 8007cfe:	460c      	mov	r4, r1
 8007d00:	d458      	bmi.n	8007db4 <__sflush_r+0xc0>
 8007d02:	684b      	ldr	r3, [r1, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dc05      	bgt.n	8007d14 <__sflush_r+0x20>
 8007d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	dc02      	bgt.n	8007d14 <__sflush_r+0x20>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	d0f9      	beq.n	8007d0e <__sflush_r+0x1a>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d20:	682f      	ldr	r7, [r5, #0]
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	d032      	beq.n	8007d8c <__sflush_r+0x98>
 8007d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	075a      	lsls	r2, r3, #29
 8007d2c:	d505      	bpl.n	8007d3a <__sflush_r+0x46>
 8007d2e:	6863      	ldr	r3, [r4, #4]
 8007d30:	1ac0      	subs	r0, r0, r3
 8007d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d34:	b10b      	cbz	r3, 8007d3a <__sflush_r+0x46>
 8007d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d38:	1ac0      	subs	r0, r0, r3
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d40:	6a21      	ldr	r1, [r4, #32]
 8007d42:	4628      	mov	r0, r5
 8007d44:	47b0      	blx	r6
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	d106      	bne.n	8007d5a <__sflush_r+0x66>
 8007d4c:	6829      	ldr	r1, [r5, #0]
 8007d4e:	291d      	cmp	r1, #29
 8007d50:	d82c      	bhi.n	8007dac <__sflush_r+0xb8>
 8007d52:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <__sflush_r+0x108>)
 8007d54:	40ca      	lsrs	r2, r1
 8007d56:	07d6      	lsls	r6, r2, #31
 8007d58:	d528      	bpl.n	8007dac <__sflush_r+0xb8>
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6062      	str	r2, [r4, #4]
 8007d5e:	04d9      	lsls	r1, r3, #19
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	6022      	str	r2, [r4, #0]
 8007d64:	d504      	bpl.n	8007d70 <__sflush_r+0x7c>
 8007d66:	1c42      	adds	r2, r0, #1
 8007d68:	d101      	bne.n	8007d6e <__sflush_r+0x7a>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	b903      	cbnz	r3, 8007d70 <__sflush_r+0x7c>
 8007d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d72:	602f      	str	r7, [r5, #0]
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d0ca      	beq.n	8007d0e <__sflush_r+0x1a>
 8007d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d002      	beq.n	8007d86 <__sflush_r+0x92>
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 f9d5 	bl	8008130 <_free_r>
 8007d86:	2000      	movs	r0, #0
 8007d88:	6360      	str	r0, [r4, #52]	; 0x34
 8007d8a:	e7c1      	b.n	8007d10 <__sflush_r+0x1c>
 8007d8c:	6a21      	ldr	r1, [r4, #32]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b0      	blx	r6
 8007d94:	1c41      	adds	r1, r0, #1
 8007d96:	d1c7      	bne.n	8007d28 <__sflush_r+0x34>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0c4      	beq.n	8007d28 <__sflush_r+0x34>
 8007d9e:	2b1d      	cmp	r3, #29
 8007da0:	d001      	beq.n	8007da6 <__sflush_r+0xb2>
 8007da2:	2b16      	cmp	r3, #22
 8007da4:	d101      	bne.n	8007daa <__sflush_r+0xb6>
 8007da6:	602f      	str	r7, [r5, #0]
 8007da8:	e7b1      	b.n	8007d0e <__sflush_r+0x1a>
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	e7ad      	b.n	8007d10 <__sflush_r+0x1c>
 8007db4:	690f      	ldr	r7, [r1, #16]
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	d0a9      	beq.n	8007d0e <__sflush_r+0x1a>
 8007dba:	0793      	lsls	r3, r2, #30
 8007dbc:	680e      	ldr	r6, [r1, #0]
 8007dbe:	bf08      	it	eq
 8007dc0:	694b      	ldreq	r3, [r1, #20]
 8007dc2:	600f      	str	r7, [r1, #0]
 8007dc4:	bf18      	it	ne
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	eba6 0807 	sub.w	r8, r6, r7
 8007dcc:	608b      	str	r3, [r1, #8]
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	dd9c      	ble.n	8007d0e <__sflush_r+0x1a>
 8007dd4:	6a21      	ldr	r1, [r4, #32]
 8007dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd8:	4643      	mov	r3, r8
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b0      	blx	r6
 8007de0:	2800      	cmp	r0, #0
 8007de2:	dc06      	bgt.n	8007df2 <__sflush_r+0xfe>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	e78e      	b.n	8007d10 <__sflush_r+0x1c>
 8007df2:	4407      	add	r7, r0
 8007df4:	eba8 0800 	sub.w	r8, r8, r0
 8007df8:	e7e9      	b.n	8007dce <__sflush_r+0xda>
 8007dfa:	bf00      	nop
 8007dfc:	20400001 	.word	0x20400001

08007e00 <_fflush_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	690b      	ldr	r3, [r1, #16]
 8007e04:	4605      	mov	r5, r0
 8007e06:	460c      	mov	r4, r1
 8007e08:	b913      	cbnz	r3, 8007e10 <_fflush_r+0x10>
 8007e0a:	2500      	movs	r5, #0
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	b118      	cbz	r0, 8007e1a <_fflush_r+0x1a>
 8007e12:	6983      	ldr	r3, [r0, #24]
 8007e14:	b90b      	cbnz	r3, 8007e1a <_fflush_r+0x1a>
 8007e16:	f000 f887 	bl	8007f28 <__sinit>
 8007e1a:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <_fflush_r+0x6c>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	d11b      	bne.n	8007e58 <_fflush_r+0x58>
 8007e20:	686c      	ldr	r4, [r5, #4]
 8007e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0ef      	beq.n	8007e0a <_fflush_r+0xa>
 8007e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e2c:	07d0      	lsls	r0, r2, #31
 8007e2e:	d404      	bmi.n	8007e3a <_fflush_r+0x3a>
 8007e30:	0599      	lsls	r1, r3, #22
 8007e32:	d402      	bmi.n	8007e3a <_fflush_r+0x3a>
 8007e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e36:	f000 f915 	bl	8008064 <__retarget_lock_acquire_recursive>
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	f7ff ff59 	bl	8007cf4 <__sflush_r>
 8007e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e44:	07da      	lsls	r2, r3, #31
 8007e46:	4605      	mov	r5, r0
 8007e48:	d4e0      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	059b      	lsls	r3, r3, #22
 8007e4e:	d4dd      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e52:	f000 f908 	bl	8008066 <__retarget_lock_release_recursive>
 8007e56:	e7d9      	b.n	8007e0c <_fflush_r+0xc>
 8007e58:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <_fflush_r+0x70>)
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	d101      	bne.n	8007e62 <_fflush_r+0x62>
 8007e5e:	68ac      	ldr	r4, [r5, #8]
 8007e60:	e7df      	b.n	8007e22 <_fflush_r+0x22>
 8007e62:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <_fflush_r+0x74>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	bf08      	it	eq
 8007e68:	68ec      	ldreq	r4, [r5, #12]
 8007e6a:	e7da      	b.n	8007e22 <_fflush_r+0x22>
 8007e6c:	08008f64 	.word	0x08008f64
 8007e70:	08008f84 	.word	0x08008f84
 8007e74:	08008f44 	.word	0x08008f44

08007e78 <std>:
 8007e78:	2300      	movs	r3, #0
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e86:	6083      	str	r3, [r0, #8]
 8007e88:	8181      	strh	r1, [r0, #12]
 8007e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e8c:	81c2      	strh	r2, [r0, #14]
 8007e8e:	6183      	str	r3, [r0, #24]
 8007e90:	4619      	mov	r1, r3
 8007e92:	2208      	movs	r2, #8
 8007e94:	305c      	adds	r0, #92	; 0x5c
 8007e96:	f7ff fdd7 	bl	8007a48 <memset>
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <std+0x38>)
 8007e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <std+0x3c>)
 8007ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <std+0x40>)
 8007ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <std+0x44>)
 8007ea8:	6224      	str	r4, [r4, #32]
 8007eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	08008881 	.word	0x08008881
 8007eb4:	080088a3 	.word	0x080088a3
 8007eb8:	080088db 	.word	0x080088db
 8007ebc:	080088ff 	.word	0x080088ff

08007ec0 <_cleanup_r>:
 8007ec0:	4901      	ldr	r1, [pc, #4]	; (8007ec8 <_cleanup_r+0x8>)
 8007ec2:	f000 b8af 	b.w	8008024 <_fwalk_reent>
 8007ec6:	bf00      	nop
 8007ec8:	08007e01 	.word	0x08007e01

08007ecc <__sfmoreglue>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	1e4a      	subs	r2, r1, #1
 8007ed0:	2568      	movs	r5, #104	; 0x68
 8007ed2:	4355      	muls	r5, r2
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eda:	f000 f979 	bl	80081d0 <_malloc_r>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	b140      	cbz	r0, 8007ef4 <__sfmoreglue+0x28>
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ee8:	300c      	adds	r0, #12
 8007eea:	60a0      	str	r0, [r4, #8]
 8007eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ef0:	f7ff fdaa 	bl	8007a48 <memset>
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}

08007ef8 <__sfp_lock_acquire>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__sfp_lock_acquire+0x8>)
 8007efa:	f000 b8b3 	b.w	8008064 <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	20002520 	.word	0x20002520

08007f04 <__sfp_lock_release>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sfp_lock_release+0x8>)
 8007f06:	f000 b8ae 	b.w	8008066 <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20002520 	.word	0x20002520

08007f10 <__sinit_lock_acquire>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__sinit_lock_acquire+0x8>)
 8007f12:	f000 b8a7 	b.w	8008064 <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	2000251b 	.word	0x2000251b

08007f1c <__sinit_lock_release>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__sinit_lock_release+0x8>)
 8007f1e:	f000 b8a2 	b.w	8008066 <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	2000251b 	.word	0x2000251b

08007f28 <__sinit>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f7ff fff0 	bl	8007f10 <__sinit_lock_acquire>
 8007f30:	69a3      	ldr	r3, [r4, #24]
 8007f32:	b11b      	cbz	r3, 8007f3c <__sinit+0x14>
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f7ff bff0 	b.w	8007f1c <__sinit_lock_release>
 8007f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f40:	6523      	str	r3, [r4, #80]	; 0x50
 8007f42:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <__sinit+0x68>)
 8007f44:	4a13      	ldr	r2, [pc, #76]	; (8007f94 <__sinit+0x6c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	bf04      	itt	eq
 8007f4e:	2301      	moveq	r3, #1
 8007f50:	61a3      	streq	r3, [r4, #24]
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 f820 	bl	8007f98 <__sfp>
 8007f58:	6060      	str	r0, [r4, #4]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 f81c 	bl	8007f98 <__sfp>
 8007f60:	60a0      	str	r0, [r4, #8]
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 f818 	bl	8007f98 <__sfp>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	60e0      	str	r0, [r4, #12]
 8007f6c:	2104      	movs	r1, #4
 8007f6e:	6860      	ldr	r0, [r4, #4]
 8007f70:	f7ff ff82 	bl	8007e78 <std>
 8007f74:	68a0      	ldr	r0, [r4, #8]
 8007f76:	2201      	movs	r2, #1
 8007f78:	2109      	movs	r1, #9
 8007f7a:	f7ff ff7d 	bl	8007e78 <std>
 8007f7e:	68e0      	ldr	r0, [r4, #12]
 8007f80:	2202      	movs	r2, #2
 8007f82:	2112      	movs	r1, #18
 8007f84:	f7ff ff78 	bl	8007e78 <std>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	61a3      	str	r3, [r4, #24]
 8007f8c:	e7d2      	b.n	8007f34 <__sinit+0xc>
 8007f8e:	bf00      	nop
 8007f90:	08008f40 	.word	0x08008f40
 8007f94:	08007ec1 	.word	0x08007ec1

08007f98 <__sfp>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	f7ff ffac 	bl	8007ef8 <__sfp_lock_acquire>
 8007fa0:	4b1e      	ldr	r3, [pc, #120]	; (800801c <__sfp+0x84>)
 8007fa2:	681e      	ldr	r6, [r3, #0]
 8007fa4:	69b3      	ldr	r3, [r6, #24]
 8007fa6:	b913      	cbnz	r3, 8007fae <__sfp+0x16>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ffbd 	bl	8007f28 <__sinit>
 8007fae:	3648      	adds	r6, #72	; 0x48
 8007fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	d503      	bpl.n	8007fc0 <__sfp+0x28>
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	b30b      	cbz	r3, 8008000 <__sfp+0x68>
 8007fbc:	6836      	ldr	r6, [r6, #0]
 8007fbe:	e7f7      	b.n	8007fb0 <__sfp+0x18>
 8007fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fc4:	b9d5      	cbnz	r5, 8007ffc <__sfp+0x64>
 8007fc6:	4b16      	ldr	r3, [pc, #88]	; (8008020 <__sfp+0x88>)
 8007fc8:	60e3      	str	r3, [r4, #12]
 8007fca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fce:	6665      	str	r5, [r4, #100]	; 0x64
 8007fd0:	f000 f847 	bl	8008062 <__retarget_lock_init_recursive>
 8007fd4:	f7ff ff96 	bl	8007f04 <__sfp_lock_release>
 8007fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fe0:	6025      	str	r5, [r4, #0]
 8007fe2:	61a5      	str	r5, [r4, #24]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fec:	f7ff fd2c 	bl	8007a48 <memset>
 8007ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ffc:	3468      	adds	r4, #104	; 0x68
 8007ffe:	e7d9      	b.n	8007fb4 <__sfp+0x1c>
 8008000:	2104      	movs	r1, #4
 8008002:	4638      	mov	r0, r7
 8008004:	f7ff ff62 	bl	8007ecc <__sfmoreglue>
 8008008:	4604      	mov	r4, r0
 800800a:	6030      	str	r0, [r6, #0]
 800800c:	2800      	cmp	r0, #0
 800800e:	d1d5      	bne.n	8007fbc <__sfp+0x24>
 8008010:	f7ff ff78 	bl	8007f04 <__sfp_lock_release>
 8008014:	230c      	movs	r3, #12
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	e7ee      	b.n	8007ff8 <__sfp+0x60>
 800801a:	bf00      	nop
 800801c:	08008f40 	.word	0x08008f40
 8008020:	ffff0001 	.word	0xffff0001

08008024 <_fwalk_reent>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	4606      	mov	r6, r0
 800802a:	4688      	mov	r8, r1
 800802c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008030:	2700      	movs	r7, #0
 8008032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008036:	f1b9 0901 	subs.w	r9, r9, #1
 800803a:	d505      	bpl.n	8008048 <_fwalk_reent+0x24>
 800803c:	6824      	ldr	r4, [r4, #0]
 800803e:	2c00      	cmp	r4, #0
 8008040:	d1f7      	bne.n	8008032 <_fwalk_reent+0xe>
 8008042:	4638      	mov	r0, r7
 8008044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008048:	89ab      	ldrh	r3, [r5, #12]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d907      	bls.n	800805e <_fwalk_reent+0x3a>
 800804e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008052:	3301      	adds	r3, #1
 8008054:	d003      	beq.n	800805e <_fwalk_reent+0x3a>
 8008056:	4629      	mov	r1, r5
 8008058:	4630      	mov	r0, r6
 800805a:	47c0      	blx	r8
 800805c:	4307      	orrs	r7, r0
 800805e:	3568      	adds	r5, #104	; 0x68
 8008060:	e7e9      	b.n	8008036 <_fwalk_reent+0x12>

08008062 <__retarget_lock_init_recursive>:
 8008062:	4770      	bx	lr

08008064 <__retarget_lock_acquire_recursive>:
 8008064:	4770      	bx	lr

08008066 <__retarget_lock_release_recursive>:
 8008066:	4770      	bx	lr

08008068 <__swhatbuf_r>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	460e      	mov	r6, r1
 800806c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008070:	2900      	cmp	r1, #0
 8008072:	b096      	sub	sp, #88	; 0x58
 8008074:	4614      	mov	r4, r2
 8008076:	461d      	mov	r5, r3
 8008078:	da07      	bge.n	800808a <__swhatbuf_r+0x22>
 800807a:	2300      	movs	r3, #0
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	89b3      	ldrh	r3, [r6, #12]
 8008080:	061a      	lsls	r2, r3, #24
 8008082:	d410      	bmi.n	80080a6 <__swhatbuf_r+0x3e>
 8008084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008088:	e00e      	b.n	80080a8 <__swhatbuf_r+0x40>
 800808a:	466a      	mov	r2, sp
 800808c:	f000 fc5e 	bl	800894c <_fstat_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	dbf2      	blt.n	800807a <__swhatbuf_r+0x12>
 8008094:	9a01      	ldr	r2, [sp, #4]
 8008096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800809a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800809e:	425a      	negs	r2, r3
 80080a0:	415a      	adcs	r2, r3
 80080a2:	602a      	str	r2, [r5, #0]
 80080a4:	e7ee      	b.n	8008084 <__swhatbuf_r+0x1c>
 80080a6:	2340      	movs	r3, #64	; 0x40
 80080a8:	2000      	movs	r0, #0
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	b016      	add	sp, #88	; 0x58
 80080ae:	bd70      	pop	{r4, r5, r6, pc}

080080b0 <__smakebuf_r>:
 80080b0:	898b      	ldrh	r3, [r1, #12]
 80080b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080b4:	079d      	lsls	r5, r3, #30
 80080b6:	4606      	mov	r6, r0
 80080b8:	460c      	mov	r4, r1
 80080ba:	d507      	bpl.n	80080cc <__smakebuf_r+0x1c>
 80080bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	6123      	str	r3, [r4, #16]
 80080c4:	2301      	movs	r3, #1
 80080c6:	6163      	str	r3, [r4, #20]
 80080c8:	b002      	add	sp, #8
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	ab01      	add	r3, sp, #4
 80080ce:	466a      	mov	r2, sp
 80080d0:	f7ff ffca 	bl	8008068 <__swhatbuf_r>
 80080d4:	9900      	ldr	r1, [sp, #0]
 80080d6:	4605      	mov	r5, r0
 80080d8:	4630      	mov	r0, r6
 80080da:	f000 f879 	bl	80081d0 <_malloc_r>
 80080de:	b948      	cbnz	r0, 80080f4 <__smakebuf_r+0x44>
 80080e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e4:	059a      	lsls	r2, r3, #22
 80080e6:	d4ef      	bmi.n	80080c8 <__smakebuf_r+0x18>
 80080e8:	f023 0303 	bic.w	r3, r3, #3
 80080ec:	f043 0302 	orr.w	r3, r3, #2
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	e7e3      	b.n	80080bc <__smakebuf_r+0xc>
 80080f4:	4b0d      	ldr	r3, [pc, #52]	; (800812c <__smakebuf_r+0x7c>)
 80080f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	6020      	str	r0, [r4, #0]
 80080fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	9b00      	ldr	r3, [sp, #0]
 8008104:	6163      	str	r3, [r4, #20]
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	6120      	str	r0, [r4, #16]
 800810a:	b15b      	cbz	r3, 8008124 <__smakebuf_r+0x74>
 800810c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008110:	4630      	mov	r0, r6
 8008112:	f000 fc2d 	bl	8008970 <_isatty_r>
 8008116:	b128      	cbz	r0, 8008124 <__smakebuf_r+0x74>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	89a0      	ldrh	r0, [r4, #12]
 8008126:	4305      	orrs	r5, r0
 8008128:	81a5      	strh	r5, [r4, #12]
 800812a:	e7cd      	b.n	80080c8 <__smakebuf_r+0x18>
 800812c:	08007ec1 	.word	0x08007ec1

08008130 <_free_r>:
 8008130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008132:	2900      	cmp	r1, #0
 8008134:	d048      	beq.n	80081c8 <_free_r+0x98>
 8008136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800813a:	9001      	str	r0, [sp, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f1a1 0404 	sub.w	r4, r1, #4
 8008142:	bfb8      	it	lt
 8008144:	18e4      	addlt	r4, r4, r3
 8008146:	f000 fc35 	bl	80089b4 <__malloc_lock>
 800814a:	4a20      	ldr	r2, [pc, #128]	; (80081cc <_free_r+0x9c>)
 800814c:	9801      	ldr	r0, [sp, #4]
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	4615      	mov	r5, r2
 8008152:	b933      	cbnz	r3, 8008162 <_free_r+0x32>
 8008154:	6063      	str	r3, [r4, #4]
 8008156:	6014      	str	r4, [r2, #0]
 8008158:	b003      	add	sp, #12
 800815a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800815e:	f000 bc2f 	b.w	80089c0 <__malloc_unlock>
 8008162:	42a3      	cmp	r3, r4
 8008164:	d90b      	bls.n	800817e <_free_r+0x4e>
 8008166:	6821      	ldr	r1, [r4, #0]
 8008168:	1862      	adds	r2, r4, r1
 800816a:	4293      	cmp	r3, r2
 800816c:	bf04      	itt	eq
 800816e:	681a      	ldreq	r2, [r3, #0]
 8008170:	685b      	ldreq	r3, [r3, #4]
 8008172:	6063      	str	r3, [r4, #4]
 8008174:	bf04      	itt	eq
 8008176:	1852      	addeq	r2, r2, r1
 8008178:	6022      	streq	r2, [r4, #0]
 800817a:	602c      	str	r4, [r5, #0]
 800817c:	e7ec      	b.n	8008158 <_free_r+0x28>
 800817e:	461a      	mov	r2, r3
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	b10b      	cbz	r3, 8008188 <_free_r+0x58>
 8008184:	42a3      	cmp	r3, r4
 8008186:	d9fa      	bls.n	800817e <_free_r+0x4e>
 8008188:	6811      	ldr	r1, [r2, #0]
 800818a:	1855      	adds	r5, r2, r1
 800818c:	42a5      	cmp	r5, r4
 800818e:	d10b      	bne.n	80081a8 <_free_r+0x78>
 8008190:	6824      	ldr	r4, [r4, #0]
 8008192:	4421      	add	r1, r4
 8008194:	1854      	adds	r4, r2, r1
 8008196:	42a3      	cmp	r3, r4
 8008198:	6011      	str	r1, [r2, #0]
 800819a:	d1dd      	bne.n	8008158 <_free_r+0x28>
 800819c:	681c      	ldr	r4, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	4421      	add	r1, r4
 80081a4:	6011      	str	r1, [r2, #0]
 80081a6:	e7d7      	b.n	8008158 <_free_r+0x28>
 80081a8:	d902      	bls.n	80081b0 <_free_r+0x80>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	e7d3      	b.n	8008158 <_free_r+0x28>
 80081b0:	6825      	ldr	r5, [r4, #0]
 80081b2:	1961      	adds	r1, r4, r5
 80081b4:	428b      	cmp	r3, r1
 80081b6:	bf04      	itt	eq
 80081b8:	6819      	ldreq	r1, [r3, #0]
 80081ba:	685b      	ldreq	r3, [r3, #4]
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	bf04      	itt	eq
 80081c0:	1949      	addeq	r1, r1, r5
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	6054      	str	r4, [r2, #4]
 80081c6:	e7c7      	b.n	8008158 <_free_r+0x28>
 80081c8:	b003      	add	sp, #12
 80081ca:	bd30      	pop	{r4, r5, pc}
 80081cc:	200002e8 	.word	0x200002e8

080081d0 <_malloc_r>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	1ccd      	adds	r5, r1, #3
 80081d4:	f025 0503 	bic.w	r5, r5, #3
 80081d8:	3508      	adds	r5, #8
 80081da:	2d0c      	cmp	r5, #12
 80081dc:	bf38      	it	cc
 80081de:	250c      	movcc	r5, #12
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	4606      	mov	r6, r0
 80081e4:	db01      	blt.n	80081ea <_malloc_r+0x1a>
 80081e6:	42a9      	cmp	r1, r5
 80081e8:	d903      	bls.n	80081f2 <_malloc_r+0x22>
 80081ea:	230c      	movs	r3, #12
 80081ec:	6033      	str	r3, [r6, #0]
 80081ee:	2000      	movs	r0, #0
 80081f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081f2:	f000 fbdf 	bl	80089b4 <__malloc_lock>
 80081f6:	4921      	ldr	r1, [pc, #132]	; (800827c <_malloc_r+0xac>)
 80081f8:	680a      	ldr	r2, [r1, #0]
 80081fa:	4614      	mov	r4, r2
 80081fc:	b99c      	cbnz	r4, 8008226 <_malloc_r+0x56>
 80081fe:	4f20      	ldr	r7, [pc, #128]	; (8008280 <_malloc_r+0xb0>)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	b923      	cbnz	r3, 800820e <_malloc_r+0x3e>
 8008204:	4621      	mov	r1, r4
 8008206:	4630      	mov	r0, r6
 8008208:	f000 fb2a 	bl	8008860 <_sbrk_r>
 800820c:	6038      	str	r0, [r7, #0]
 800820e:	4629      	mov	r1, r5
 8008210:	4630      	mov	r0, r6
 8008212:	f000 fb25 	bl	8008860 <_sbrk_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d123      	bne.n	8008262 <_malloc_r+0x92>
 800821a:	230c      	movs	r3, #12
 800821c:	6033      	str	r3, [r6, #0]
 800821e:	4630      	mov	r0, r6
 8008220:	f000 fbce 	bl	80089c0 <__malloc_unlock>
 8008224:	e7e3      	b.n	80081ee <_malloc_r+0x1e>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	1b5b      	subs	r3, r3, r5
 800822a:	d417      	bmi.n	800825c <_malloc_r+0x8c>
 800822c:	2b0b      	cmp	r3, #11
 800822e:	d903      	bls.n	8008238 <_malloc_r+0x68>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	441c      	add	r4, r3
 8008234:	6025      	str	r5, [r4, #0]
 8008236:	e004      	b.n	8008242 <_malloc_r+0x72>
 8008238:	6863      	ldr	r3, [r4, #4]
 800823a:	42a2      	cmp	r2, r4
 800823c:	bf0c      	ite	eq
 800823e:	600b      	streq	r3, [r1, #0]
 8008240:	6053      	strne	r3, [r2, #4]
 8008242:	4630      	mov	r0, r6
 8008244:	f000 fbbc 	bl	80089c0 <__malloc_unlock>
 8008248:	f104 000b 	add.w	r0, r4, #11
 800824c:	1d23      	adds	r3, r4, #4
 800824e:	f020 0007 	bic.w	r0, r0, #7
 8008252:	1ac2      	subs	r2, r0, r3
 8008254:	d0cc      	beq.n	80081f0 <_malloc_r+0x20>
 8008256:	1a1b      	subs	r3, r3, r0
 8008258:	50a3      	str	r3, [r4, r2]
 800825a:	e7c9      	b.n	80081f0 <_malloc_r+0x20>
 800825c:	4622      	mov	r2, r4
 800825e:	6864      	ldr	r4, [r4, #4]
 8008260:	e7cc      	b.n	80081fc <_malloc_r+0x2c>
 8008262:	1cc4      	adds	r4, r0, #3
 8008264:	f024 0403 	bic.w	r4, r4, #3
 8008268:	42a0      	cmp	r0, r4
 800826a:	d0e3      	beq.n	8008234 <_malloc_r+0x64>
 800826c:	1a21      	subs	r1, r4, r0
 800826e:	4630      	mov	r0, r6
 8008270:	f000 faf6 	bl	8008860 <_sbrk_r>
 8008274:	3001      	adds	r0, #1
 8008276:	d1dd      	bne.n	8008234 <_malloc_r+0x64>
 8008278:	e7cf      	b.n	800821a <_malloc_r+0x4a>
 800827a:	bf00      	nop
 800827c:	200002e8 	.word	0x200002e8
 8008280:	200002ec 	.word	0x200002ec

08008284 <__sfputc_r>:
 8008284:	6893      	ldr	r3, [r2, #8]
 8008286:	3b01      	subs	r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	b410      	push	{r4}
 800828c:	6093      	str	r3, [r2, #8]
 800828e:	da08      	bge.n	80082a2 <__sfputc_r+0x1e>
 8008290:	6994      	ldr	r4, [r2, #24]
 8008292:	42a3      	cmp	r3, r4
 8008294:	db01      	blt.n	800829a <__sfputc_r+0x16>
 8008296:	290a      	cmp	r1, #10
 8008298:	d103      	bne.n	80082a2 <__sfputc_r+0x1e>
 800829a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800829e:	f7ff bc69 	b.w	8007b74 <__swbuf_r>
 80082a2:	6813      	ldr	r3, [r2, #0]
 80082a4:	1c58      	adds	r0, r3, #1
 80082a6:	6010      	str	r0, [r2, #0]
 80082a8:	7019      	strb	r1, [r3, #0]
 80082aa:	4608      	mov	r0, r1
 80082ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <__sfputs_r>:
 80082b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b4:	4606      	mov	r6, r0
 80082b6:	460f      	mov	r7, r1
 80082b8:	4614      	mov	r4, r2
 80082ba:	18d5      	adds	r5, r2, r3
 80082bc:	42ac      	cmp	r4, r5
 80082be:	d101      	bne.n	80082c4 <__sfputs_r+0x12>
 80082c0:	2000      	movs	r0, #0
 80082c2:	e007      	b.n	80082d4 <__sfputs_r+0x22>
 80082c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c8:	463a      	mov	r2, r7
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff ffda 	bl	8008284 <__sfputc_r>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d1f3      	bne.n	80082bc <__sfputs_r+0xa>
 80082d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082d8 <_vfiprintf_r>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	460d      	mov	r5, r1
 80082de:	b09d      	sub	sp, #116	; 0x74
 80082e0:	4614      	mov	r4, r2
 80082e2:	4698      	mov	r8, r3
 80082e4:	4606      	mov	r6, r0
 80082e6:	b118      	cbz	r0, 80082f0 <_vfiprintf_r+0x18>
 80082e8:	6983      	ldr	r3, [r0, #24]
 80082ea:	b90b      	cbnz	r3, 80082f0 <_vfiprintf_r+0x18>
 80082ec:	f7ff fe1c 	bl	8007f28 <__sinit>
 80082f0:	4b89      	ldr	r3, [pc, #548]	; (8008518 <_vfiprintf_r+0x240>)
 80082f2:	429d      	cmp	r5, r3
 80082f4:	d11b      	bne.n	800832e <_vfiprintf_r+0x56>
 80082f6:	6875      	ldr	r5, [r6, #4]
 80082f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082fa:	07d9      	lsls	r1, r3, #31
 80082fc:	d405      	bmi.n	800830a <_vfiprintf_r+0x32>
 80082fe:	89ab      	ldrh	r3, [r5, #12]
 8008300:	059a      	lsls	r2, r3, #22
 8008302:	d402      	bmi.n	800830a <_vfiprintf_r+0x32>
 8008304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008306:	f7ff fead 	bl	8008064 <__retarget_lock_acquire_recursive>
 800830a:	89ab      	ldrh	r3, [r5, #12]
 800830c:	071b      	lsls	r3, r3, #28
 800830e:	d501      	bpl.n	8008314 <_vfiprintf_r+0x3c>
 8008310:	692b      	ldr	r3, [r5, #16]
 8008312:	b9eb      	cbnz	r3, 8008350 <_vfiprintf_r+0x78>
 8008314:	4629      	mov	r1, r5
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff fc7e 	bl	8007c18 <__swsetup_r>
 800831c:	b1c0      	cbz	r0, 8008350 <_vfiprintf_r+0x78>
 800831e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008320:	07dc      	lsls	r4, r3, #31
 8008322:	d50e      	bpl.n	8008342 <_vfiprintf_r+0x6a>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	b01d      	add	sp, #116	; 0x74
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	4b7b      	ldr	r3, [pc, #492]	; (800851c <_vfiprintf_r+0x244>)
 8008330:	429d      	cmp	r5, r3
 8008332:	d101      	bne.n	8008338 <_vfiprintf_r+0x60>
 8008334:	68b5      	ldr	r5, [r6, #8]
 8008336:	e7df      	b.n	80082f8 <_vfiprintf_r+0x20>
 8008338:	4b79      	ldr	r3, [pc, #484]	; (8008520 <_vfiprintf_r+0x248>)
 800833a:	429d      	cmp	r5, r3
 800833c:	bf08      	it	eq
 800833e:	68f5      	ldreq	r5, [r6, #12]
 8008340:	e7da      	b.n	80082f8 <_vfiprintf_r+0x20>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	0598      	lsls	r0, r3, #22
 8008346:	d4ed      	bmi.n	8008324 <_vfiprintf_r+0x4c>
 8008348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800834a:	f7ff fe8c 	bl	8008066 <__retarget_lock_release_recursive>
 800834e:	e7e9      	b.n	8008324 <_vfiprintf_r+0x4c>
 8008350:	2300      	movs	r3, #0
 8008352:	9309      	str	r3, [sp, #36]	; 0x24
 8008354:	2320      	movs	r3, #32
 8008356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800835a:	f8cd 800c 	str.w	r8, [sp, #12]
 800835e:	2330      	movs	r3, #48	; 0x30
 8008360:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008524 <_vfiprintf_r+0x24c>
 8008364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008368:	f04f 0901 	mov.w	r9, #1
 800836c:	4623      	mov	r3, r4
 800836e:	469a      	mov	sl, r3
 8008370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008374:	b10a      	cbz	r2, 800837a <_vfiprintf_r+0xa2>
 8008376:	2a25      	cmp	r2, #37	; 0x25
 8008378:	d1f9      	bne.n	800836e <_vfiprintf_r+0x96>
 800837a:	ebba 0b04 	subs.w	fp, sl, r4
 800837e:	d00b      	beq.n	8008398 <_vfiprintf_r+0xc0>
 8008380:	465b      	mov	r3, fp
 8008382:	4622      	mov	r2, r4
 8008384:	4629      	mov	r1, r5
 8008386:	4630      	mov	r0, r6
 8008388:	f7ff ff93 	bl	80082b2 <__sfputs_r>
 800838c:	3001      	adds	r0, #1
 800838e:	f000 80aa 	beq.w	80084e6 <_vfiprintf_r+0x20e>
 8008392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008394:	445a      	add	r2, fp
 8008396:	9209      	str	r2, [sp, #36]	; 0x24
 8008398:	f89a 3000 	ldrb.w	r3, [sl]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 80a2 	beq.w	80084e6 <_vfiprintf_r+0x20e>
 80083a2:	2300      	movs	r3, #0
 80083a4:	f04f 32ff 	mov.w	r2, #4294967295
 80083a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ac:	f10a 0a01 	add.w	sl, sl, #1
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	9307      	str	r3, [sp, #28]
 80083b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083b8:	931a      	str	r3, [sp, #104]	; 0x68
 80083ba:	4654      	mov	r4, sl
 80083bc:	2205      	movs	r2, #5
 80083be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c2:	4858      	ldr	r0, [pc, #352]	; (8008524 <_vfiprintf_r+0x24c>)
 80083c4:	f7f7 ff0c 	bl	80001e0 <memchr>
 80083c8:	9a04      	ldr	r2, [sp, #16]
 80083ca:	b9d8      	cbnz	r0, 8008404 <_vfiprintf_r+0x12c>
 80083cc:	06d1      	lsls	r1, r2, #27
 80083ce:	bf44      	itt	mi
 80083d0:	2320      	movmi	r3, #32
 80083d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d6:	0713      	lsls	r3, r2, #28
 80083d8:	bf44      	itt	mi
 80083da:	232b      	movmi	r3, #43	; 0x2b
 80083dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e0:	f89a 3000 	ldrb.w	r3, [sl]
 80083e4:	2b2a      	cmp	r3, #42	; 0x2a
 80083e6:	d015      	beq.n	8008414 <_vfiprintf_r+0x13c>
 80083e8:	9a07      	ldr	r2, [sp, #28]
 80083ea:	4654      	mov	r4, sl
 80083ec:	2000      	movs	r0, #0
 80083ee:	f04f 0c0a 	mov.w	ip, #10
 80083f2:	4621      	mov	r1, r4
 80083f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f8:	3b30      	subs	r3, #48	; 0x30
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d94e      	bls.n	800849c <_vfiprintf_r+0x1c4>
 80083fe:	b1b0      	cbz	r0, 800842e <_vfiprintf_r+0x156>
 8008400:	9207      	str	r2, [sp, #28]
 8008402:	e014      	b.n	800842e <_vfiprintf_r+0x156>
 8008404:	eba0 0308 	sub.w	r3, r0, r8
 8008408:	fa09 f303 	lsl.w	r3, r9, r3
 800840c:	4313      	orrs	r3, r2
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	46a2      	mov	sl, r4
 8008412:	e7d2      	b.n	80083ba <_vfiprintf_r+0xe2>
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	1d19      	adds	r1, r3, #4
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	9103      	str	r1, [sp, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfbb      	ittet	lt
 8008420:	425b      	neglt	r3, r3
 8008422:	f042 0202 	orrlt.w	r2, r2, #2
 8008426:	9307      	strge	r3, [sp, #28]
 8008428:	9307      	strlt	r3, [sp, #28]
 800842a:	bfb8      	it	lt
 800842c:	9204      	strlt	r2, [sp, #16]
 800842e:	7823      	ldrb	r3, [r4, #0]
 8008430:	2b2e      	cmp	r3, #46	; 0x2e
 8008432:	d10c      	bne.n	800844e <_vfiprintf_r+0x176>
 8008434:	7863      	ldrb	r3, [r4, #1]
 8008436:	2b2a      	cmp	r3, #42	; 0x2a
 8008438:	d135      	bne.n	80084a6 <_vfiprintf_r+0x1ce>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	1d1a      	adds	r2, r3, #4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	9203      	str	r2, [sp, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	bfb8      	it	lt
 8008446:	f04f 33ff 	movlt.w	r3, #4294967295
 800844a:	3402      	adds	r4, #2
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008534 <_vfiprintf_r+0x25c>
 8008452:	7821      	ldrb	r1, [r4, #0]
 8008454:	2203      	movs	r2, #3
 8008456:	4650      	mov	r0, sl
 8008458:	f7f7 fec2 	bl	80001e0 <memchr>
 800845c:	b140      	cbz	r0, 8008470 <_vfiprintf_r+0x198>
 800845e:	2340      	movs	r3, #64	; 0x40
 8008460:	eba0 000a 	sub.w	r0, r0, sl
 8008464:	fa03 f000 	lsl.w	r0, r3, r0
 8008468:	9b04      	ldr	r3, [sp, #16]
 800846a:	4303      	orrs	r3, r0
 800846c:	3401      	adds	r4, #1
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008474:	482c      	ldr	r0, [pc, #176]	; (8008528 <_vfiprintf_r+0x250>)
 8008476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800847a:	2206      	movs	r2, #6
 800847c:	f7f7 feb0 	bl	80001e0 <memchr>
 8008480:	2800      	cmp	r0, #0
 8008482:	d03f      	beq.n	8008504 <_vfiprintf_r+0x22c>
 8008484:	4b29      	ldr	r3, [pc, #164]	; (800852c <_vfiprintf_r+0x254>)
 8008486:	bb1b      	cbnz	r3, 80084d0 <_vfiprintf_r+0x1f8>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	3307      	adds	r3, #7
 800848c:	f023 0307 	bic.w	r3, r3, #7
 8008490:	3308      	adds	r3, #8
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008496:	443b      	add	r3, r7
 8008498:	9309      	str	r3, [sp, #36]	; 0x24
 800849a:	e767      	b.n	800836c <_vfiprintf_r+0x94>
 800849c:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a0:	460c      	mov	r4, r1
 80084a2:	2001      	movs	r0, #1
 80084a4:	e7a5      	b.n	80083f2 <_vfiprintf_r+0x11a>
 80084a6:	2300      	movs	r3, #0
 80084a8:	3401      	adds	r4, #1
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	4619      	mov	r1, r3
 80084ae:	f04f 0c0a 	mov.w	ip, #10
 80084b2:	4620      	mov	r0, r4
 80084b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b8:	3a30      	subs	r2, #48	; 0x30
 80084ba:	2a09      	cmp	r2, #9
 80084bc:	d903      	bls.n	80084c6 <_vfiprintf_r+0x1ee>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0c5      	beq.n	800844e <_vfiprintf_r+0x176>
 80084c2:	9105      	str	r1, [sp, #20]
 80084c4:	e7c3      	b.n	800844e <_vfiprintf_r+0x176>
 80084c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ca:	4604      	mov	r4, r0
 80084cc:	2301      	movs	r3, #1
 80084ce:	e7f0      	b.n	80084b2 <_vfiprintf_r+0x1da>
 80084d0:	ab03      	add	r3, sp, #12
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	462a      	mov	r2, r5
 80084d6:	4b16      	ldr	r3, [pc, #88]	; (8008530 <_vfiprintf_r+0x258>)
 80084d8:	a904      	add	r1, sp, #16
 80084da:	4630      	mov	r0, r6
 80084dc:	f3af 8000 	nop.w
 80084e0:	4607      	mov	r7, r0
 80084e2:	1c78      	adds	r0, r7, #1
 80084e4:	d1d6      	bne.n	8008494 <_vfiprintf_r+0x1bc>
 80084e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e8:	07d9      	lsls	r1, r3, #31
 80084ea:	d405      	bmi.n	80084f8 <_vfiprintf_r+0x220>
 80084ec:	89ab      	ldrh	r3, [r5, #12]
 80084ee:	059a      	lsls	r2, r3, #22
 80084f0:	d402      	bmi.n	80084f8 <_vfiprintf_r+0x220>
 80084f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f4:	f7ff fdb7 	bl	8008066 <__retarget_lock_release_recursive>
 80084f8:	89ab      	ldrh	r3, [r5, #12]
 80084fa:	065b      	lsls	r3, r3, #25
 80084fc:	f53f af12 	bmi.w	8008324 <_vfiprintf_r+0x4c>
 8008500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008502:	e711      	b.n	8008328 <_vfiprintf_r+0x50>
 8008504:	ab03      	add	r3, sp, #12
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462a      	mov	r2, r5
 800850a:	4b09      	ldr	r3, [pc, #36]	; (8008530 <_vfiprintf_r+0x258>)
 800850c:	a904      	add	r1, sp, #16
 800850e:	4630      	mov	r0, r6
 8008510:	f000 f880 	bl	8008614 <_printf_i>
 8008514:	e7e4      	b.n	80084e0 <_vfiprintf_r+0x208>
 8008516:	bf00      	nop
 8008518:	08008f64 	.word	0x08008f64
 800851c:	08008f84 	.word	0x08008f84
 8008520:	08008f44 	.word	0x08008f44
 8008524:	08008fa4 	.word	0x08008fa4
 8008528:	08008fae 	.word	0x08008fae
 800852c:	00000000 	.word	0x00000000
 8008530:	080082b3 	.word	0x080082b3
 8008534:	08008faa 	.word	0x08008faa

08008538 <_printf_common>:
 8008538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800853c:	4616      	mov	r6, r2
 800853e:	4699      	mov	r9, r3
 8008540:	688a      	ldr	r2, [r1, #8]
 8008542:	690b      	ldr	r3, [r1, #16]
 8008544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008548:	4293      	cmp	r3, r2
 800854a:	bfb8      	it	lt
 800854c:	4613      	movlt	r3, r2
 800854e:	6033      	str	r3, [r6, #0]
 8008550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008554:	4607      	mov	r7, r0
 8008556:	460c      	mov	r4, r1
 8008558:	b10a      	cbz	r2, 800855e <_printf_common+0x26>
 800855a:	3301      	adds	r3, #1
 800855c:	6033      	str	r3, [r6, #0]
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	0699      	lsls	r1, r3, #26
 8008562:	bf42      	ittt	mi
 8008564:	6833      	ldrmi	r3, [r6, #0]
 8008566:	3302      	addmi	r3, #2
 8008568:	6033      	strmi	r3, [r6, #0]
 800856a:	6825      	ldr	r5, [r4, #0]
 800856c:	f015 0506 	ands.w	r5, r5, #6
 8008570:	d106      	bne.n	8008580 <_printf_common+0x48>
 8008572:	f104 0a19 	add.w	sl, r4, #25
 8008576:	68e3      	ldr	r3, [r4, #12]
 8008578:	6832      	ldr	r2, [r6, #0]
 800857a:	1a9b      	subs	r3, r3, r2
 800857c:	42ab      	cmp	r3, r5
 800857e:	dc26      	bgt.n	80085ce <_printf_common+0x96>
 8008580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008584:	1e13      	subs	r3, r2, #0
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	bf18      	it	ne
 800858a:	2301      	movne	r3, #1
 800858c:	0692      	lsls	r2, r2, #26
 800858e:	d42b      	bmi.n	80085e8 <_printf_common+0xb0>
 8008590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008594:	4649      	mov	r1, r9
 8008596:	4638      	mov	r0, r7
 8008598:	47c0      	blx	r8
 800859a:	3001      	adds	r0, #1
 800859c:	d01e      	beq.n	80085dc <_printf_common+0xa4>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	68e5      	ldr	r5, [r4, #12]
 80085a2:	6832      	ldr	r2, [r6, #0]
 80085a4:	f003 0306 	and.w	r3, r3, #6
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	bf08      	it	eq
 80085ac:	1aad      	subeq	r5, r5, r2
 80085ae:	68a3      	ldr	r3, [r4, #8]
 80085b0:	6922      	ldr	r2, [r4, #16]
 80085b2:	bf0c      	ite	eq
 80085b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b8:	2500      	movne	r5, #0
 80085ba:	4293      	cmp	r3, r2
 80085bc:	bfc4      	itt	gt
 80085be:	1a9b      	subgt	r3, r3, r2
 80085c0:	18ed      	addgt	r5, r5, r3
 80085c2:	2600      	movs	r6, #0
 80085c4:	341a      	adds	r4, #26
 80085c6:	42b5      	cmp	r5, r6
 80085c8:	d11a      	bne.n	8008600 <_printf_common+0xc8>
 80085ca:	2000      	movs	r0, #0
 80085cc:	e008      	b.n	80085e0 <_printf_common+0xa8>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4652      	mov	r2, sl
 80085d2:	4649      	mov	r1, r9
 80085d4:	4638      	mov	r0, r7
 80085d6:	47c0      	blx	r8
 80085d8:	3001      	adds	r0, #1
 80085da:	d103      	bne.n	80085e4 <_printf_common+0xac>
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295
 80085e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e4:	3501      	adds	r5, #1
 80085e6:	e7c6      	b.n	8008576 <_printf_common+0x3e>
 80085e8:	18e1      	adds	r1, r4, r3
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	2030      	movs	r0, #48	; 0x30
 80085ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f2:	4422      	add	r2, r4
 80085f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085fc:	3302      	adds	r3, #2
 80085fe:	e7c7      	b.n	8008590 <_printf_common+0x58>
 8008600:	2301      	movs	r3, #1
 8008602:	4622      	mov	r2, r4
 8008604:	4649      	mov	r1, r9
 8008606:	4638      	mov	r0, r7
 8008608:	47c0      	blx	r8
 800860a:	3001      	adds	r0, #1
 800860c:	d0e6      	beq.n	80085dc <_printf_common+0xa4>
 800860e:	3601      	adds	r6, #1
 8008610:	e7d9      	b.n	80085c6 <_printf_common+0x8e>
	...

08008614 <_printf_i>:
 8008614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008618:	460c      	mov	r4, r1
 800861a:	4691      	mov	r9, r2
 800861c:	7e27      	ldrb	r7, [r4, #24]
 800861e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008620:	2f78      	cmp	r7, #120	; 0x78
 8008622:	4680      	mov	r8, r0
 8008624:	469a      	mov	sl, r3
 8008626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800862a:	d807      	bhi.n	800863c <_printf_i+0x28>
 800862c:	2f62      	cmp	r7, #98	; 0x62
 800862e:	d80a      	bhi.n	8008646 <_printf_i+0x32>
 8008630:	2f00      	cmp	r7, #0
 8008632:	f000 80d8 	beq.w	80087e6 <_printf_i+0x1d2>
 8008636:	2f58      	cmp	r7, #88	; 0x58
 8008638:	f000 80a3 	beq.w	8008782 <_printf_i+0x16e>
 800863c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008644:	e03a      	b.n	80086bc <_printf_i+0xa8>
 8008646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800864a:	2b15      	cmp	r3, #21
 800864c:	d8f6      	bhi.n	800863c <_printf_i+0x28>
 800864e:	a001      	add	r0, pc, #4	; (adr r0, 8008654 <_printf_i+0x40>)
 8008650:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008654:	080086ad 	.word	0x080086ad
 8008658:	080086c1 	.word	0x080086c1
 800865c:	0800863d 	.word	0x0800863d
 8008660:	0800863d 	.word	0x0800863d
 8008664:	0800863d 	.word	0x0800863d
 8008668:	0800863d 	.word	0x0800863d
 800866c:	080086c1 	.word	0x080086c1
 8008670:	0800863d 	.word	0x0800863d
 8008674:	0800863d 	.word	0x0800863d
 8008678:	0800863d 	.word	0x0800863d
 800867c:	0800863d 	.word	0x0800863d
 8008680:	080087cd 	.word	0x080087cd
 8008684:	080086f1 	.word	0x080086f1
 8008688:	080087af 	.word	0x080087af
 800868c:	0800863d 	.word	0x0800863d
 8008690:	0800863d 	.word	0x0800863d
 8008694:	080087ef 	.word	0x080087ef
 8008698:	0800863d 	.word	0x0800863d
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	0800863d 	.word	0x0800863d
 80086a4:	0800863d 	.word	0x0800863d
 80086a8:	080087b7 	.word	0x080087b7
 80086ac:	680b      	ldr	r3, [r1, #0]
 80086ae:	1d1a      	adds	r2, r3, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	600a      	str	r2, [r1, #0]
 80086b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086bc:	2301      	movs	r3, #1
 80086be:	e0a3      	b.n	8008808 <_printf_i+0x1f4>
 80086c0:	6825      	ldr	r5, [r4, #0]
 80086c2:	6808      	ldr	r0, [r1, #0]
 80086c4:	062e      	lsls	r6, r5, #24
 80086c6:	f100 0304 	add.w	r3, r0, #4
 80086ca:	d50a      	bpl.n	80086e2 <_printf_i+0xce>
 80086cc:	6805      	ldr	r5, [r0, #0]
 80086ce:	600b      	str	r3, [r1, #0]
 80086d0:	2d00      	cmp	r5, #0
 80086d2:	da03      	bge.n	80086dc <_printf_i+0xc8>
 80086d4:	232d      	movs	r3, #45	; 0x2d
 80086d6:	426d      	negs	r5, r5
 80086d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086dc:	485e      	ldr	r0, [pc, #376]	; (8008858 <_printf_i+0x244>)
 80086de:	230a      	movs	r3, #10
 80086e0:	e019      	b.n	8008716 <_printf_i+0x102>
 80086e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086e6:	6805      	ldr	r5, [r0, #0]
 80086e8:	600b      	str	r3, [r1, #0]
 80086ea:	bf18      	it	ne
 80086ec:	b22d      	sxthne	r5, r5
 80086ee:	e7ef      	b.n	80086d0 <_printf_i+0xbc>
 80086f0:	680b      	ldr	r3, [r1, #0]
 80086f2:	6825      	ldr	r5, [r4, #0]
 80086f4:	1d18      	adds	r0, r3, #4
 80086f6:	6008      	str	r0, [r1, #0]
 80086f8:	0628      	lsls	r0, r5, #24
 80086fa:	d501      	bpl.n	8008700 <_printf_i+0xec>
 80086fc:	681d      	ldr	r5, [r3, #0]
 80086fe:	e002      	b.n	8008706 <_printf_i+0xf2>
 8008700:	0669      	lsls	r1, r5, #25
 8008702:	d5fb      	bpl.n	80086fc <_printf_i+0xe8>
 8008704:	881d      	ldrh	r5, [r3, #0]
 8008706:	4854      	ldr	r0, [pc, #336]	; (8008858 <_printf_i+0x244>)
 8008708:	2f6f      	cmp	r7, #111	; 0x6f
 800870a:	bf0c      	ite	eq
 800870c:	2308      	moveq	r3, #8
 800870e:	230a      	movne	r3, #10
 8008710:	2100      	movs	r1, #0
 8008712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008716:	6866      	ldr	r6, [r4, #4]
 8008718:	60a6      	str	r6, [r4, #8]
 800871a:	2e00      	cmp	r6, #0
 800871c:	bfa2      	ittt	ge
 800871e:	6821      	ldrge	r1, [r4, #0]
 8008720:	f021 0104 	bicge.w	r1, r1, #4
 8008724:	6021      	strge	r1, [r4, #0]
 8008726:	b90d      	cbnz	r5, 800872c <_printf_i+0x118>
 8008728:	2e00      	cmp	r6, #0
 800872a:	d04d      	beq.n	80087c8 <_printf_i+0x1b4>
 800872c:	4616      	mov	r6, r2
 800872e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008732:	fb03 5711 	mls	r7, r3, r1, r5
 8008736:	5dc7      	ldrb	r7, [r0, r7]
 8008738:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800873c:	462f      	mov	r7, r5
 800873e:	42bb      	cmp	r3, r7
 8008740:	460d      	mov	r5, r1
 8008742:	d9f4      	bls.n	800872e <_printf_i+0x11a>
 8008744:	2b08      	cmp	r3, #8
 8008746:	d10b      	bne.n	8008760 <_printf_i+0x14c>
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	07df      	lsls	r7, r3, #31
 800874c:	d508      	bpl.n	8008760 <_printf_i+0x14c>
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	6861      	ldr	r1, [r4, #4]
 8008752:	4299      	cmp	r1, r3
 8008754:	bfde      	ittt	le
 8008756:	2330      	movle	r3, #48	; 0x30
 8008758:	f806 3c01 	strble.w	r3, [r6, #-1]
 800875c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008760:	1b92      	subs	r2, r2, r6
 8008762:	6122      	str	r2, [r4, #16]
 8008764:	f8cd a000 	str.w	sl, [sp]
 8008768:	464b      	mov	r3, r9
 800876a:	aa03      	add	r2, sp, #12
 800876c:	4621      	mov	r1, r4
 800876e:	4640      	mov	r0, r8
 8008770:	f7ff fee2 	bl	8008538 <_printf_common>
 8008774:	3001      	adds	r0, #1
 8008776:	d14c      	bne.n	8008812 <_printf_i+0x1fe>
 8008778:	f04f 30ff 	mov.w	r0, #4294967295
 800877c:	b004      	add	sp, #16
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	4835      	ldr	r0, [pc, #212]	; (8008858 <_printf_i+0x244>)
 8008784:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	680e      	ldr	r6, [r1, #0]
 800878c:	061f      	lsls	r7, r3, #24
 800878e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008792:	600e      	str	r6, [r1, #0]
 8008794:	d514      	bpl.n	80087c0 <_printf_i+0x1ac>
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	bf44      	itt	mi
 800879a:	f043 0320 	orrmi.w	r3, r3, #32
 800879e:	6023      	strmi	r3, [r4, #0]
 80087a0:	b91d      	cbnz	r5, 80087aa <_printf_i+0x196>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	f023 0320 	bic.w	r3, r3, #32
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	2310      	movs	r3, #16
 80087ac:	e7b0      	b.n	8008710 <_printf_i+0xfc>
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	f043 0320 	orr.w	r3, r3, #32
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	2378      	movs	r3, #120	; 0x78
 80087b8:	4828      	ldr	r0, [pc, #160]	; (800885c <_printf_i+0x248>)
 80087ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087be:	e7e3      	b.n	8008788 <_printf_i+0x174>
 80087c0:	065e      	lsls	r6, r3, #25
 80087c2:	bf48      	it	mi
 80087c4:	b2ad      	uxthmi	r5, r5
 80087c6:	e7e6      	b.n	8008796 <_printf_i+0x182>
 80087c8:	4616      	mov	r6, r2
 80087ca:	e7bb      	b.n	8008744 <_printf_i+0x130>
 80087cc:	680b      	ldr	r3, [r1, #0]
 80087ce:	6826      	ldr	r6, [r4, #0]
 80087d0:	6960      	ldr	r0, [r4, #20]
 80087d2:	1d1d      	adds	r5, r3, #4
 80087d4:	600d      	str	r5, [r1, #0]
 80087d6:	0635      	lsls	r5, r6, #24
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	d501      	bpl.n	80087e0 <_printf_i+0x1cc>
 80087dc:	6018      	str	r0, [r3, #0]
 80087de:	e002      	b.n	80087e6 <_printf_i+0x1d2>
 80087e0:	0671      	lsls	r1, r6, #25
 80087e2:	d5fb      	bpl.n	80087dc <_printf_i+0x1c8>
 80087e4:	8018      	strh	r0, [r3, #0]
 80087e6:	2300      	movs	r3, #0
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	4616      	mov	r6, r2
 80087ec:	e7ba      	b.n	8008764 <_printf_i+0x150>
 80087ee:	680b      	ldr	r3, [r1, #0]
 80087f0:	1d1a      	adds	r2, r3, #4
 80087f2:	600a      	str	r2, [r1, #0]
 80087f4:	681e      	ldr	r6, [r3, #0]
 80087f6:	6862      	ldr	r2, [r4, #4]
 80087f8:	2100      	movs	r1, #0
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7f7 fcf0 	bl	80001e0 <memchr>
 8008800:	b108      	cbz	r0, 8008806 <_printf_i+0x1f2>
 8008802:	1b80      	subs	r0, r0, r6
 8008804:	6060      	str	r0, [r4, #4]
 8008806:	6863      	ldr	r3, [r4, #4]
 8008808:	6123      	str	r3, [r4, #16]
 800880a:	2300      	movs	r3, #0
 800880c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008810:	e7a8      	b.n	8008764 <_printf_i+0x150>
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	4632      	mov	r2, r6
 8008816:	4649      	mov	r1, r9
 8008818:	4640      	mov	r0, r8
 800881a:	47d0      	blx	sl
 800881c:	3001      	adds	r0, #1
 800881e:	d0ab      	beq.n	8008778 <_printf_i+0x164>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	079b      	lsls	r3, r3, #30
 8008824:	d413      	bmi.n	800884e <_printf_i+0x23a>
 8008826:	68e0      	ldr	r0, [r4, #12]
 8008828:	9b03      	ldr	r3, [sp, #12]
 800882a:	4298      	cmp	r0, r3
 800882c:	bfb8      	it	lt
 800882e:	4618      	movlt	r0, r3
 8008830:	e7a4      	b.n	800877c <_printf_i+0x168>
 8008832:	2301      	movs	r3, #1
 8008834:	4632      	mov	r2, r6
 8008836:	4649      	mov	r1, r9
 8008838:	4640      	mov	r0, r8
 800883a:	47d0      	blx	sl
 800883c:	3001      	adds	r0, #1
 800883e:	d09b      	beq.n	8008778 <_printf_i+0x164>
 8008840:	3501      	adds	r5, #1
 8008842:	68e3      	ldr	r3, [r4, #12]
 8008844:	9903      	ldr	r1, [sp, #12]
 8008846:	1a5b      	subs	r3, r3, r1
 8008848:	42ab      	cmp	r3, r5
 800884a:	dcf2      	bgt.n	8008832 <_printf_i+0x21e>
 800884c:	e7eb      	b.n	8008826 <_printf_i+0x212>
 800884e:	2500      	movs	r5, #0
 8008850:	f104 0619 	add.w	r6, r4, #25
 8008854:	e7f5      	b.n	8008842 <_printf_i+0x22e>
 8008856:	bf00      	nop
 8008858:	08008fb5 	.word	0x08008fb5
 800885c:	08008fc6 	.word	0x08008fc6

08008860 <_sbrk_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d06      	ldr	r5, [pc, #24]	; (800887c <_sbrk_r+0x1c>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f7f8 f9de 	bl	8000c2c <_sbrk>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_sbrk_r+0x1a>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_sbrk_r+0x1a>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20002524 	.word	0x20002524

08008880 <__sread>:
 8008880:	b510      	push	{r4, lr}
 8008882:	460c      	mov	r4, r1
 8008884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008888:	f000 f8a0 	bl	80089cc <_read_r>
 800888c:	2800      	cmp	r0, #0
 800888e:	bfab      	itete	ge
 8008890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008892:	89a3      	ldrhlt	r3, [r4, #12]
 8008894:	181b      	addge	r3, r3, r0
 8008896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800889a:	bfac      	ite	ge
 800889c:	6563      	strge	r3, [r4, #84]	; 0x54
 800889e:	81a3      	strhlt	r3, [r4, #12]
 80088a0:	bd10      	pop	{r4, pc}

080088a2 <__swrite>:
 80088a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	461f      	mov	r7, r3
 80088a8:	898b      	ldrh	r3, [r1, #12]
 80088aa:	05db      	lsls	r3, r3, #23
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	4616      	mov	r6, r2
 80088b2:	d505      	bpl.n	80088c0 <__swrite+0x1e>
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	2302      	movs	r3, #2
 80088ba:	2200      	movs	r2, #0
 80088bc:	f000 f868 	bl	8008990 <_lseek_r>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	4632      	mov	r2, r6
 80088ce:	463b      	mov	r3, r7
 80088d0:	4628      	mov	r0, r5
 80088d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	f000 b817 	b.w	8008908 <_write_r>

080088da <__sseek>:
 80088da:	b510      	push	{r4, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e2:	f000 f855 	bl	8008990 <_lseek_r>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	bf15      	itete	ne
 80088ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80088ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088f6:	81a3      	strheq	r3, [r4, #12]
 80088f8:	bf18      	it	ne
 80088fa:	81a3      	strhne	r3, [r4, #12]
 80088fc:	bd10      	pop	{r4, pc}

080088fe <__sclose>:
 80088fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008902:	f000 b813 	b.w	800892c <_close_r>
	...

08008908 <_write_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d07      	ldr	r5, [pc, #28]	; (8008928 <_write_r+0x20>)
 800890c:	4604      	mov	r4, r0
 800890e:	4608      	mov	r0, r1
 8008910:	4611      	mov	r1, r2
 8008912:	2200      	movs	r2, #0
 8008914:	602a      	str	r2, [r5, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f7f8 f937 	bl	8000b8a <_write>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_write_r+0x1e>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_write_r+0x1e>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	20002524 	.word	0x20002524

0800892c <_close_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d06      	ldr	r5, [pc, #24]	; (8008948 <_close_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	f7f8 f943 	bl	8000bc2 <_close>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_close_r+0x1a>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_close_r+0x1a>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	20002524 	.word	0x20002524

0800894c <_fstat_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d07      	ldr	r5, [pc, #28]	; (800896c <_fstat_r+0x20>)
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	4611      	mov	r1, r2
 8008958:	602b      	str	r3, [r5, #0]
 800895a:	f7f8 f93e 	bl	8000bda <_fstat>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	d102      	bne.n	8008968 <_fstat_r+0x1c>
 8008962:	682b      	ldr	r3, [r5, #0]
 8008964:	b103      	cbz	r3, 8008968 <_fstat_r+0x1c>
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	bd38      	pop	{r3, r4, r5, pc}
 800896a:	bf00      	nop
 800896c:	20002524 	.word	0x20002524

08008970 <_isatty_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4d06      	ldr	r5, [pc, #24]	; (800898c <_isatty_r+0x1c>)
 8008974:	2300      	movs	r3, #0
 8008976:	4604      	mov	r4, r0
 8008978:	4608      	mov	r0, r1
 800897a:	602b      	str	r3, [r5, #0]
 800897c:	f7f8 f93d 	bl	8000bfa <_isatty>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_isatty_r+0x1a>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	b103      	cbz	r3, 800898a <_isatty_r+0x1a>
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	20002524 	.word	0x20002524

08008990 <_lseek_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d07      	ldr	r5, [pc, #28]	; (80089b0 <_lseek_r+0x20>)
 8008994:	4604      	mov	r4, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	2200      	movs	r2, #0
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7f8 f936 	bl	8000c10 <_lseek>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_lseek_r+0x1e>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_lseek_r+0x1e>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20002524 	.word	0x20002524

080089b4 <__malloc_lock>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__malloc_lock+0x8>)
 80089b6:	f7ff bb55 	b.w	8008064 <__retarget_lock_acquire_recursive>
 80089ba:	bf00      	nop
 80089bc:	2000251c 	.word	0x2000251c

080089c0 <__malloc_unlock>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__malloc_unlock+0x8>)
 80089c2:	f7ff bb50 	b.w	8008066 <__retarget_lock_release_recursive>
 80089c6:	bf00      	nop
 80089c8:	2000251c 	.word	0x2000251c

080089cc <_read_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d07      	ldr	r5, [pc, #28]	; (80089ec <_read_r+0x20>)
 80089d0:	4604      	mov	r4, r0
 80089d2:	4608      	mov	r0, r1
 80089d4:	4611      	mov	r1, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	602a      	str	r2, [r5, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f7f8 f8b8 	bl	8000b50 <_read>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_read_r+0x1e>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_read_r+0x1e>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20002524 	.word	0x20002524

080089f0 <_init>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr

080089fc <_fini>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr
