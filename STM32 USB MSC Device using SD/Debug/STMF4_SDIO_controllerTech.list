
STMF4_SDIO_controllerTech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800ebb0  0800ebb0  0001ebb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1e8  0800f1e8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1e8  0800f1e8  0001f1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1f0  0800f1f0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1f0  0800f1f0  0001f1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1f4  0800f1f4  0001f1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d78  200001e4  0800f3dc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f5c  0800f3dc  00022f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024607  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051ba  00000000  00000000  0004481b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  000499d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0004ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279d4  00000000  00000000  0004c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d42b  00000000  00000000  00073a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf54  00000000  00000000  00090eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015de0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a70  00000000  00000000  0015de60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb98 	.word	0x0800eb98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800eb98 	.word	0x0800eb98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fbd4 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f88a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f93a 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f910 	bl	80007ac <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800058c:	f00c fdfe 	bl	800d18c <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000590:	f000 f8ec 	bl	800076c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000594:	f006 fd04 	bl	8006fa0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //5. File Operations
res=f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	4931      	ldr	r1, [pc, #196]	; (8000660 <main+0xe8>)
 800059c:	4831      	ldr	r0, [pc, #196]	; (8000664 <main+0xec>)
 800059e:	f00b ff25 	bl	800c3ec <f_mount>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <main+0xf0>)
 80005a8:	701a      	strb	r2, [r3, #0]
  	HAL_Delay(200);
 80005aa:	20c8      	movs	r0, #200	; 0xc8
 80005ac:	f000 fc2e 	bl	8000e0c <HAL_Delay>

  		//Open file for writing (Create)
res=f_open(&SDFile, "F7FILE2.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 80005b0:	220a      	movs	r2, #10
 80005b2:	492e      	ldr	r1, [pc, #184]	; (800066c <main+0xf4>)
 80005b4:	482e      	ldr	r0, [pc, #184]	; (8000670 <main+0xf8>)
 80005b6:	f00b ff5f 	bl	800c478 <f_open>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <main+0xf0>)
 80005c0:	701a      	strb	r2, [r3, #0]

  		//Write to the text file
  		res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80005c2:	482c      	ldr	r0, [pc, #176]	; (8000674 <main+0xfc>)
 80005c4:	f7ff fe04 	bl	80001d0 <strlen>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <main+0x100>)
 80005cc:	4929      	ldr	r1, [pc, #164]	; (8000674 <main+0xfc>)
 80005ce:	4828      	ldr	r0, [pc, #160]	; (8000670 <main+0xf8>)
 80005d0:	f00c fa7d 	bl	800cace <f_write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <main+0xf0>)
 80005da:	701a      	strb	r2, [r3, #0]
  		if((byteswritten == 0) || (res != FR_OK))
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <main+0x100>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <main+0x74>
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <main+0xf0>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <main+0x7c>
  		{
  			printf("Failed to write file!\r\n");
 80005ec:	4823      	ldr	r0, [pc, #140]	; (800067c <main+0x104>)
 80005ee:	f00d fc37 	bl	800de60 <puts>
 80005f2:	e002      	b.n	80005fa <main+0x82>
  		}
  		else printf("File written successfully\r\n");
 80005f4:	4822      	ldr	r0, [pc, #136]	; (8000680 <main+0x108>)
 80005f6:	f00d fc33 	bl	800de60 <puts>

  		f_close(&SDFile);
 80005fa:	481d      	ldr	r0, [pc, #116]	; (8000670 <main+0xf8>)
 80005fc:	f00c fc79 	bl	800cef2 <f_close>

  		//Test read file
  		f_open(&SDFile, "F7FILE2.TXT",  FA_READ);
 8000600:	2201      	movs	r2, #1
 8000602:	491a      	ldr	r1, [pc, #104]	; (800066c <main+0xf4>)
 8000604:	481a      	ldr	r0, [pc, #104]	; (8000670 <main+0xf8>)
 8000606:	f00b ff37 	bl	800c478 <f_open>
  		memset(rtext,0,sizeof(rtext));
 800060a:	2264      	movs	r2, #100	; 0x64
 800060c:	2100      	movs	r1, #0
 800060e:	481d      	ldr	r0, [pc, #116]	; (8000684 <main+0x10c>)
 8000610:	f00d faee 	bl	800dbf0 <memset>
  		res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <main+0x110>)
 8000616:	2264      	movs	r2, #100	; 0x64
 8000618:	491a      	ldr	r1, [pc, #104]	; (8000684 <main+0x10c>)
 800061a:	4815      	ldr	r0, [pc, #84]	; (8000670 <main+0xf8>)
 800061c:	f00c f8f8 	bl	800c810 <f_read>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <main+0xf0>)
 8000626:	701a      	strb	r2, [r3, #0]
  		if((bytesread == 0) || (res != FR_OK))
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <main+0x110>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <main+0xc0>
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <main+0xf0>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <main+0xc8>
  		{
  			printf("Failed to read file!\r\n");
 8000638:	4814      	ldr	r0, [pc, #80]	; (800068c <main+0x114>)
 800063a:	f00d fc11 	bl	800de60 <puts>
 800063e:	e006      	b.n	800064e <main+0xd6>
  		}
  		else
  		{
  			printf("File read successfully\r\n");
 8000640:	4813      	ldr	r0, [pc, #76]	; (8000690 <main+0x118>)
 8000642:	f00d fc0d 	bl	800de60 <puts>
  			printf("File content: %s\r\n", (char *)rtext);
 8000646:	490f      	ldr	r1, [pc, #60]	; (8000684 <main+0x10c>)
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <main+0x11c>)
 800064a:	f00d fb83 	bl	800dd54 <iprintf>
  		}
  		f_close(&SDFile);
 800064e:	4808      	ldr	r0, [pc, #32]	; (8000670 <main+0xf8>)
 8000650:	f00c fc4f 	bl	800cef2 <f_close>
  	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <main+0xec>)
 800065a:	f00b fec7 	bl	800c3ec <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0xe6>
 8000660:	20000608 	.word	0x20000608
 8000664:	2000163c 	.word	0x2000163c
 8000668:	200005fc 	.word	0x200005fc
 800066c:	0800ebb0 	.word	0x0800ebb0
 8000670:	2000060c 	.word	0x2000060c
 8000674:	20000000 	.word	0x20000000
 8000678:	200004ac 	.word	0x200004ac
 800067c:	0800ebbc 	.word	0x0800ebbc
 8000680:	0800ebd4 	.word	0x0800ebd4
 8000684:	20000514 	.word	0x20000514
 8000688:	200004b0 	.word	0x200004b0
 800068c:	0800ebf0 	.word	0x0800ebf0
 8000690:	0800ec08 	.word	0x0800ec08
 8000694:	0800ec20 	.word	0x0800ec20

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00d faa2 	bl	800dbf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fb73 	bl	8002e08 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f8b7 	bl	800089a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fdcc 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f8a0 	bl	800089a <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SDIO_SD_Init+0x38>)
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <MX_SDIO_SD_Init+0x3c>)
 8000774:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_SDIO_SD_Init+0x38>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SDIO_SD_Init+0x38>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_SDIO_SD_Init+0x38>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SDIO_SD_Init+0x38>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <MX_SDIO_SD_Init+0x38>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <MX_SDIO_SD_Init+0x38>)
 8000796:	2205      	movs	r2, #5
 8000798:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000578 	.word	0x20000578
 80007a8:	40012c00 	.word	0x40012c00

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_DMA_Init+0x4c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_DMA_Init+0x4c>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_DMA_Init+0x4c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	203b      	movs	r0, #59	; 0x3b
 80007d4:	f000 fc19 	bl	800100a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007d8:	203b      	movs	r0, #59	; 0x3b
 80007da:	f000 fc32 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2045      	movs	r0, #69	; 0x45
 80007e4:	f000 fc11 	bl	800100a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007e8:	2045      	movs	r0, #69	; 0x45
 80007ea:	f000 fc2a 	bl	8001042 <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0x84>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <MX_GPIO_Init+0x84>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_GPIO_Init+0x84>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_GPIO_Init+0x84>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_GPIO_Init+0x84>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_GPIO_Init+0x84>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_GPIO_Init+0x84>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MX_GPIO_Init+0x84>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_GPIO_Init+0x84>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_GPIO_Init+0x84>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <MX_GPIO_Init+0x84>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_GPIO_Init+0x84>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a64      	ldr	r2, [pc, #400]	; (8000aa8 <HAL_SD_MspInit+0x1b0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	f040 80c1 	bne.w	8000a9e <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	4b62      	ldr	r3, [pc, #392]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 8000922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000924:	4a61      	ldr	r2, [pc, #388]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 8000926:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800092a:	6453      	str	r3, [r2, #68]	; 0x44
 800092c:	4b5f      	ldr	r3, [pc, #380]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	4a5a      	ldr	r2, [pc, #360]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b58      	ldr	r3, [pc, #352]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b54      	ldr	r3, [pc, #336]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a53      	ldr	r2, [pc, #332]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b51      	ldr	r3, [pc, #324]	; (8000aac <HAL_SD_MspInit+0x1b4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000970:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000974:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000982:	230c      	movs	r3, #12
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4848      	ldr	r0, [pc, #288]	; (8000ab0 <HAL_SD_MspInit+0x1b8>)
 800098e:	f000 feef 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000992:	2304      	movs	r3, #4
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009a2:	230c      	movs	r3, #12
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4841      	ldr	r0, [pc, #260]	; (8000ab4 <HAL_SD_MspInit+0x1bc>)
 80009ae:	f000 fedf 	bl	8001770 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009b4:	4a41      	ldr	r2, [pc, #260]	; (8000abc <HAL_SD_MspInit+0x1c4>)
 80009b6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80009b8:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009be:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009cc:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009da:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80009e4:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009e6:	2220      	movs	r2, #32
 80009e8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009f8:	2203      	movs	r2, #3
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 80009fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 8000a06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000a0c:	482a      	ldr	r0, [pc, #168]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 8000a0e:	f000 fb33 	bl	8001078 <HAL_DMA_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000a18:	f7ff ff3f 	bl	800089a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 8000a20:	641a      	str	r2, [r3, #64]	; 0x40
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <HAL_SD_MspInit+0x1c0>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a2a:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <HAL_SD_MspInit+0x1cc>)
 8000a2c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a34:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a38:	2240      	movs	r2, #64	; 0x40
 8000a3a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a48:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a50:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a58:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a6e:	2203      	movs	r2, #3
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a82:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a84:	f000 faf8 	bl	8001078 <HAL_DMA_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000a8e:	f7ff ff04 	bl	800089a <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <HAL_SD_MspInit+0x1c8>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40012c00 	.word	0x40012c00
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	2000044c 	.word	0x2000044c
 8000abc:	40026458 	.word	0x40026458
 8000ac0:	200004b4 	.word	0x200004b4
 8000ac4:	400264a0 	.word	0x400264a0

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f956 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <DMA2_Stream3_IRQHandler+0x10>)
 8000b2a:	f000 fbab 	bl	8001284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000044c 	.word	0x2000044c

08000b38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <OTG_FS_IRQHandler+0x10>)
 8000b3e:	f001 f903 	bl	8001d48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20002b44 	.word	0x20002b44

08000b4c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <DMA2_Stream6_IRQHandler+0x10>)
 8000b52:	f000 fb97 	bl	8001284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200004b4 	.word	0x200004b4

08000b60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b72:	f3af 8000 	nop.w
 8000b76:	4601      	mov	r1, r0
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	b2ca      	uxtb	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf0      	blt.n	8000b72 <_read+0x12>
	}

return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e009      	b.n	8000bc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fe65 	bl	8000884 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf1      	blt.n	8000bac <_write+0x12>
	}
	return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f00c ff86 	bl	800db7c <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20000200 	.word	0x20000200
 8000ca4:	20002f60 	.word	0x20002f60

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <SystemInit+0x28>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <SystemInit+0x28>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SystemInit+0x28>)
 8000cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cda:	e003      	b.n	8000ce4 <LoopCopyDataInit>

08000cdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ce0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ce2:	3104      	adds	r1, #4

08000ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ce8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cec:	d3f6      	bcc.n	8000cdc <CopyDataInit>
  ldr  r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cf0:	e002      	b.n	8000cf8 <LoopFillZerobss>

08000cf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cf4:	f842 3b04 	str.w	r3, [r2], #4

08000cf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cfc:	d3f9      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd3 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f00c ff41 	bl	800db88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fc37 	bl	8000578 <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d10:	0800f1f8 	.word	0x0800f1f8
  ldr  r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d18:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000d1c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000d20:	20002f5c 	.word	0x20002f5c

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f94f 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fda4 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f967 	bl	800105e <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f92f 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000001c 	.word	0x2000001c
 8000dc4:	20000024 	.word	0x20000024
 8000dc8:	20000020 	.word	0x20000020

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000024 	.word	0x20000024
 8000df0:	20000600 	.word	0x20000600

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000600 	.word	0x20000600

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000024 	.word	0x20000024

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff3e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff31 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff feb6 	bl	8000df4 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e099      	b.n	80011c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0201 	bic.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b4:	e00f      	b.n	80010d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b6:	f7ff fe9d 	bl	8000df4 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d908      	bls.n	80010d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2220      	movs	r2, #32
 80010c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e078      	b.n	80011c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e8      	bne.n	80010b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_DMA_Init+0x158>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001102:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	2b04      	cmp	r3, #4
 800112e:	d107      	bne.n	8001140 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4313      	orrs	r3, r2
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4313      	orrs	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f023 0307 	bic.w	r3, r3, #7
 8001156:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4313      	orrs	r3, r2
 8001160:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	2b04      	cmp	r3, #4
 8001168:	d117      	bne.n	800119a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00e      	beq.n	800119a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fa7b 	bl	8001678 <DMA_CheckFifoParam>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2240      	movs	r2, #64	; 0x40
 800118c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001196:	2301      	movs	r3, #1
 8001198:	e016      	b.n	80011c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fa32 	bl	800160c <DMA_CalcBaseAndBitshift>
 80011a8:	4603      	mov	r3, r0
 80011aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	223f      	movs	r2, #63	; 0x3f
 80011b2:	409a      	lsls	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	f010803f 	.word	0xf010803f

080011d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_DMA_Start_IT+0x26>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e040      	b.n	800127c <HAL_DMA_Start_IT+0xa8>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d12f      	bne.n	800126e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9c4 	bl	80015b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	223f      	movs	r2, #63	; 0x3f
 800122e:	409a      	lsls	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0216 	orr.w	r2, r2, #22
 8001242:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0208 	orr.w	r2, r2, #8
 800125a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e005      	b.n	800127a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001276:	2302      	movs	r3, #2
 8001278:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800127a:	7dfb      	ldrb	r3, [r7, #23]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001290:	4b92      	ldr	r3, [pc, #584]	; (80014dc <HAL_DMA_IRQHandler+0x258>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a92      	ldr	r2, [pc, #584]	; (80014e0 <HAL_DMA_IRQHandler+0x25c>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0a9b      	lsrs	r3, r3, #10
 800129c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	2208      	movs	r2, #8
 80012b0:	409a      	lsls	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01a      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0204 	bic.w	r2, r2, #4
 80012d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	2208      	movs	r2, #8
 80012de:	409a      	lsls	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	2201      	movs	r2, #1
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d012      	beq.n	8001326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001312:	2201      	movs	r2, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	f043 0202 	orr.w	r2, r3, #2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	2204      	movs	r2, #4
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d012      	beq.n	800135c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2204      	movs	r2, #4
 800134a:	409a      	lsls	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001354:	f043 0204 	orr.w	r2, r3, #4
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	2210      	movs	r2, #16
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d043      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d03c      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	2210      	movs	r2, #16
 8001380:	409a      	lsls	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d108      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d024      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
 80013b2:	e01f      	b.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
 80013c4:	e016      	b.n	80013f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0208 	bic.w	r2, r2, #8
 80013e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	2220      	movs	r2, #32
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 808e 	beq.w	8001522 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8086 	beq.w	8001522 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	2220      	movs	r2, #32
 800141c:	409a      	lsls	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b05      	cmp	r3, #5
 800142c:	d136      	bne.n	800149c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0216 	bic.w	r2, r2, #22
 800143c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800144c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <HAL_DMA_IRQHandler+0x1da>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0208 	bic.w	r2, r2, #8
 800146c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	223f      	movs	r2, #63	; 0x3f
 8001474:	409a      	lsls	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148e:	2b00      	cmp	r3, #0
 8001490:	d07d      	beq.n	800158e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
        }
        return;
 800149a:	e078      	b.n	800158e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01c      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d108      	bne.n	80014ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d030      	beq.n	8001522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
 80014c8:	e02b      	b.n	8001522 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d027      	beq.n	8001522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4798      	blx	r3
 80014da:	e022      	b.n	8001522 <HAL_DMA_IRQHandler+0x29e>
 80014dc:	2000001c 	.word	0x2000001c
 80014e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0210 	bic.w	r2, r2, #16
 8001500:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	2b00      	cmp	r3, #0
 8001528:	d032      	beq.n	8001590 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d022      	beq.n	800157c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	429a      	cmp	r2, r3
 8001558:	d307      	bcc.n	800156a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f2      	bne.n	800154e <HAL_DMA_IRQHandler+0x2ca>
 8001568:	e000      	b.n	800156c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800156a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
 800158c:	e000      	b.n	8001590 <HAL_DMA_IRQHandler+0x30c>
        return;
 800158e:	bf00      	nop
    }
  }
}
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop

08001598 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b40      	cmp	r3, #64	; 0x40
 80015dc:	d108      	bne.n	80015f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015ee:	e007      	b.n	8001600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	60da      	str	r2, [r3, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3b10      	subs	r3, #16
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <DMA_CalcBaseAndBitshift+0x64>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <DMA_CalcBaseAndBitshift+0x68>)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d909      	bls.n	800164e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	1d1a      	adds	r2, r3, #4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	659a      	str	r2, [r3, #88]	; 0x58
 800164c:	e007      	b.n	800165e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	aaaaaaab 	.word	0xaaaaaaab
 8001674:	0800ecd0 	.word	0x0800ecd0

08001678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d11f      	bne.n	80016d2 <DMA_CheckFifoParam+0x5a>
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d856      	bhi.n	8001746 <DMA_CheckFifoParam+0xce>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <DMA_CheckFifoParam+0x28>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016c3 	.word	0x080016c3
 80016a8:	080016b1 	.word	0x080016b1
 80016ac:	08001747 	.word	0x08001747
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d046      	beq.n	800174a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016c0:	e043      	b.n	800174a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ca:	d140      	bne.n	800174e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016d0:	e03d      	b.n	800174e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016da:	d121      	bne.n	8001720 <DMA_CheckFifoParam+0xa8>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d837      	bhi.n	8001752 <DMA_CheckFifoParam+0xda>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <DMA_CheckFifoParam+0x70>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	080016ff 	.word	0x080016ff
 80016f0:	080016f9 	.word	0x080016f9
 80016f4:	08001711 	.word	0x08001711
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
      break;
 80016fc:	e030      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d025      	beq.n	8001756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800170e:	e022      	b.n	8001756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001718:	d11f      	bne.n	800175a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800171e:	e01c      	b.n	800175a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d903      	bls.n	800172e <DMA_CheckFifoParam+0xb6>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d003      	beq.n	8001734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800172c:	e018      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
      break;
 8001732:	e015      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00e      	beq.n	800175e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      break;
 8001744:	e00b      	b.n	800175e <DMA_CheckFifoParam+0xe6>
      break;
 8001746:	bf00      	nop
 8001748:	e00a      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 800174a:	bf00      	nop
 800174c:	e008      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 800174e:	bf00      	nop
 8001750:	e006      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 8001752:	bf00      	nop
 8001754:	e004      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 8001756:	bf00      	nop
 8001758:	e002      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;   
 800175a:	bf00      	nop
 800175c:	e000      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 800175e:	bf00      	nop
    }
  } 
  
  return status; 
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	e16b      	b.n	8001a64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 815a 	bne.w	8001a5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d00b      	beq.n	80017ca <HAL_GPIO_Init+0x5a>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017be:	2b11      	cmp	r3, #17
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d130      	bne.n	800182c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 0201 	and.w	r2, r3, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0xfc>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b12      	cmp	r3, #18
 800186a:	d123      	bne.n	80018b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0203 	and.w	r2, r3, #3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80b4 	beq.w	8001a5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b60      	ldr	r3, [pc, #384]	; (8001a7c <HAL_GPIO_Init+0x30c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a5f      	ldr	r2, [pc, #380]	; (8001a7c <HAL_GPIO_Init+0x30c>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_GPIO_Init+0x30c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001912:	4a5b      	ldr	r2, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x310>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_GPIO_Init+0x314>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02b      	beq.n	8001996 <HAL_GPIO_Init+0x226>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x318>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x222>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a50      	ldr	r2, [pc, #320]	; (8001a8c <HAL_GPIO_Init+0x31c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x21e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <HAL_GPIO_Init+0x320>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x21a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4e      	ldr	r2, [pc, #312]	; (8001a94 <HAL_GPIO_Init+0x324>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x216>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4d      	ldr	r2, [pc, #308]	; (8001a98 <HAL_GPIO_Init+0x328>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x212>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x32c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x20e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_GPIO_Init+0x330>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x20a>
 8001976:	2307      	movs	r3, #7
 8001978:	e00e      	b.n	8001998 <HAL_GPIO_Init+0x228>
 800197a:	2308      	movs	r3, #8
 800197c:	e00c      	b.n	8001998 <HAL_GPIO_Init+0x228>
 800197e:	2306      	movs	r3, #6
 8001980:	e00a      	b.n	8001998 <HAL_GPIO_Init+0x228>
 8001982:	2305      	movs	r3, #5
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x228>
 8001986:	2304      	movs	r3, #4
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x228>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x228>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x228>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x228>
 8001996:	2300      	movs	r3, #0
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f002 0203 	and.w	r2, r2, #3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a8:	4935      	ldr	r1, [pc, #212]	; (8001a80 <HAL_GPIO_Init+0x310>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019da:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a04:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	f67f ae90 	bls.w	800178c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40021400 	.word	0x40021400
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40021c00 	.word	0x40021c00
 8001aa4:	40013c00 	.word	0x40013c00

08001aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b08f      	sub	sp, #60	; 0x3c
 8001aac:	af0a      	add	r7, sp, #40	; 0x28
 8001aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e10f      	b.n	8001cda <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f00b fd35 	bl	800d544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 f840 	bl	8005b7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	687e      	ldr	r6, [r7, #4]
 8001b06:	466d      	mov	r5, sp
 8001b08:	f106 0410 	add.w	r4, r6, #16
 8001b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b1c:	1d33      	adds	r3, r6, #4
 8001b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	f003 ff17 	bl	8005954 <USB_CoreInit>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0d0      	b.n	8001cda <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f82e 	bl	8005ba0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e04a      	b.n	8001be0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	333d      	adds	r3, #61	; 0x3d
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	333c      	adds	r3, #60	; 0x3c
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	b298      	uxth	r0, r3
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	4602      	mov	r2, r0
 8001b88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	333f      	adds	r3, #63	; 0x3f
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	3344      	adds	r3, #68	; 0x44
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3348      	adds	r3, #72	; 0x48
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3350      	adds	r3, #80	; 0x50
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d3af      	bcc.n	8001b4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e044      	b.n	8001c7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3301      	adds	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3b5      	bcc.n	8001bf0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	687e      	ldr	r6, [r7, #4]
 8001c8c:	466d      	mov	r5, sp
 8001c8e:	f106 0410 	add.w	r4, r6, #16
 8001c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ca2:	1d33      	adds	r3, r6, #4
 8001ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca6:	6838      	ldr	r0, [r7, #0]
 8001ca8:	f003 ffa4 	bl	8005bf4 <USB_DevInit>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00d      	b.n	8001cda <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 ffec 	bl	8006cb0 <USB_DevDisconnect>

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ce2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_PCD_Start+0x1c>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e020      	b.n	8001d40 <HAL_PCD_Start+0x5e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d109      	bne.n	8001d22 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d005      	beq.n	8001d22 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 ff18 	bl	8005b5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 ff9c 	bl	8006c6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b08d      	sub	sp, #52	; 0x34
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 f85a 	bl	8006e18 <USB_GetMode>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 839d 	bne.w	80024a6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 ffbe 	bl	8006cf2 <USB_ReadInterrupts>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8393 	beq.w	80024a4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 ffb5 	bl	8006cf2 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d107      	bne.n	8001da2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f002 0202 	and.w	r2, r2, #2
 8001da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 ffa3 	bl	8006cf2 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d161      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0210 	bic.w	r2, r2, #16
 8001dc4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	0c5b      	lsrs	r3, r3, #17
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d124      	bne.n	8001e3c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d035      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	6a38      	ldr	r0, [r7, #32]
 8001e12:	f004 fe09 	bl	8006a28 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e22:	441a      	add	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e34:	441a      	add	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	e016      	b.n	8001e6a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	0c5b      	lsrs	r3, r3, #17
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	2b06      	cmp	r3, #6
 8001e46:	d110      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e4e:	2208      	movs	r2, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	6a38      	ldr	r0, [r7, #32]
 8001e54:	f004 fde8 	bl	8006a28 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e64:	441a      	add	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0210 	orr.w	r2, r2, #16
 8001e78:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 ff37 	bl	8006cf2 <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e8e:	d16e      	bne.n	8001f6e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 ff3d 	bl	8006d18 <USB_ReadDevAllOutEpInterrupt>
 8001e9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ea0:	e062      	b.n	8001f68 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d057      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 ff62 	bl	8006d80 <USB_ReadDevOutEPInterrupt>
 8001ebc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fddd 	bl	8002a9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00c      	beq.n	8001f06 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2308      	movs	r3, #8
 8001efc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fed7 	bl	8002cb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2310      	movs	r3, #16
 8001f20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d009      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f54:	461a      	mov	r2, r3
 8001f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	3301      	adds	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d199      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 febd 	bl	8006cf2 <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f82:	f040 80c0 	bne.w	8002106 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fede 	bl	8006d4c <USB_ReadDevAllInEpInterrupt>
 8001f90:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f96:	e0b2      	b.n	80020fe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80a7 	beq.w	80020f2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 ff04 	bl	8006dbc <USB_ReadDevInEPInterrupt>
 8001fb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d057      	beq.n	8002070 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69f9      	ldr	r1, [r7, #28]
 8001fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d132      	bne.n	8002064 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3348      	adds	r3, #72	; 0x48
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4403      	add	r3, r0
 800201e:	3344      	adds	r3, #68	; 0x44
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4419      	add	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4403      	add	r3, r0
 8002032:	3348      	adds	r3, #72	; 0x48
 8002034:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d113      	bne.n	8002064 <HAL_PCD_IRQHandler+0x31c>
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3350      	adds	r3, #80	; 0x50
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d108      	bne.n	8002064 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800205c:	461a      	mov	r2, r3
 800205e:	2101      	movs	r1, #1
 8002060:	f004 ff0c 	bl	8006e7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	b2db      	uxtb	r3, r3
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f00b faeb 	bl	800d646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002086:	461a      	mov	r2, r3
 8002088:	2308      	movs	r3, #8
 800208a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a2:	461a      	mov	r2, r3
 80020a4:	2310      	movs	r3, #16
 80020a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020be:	461a      	mov	r2, r3
 80020c0:	2340      	movs	r3, #64	; 0x40
 80020c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020da:	461a      	mov	r2, r3
 80020dc:	2302      	movs	r3, #2
 80020de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fc48 	bl	8002982 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f af49 	bne.w	8001f98 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fdf1 	bl	8006cf2 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800211a:	d122      	bne.n	8002162 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002142:	2100      	movs	r1, #0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fe53 	bl	8002df0 <HAL_PCDEx_LPM_Callback>
 800214a:	e002      	b.n	8002152 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f00b faf1 	bl	800d734 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fdc3 	bl	8006cf2 <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002176:	d112      	bne.n	800219e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d102      	bne.n	800218e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f00b faad 	bl	800d6e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800219c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fda5 	bl	8006cf2 <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b2:	f040 80c7 	bne.w	8002344 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2110      	movs	r1, #16
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fe73 	bl	8005ebc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021da:	e056      	b.n	800228a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e8:	461a      	mov	r2, r3
 80021ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002200:	0151      	lsls	r1, r2, #5
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	440a      	add	r2, r1
 8002206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800220a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800220e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002220:	0151      	lsls	r1, r2, #5
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	440a      	add	r2, r1
 8002226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800222a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800222e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223c:	461a      	mov	r2, r3
 800223e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002242:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002254:	0151      	lsls	r1, r2, #5
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	440a      	add	r2, r1
 800225a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800225e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002262:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002274:	0151      	lsls	r1, r2, #5
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	440a      	add	r2, r1
 800227a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800227e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002282:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	3301      	adds	r3, #1
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002290:	429a      	cmp	r2, r3
 8002292:	d3a3      	bcc.n	80021dc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d016      	beq.n	80022de <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c0:	f043 030b 	orr.w	r3, r3, #11
 80022c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d6:	f043 030b 	orr.w	r3, r3, #11
 80022da:	6453      	str	r3, [r2, #68]	; 0x44
 80022dc:	e015      	b.n	800230a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022f0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002304:	f043 030b 	orr.w	r3, r3, #11
 8002308:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002318:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800231c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800232e:	461a      	mov	r2, r3
 8002330:	f004 fda4 	bl	8006e7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fcd2 	bl	8006cf2 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	d124      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fd68 	bl	8006e34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fe08 	bl	8005f7e <USB_GetDevSpeed>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681c      	ldr	r4, [r3, #0]
 800237a:	f001 f97d 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 800237e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	4620      	mov	r0, r4
 800238a:	f003 fb45 	bl	8005a18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f00b f981 	bl	800d696 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 fca2 	bl	8006cf2 <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d10a      	bne.n	80023ce <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f00b f95e 	bl	800d67a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 0208 	and.w	r2, r2, #8
 80023cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 fc8d 	bl	8006cf2 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e2:	d10f      	bne.n	8002404 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f00b f9c0 	bl	800d774 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f004 fc72 	bl	8006cf2 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002418:	d10f      	bne.n	800243a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f00b f993 	bl	800d750 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fc57 	bl	8006cf2 <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d10a      	bne.n	8002466 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f00b f9a1 	bl	800d798 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fc41 	bl	8006cf2 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d115      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f00b f991 	bl	800d7b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e000      	b.n	80024a6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80024a4:	bf00      	nop
    }
  }
}
 80024a6:	3734      	adds	r7, #52	; 0x34
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}

080024ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_SetAddress+0x1a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e013      	b.n	80024ee <HAL_PCD_SetAddress+0x42>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fb9f 	bl	8006c22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	4608      	mov	r0, r1
 8002500:	4611      	mov	r1, r2
 8002502:	461a      	mov	r2, r3
 8002504:	4603      	mov	r3, r0
 8002506:	70fb      	strb	r3, [r7, #3]
 8002508:	460b      	mov	r3, r1
 800250a:	803b      	strh	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da0f      	bge.n	800253c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 020f 	and.w	r2, r3, #15
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	3338      	adds	r3, #56	; 0x38
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	705a      	strb	r2, [r3, #1]
 800253a:	e00f      	b.n	800255c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 020f 	and.w	r2, r3, #15
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002568:	883a      	ldrh	r2, [r7, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	78ba      	ldrb	r2, [r7, #2]
 8002572:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002586:	78bb      	ldrb	r3, [r7, #2]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d102      	bne.n	8002592 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_EP_Open+0xaa>
 800259c:	2302      	movs	r3, #2
 800259e:	e00e      	b.n	80025be <HAL_PCD_EP_Open+0xc8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fd0a 	bl	8005fc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da0f      	bge.n	80025fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	3338      	adds	r3, #56	; 0x38
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	3304      	adds	r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	705a      	strb	r2, [r3, #1]
 80025f8:	e00f      	b.n	800261a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_PCD_EP_Close+0x6e>
 8002630:	2302      	movs	r3, #2
 8002632:	e00e      	b.n	8002652 <HAL_PCD_EP_Close+0x8c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fd48 	bl	80060d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	460b      	mov	r3, r1
 8002668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	3304      	adds	r3, #4
 8002682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800269c:	7afb      	ldrb	r3, [r7, #11]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d102      	bne.n	80026b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	6979      	ldr	r1, [r7, #20]
 80026ce:	f004 f823 	bl	8006718 <USB_EP0StartXfer>
 80026d2:	e008      	b.n	80026e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	6979      	ldr	r1, [r7, #20]
 80026e2:	f003 fdd5 	bl	8006290 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	460b      	mov	r3, r1
 800272e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002730:	7afb      	ldrb	r3, [r7, #11]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	3338      	adds	r3, #56	; 0x38
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	3304      	adds	r3, #4
 8002746:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2201      	movs	r2, #1
 800275e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	b2da      	uxtb	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	f003 ffc1 	bl	8006718 <USB_EP0StartXfer>
 8002796:	e008      	b.n	80027aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	6979      	ldr	r1, [r7, #20]
 80027a6:	f003 fd73 	bl	8006290 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 020f 	and.w	r2, r3, #15
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d901      	bls.n	80027d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e050      	b.n	8002874 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	da0f      	bge.n	80027fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	3338      	adds	r3, #56	; 0x38
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	3304      	adds	r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	705a      	strb	r2, [r3, #1]
 80027f8:	e00d      	b.n	8002816 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_PCD_EP_SetStall+0x82>
 8002832:	2302      	movs	r3, #2
 8002834:	e01e      	b.n	8002874 <HAL_PCD_EP_SetStall+0xc0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f004 f918 	bl	8006a7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	b2d9      	uxtb	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002864:	461a      	mov	r2, r3
 8002866:	f004 fb09 	bl	8006e7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d901      	bls.n	800289a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e042      	b.n	8002920 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800289a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da0f      	bge.n	80028c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	3338      	adds	r3, #56	; 0x38
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00f      	b.n	80028e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_EP_ClrStall+0x86>
 80028fe:	2302      	movs	r3, #2
 8002900:	e00e      	b.n	8002920 <HAL_PCD_EP_ClrStall+0xa4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	f004 f920 	bl	8006b56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_PCD_EP_Flush+0x1a>
 800293e:	2302      	movs	r3, #2
 8002940:	e01b      	b.n	800297a <HAL_PCD_EP_Flush+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800294a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da09      	bge.n	8002966 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f003 faac 	bl	8005ebc <USB_FlushTxFifo>
 8002964:	e004      	b.n	8002970 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 facc 	bl	8005f08 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b08a      	sub	sp, #40	; 0x28
 8002986:	af02      	add	r7, sp, #8
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	3338      	adds	r3, #56	; 0x38
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d901      	bls.n	80029ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06c      	b.n	8002a94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d902      	bls.n	80029d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3303      	adds	r3, #3
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029de:	e02b      	b.n	8002a38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d902      	bls.n	80029fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3303      	adds	r3, #3
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68d9      	ldr	r1, [r3, #12]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4603      	mov	r3, r0
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f003 ffcf 	bl	80069be <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	441a      	add	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	441a      	add	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d809      	bhi.n	8002a62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d203      	bcs.n	8002a62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1be      	bne.n	80029e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d811      	bhi.n	8002a92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	2201      	movs	r2, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	6939      	ldr	r1, [r7, #16]
 8002a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a8e:	4013      	ands	r3, r2
 8002a90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	333c      	adds	r3, #60	; 0x3c
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f040 80a0 	bne.w	8002c14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d015      	beq.n	8002b0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a72      	ldr	r2, [pc, #456]	; (8002cac <PCD_EP_OutXfrComplete_int+0x210>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f240 80dd 	bls.w	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80d7 	beq.w	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b00:	461a      	mov	r2, r3
 8002b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b06:	6093      	str	r3, [r2, #8]
 8002b08:	e0cb      	b.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b20:	461a      	mov	r2, r3
 8002b22:	2320      	movs	r3, #32
 8002b24:	6093      	str	r3, [r2, #8]
 8002b26:	e0bc      	b.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 80b7 	bne.w	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a5d      	ldr	r2, [pc, #372]	; (8002cac <PCD_EP_OutXfrComplete_int+0x210>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d90f      	bls.n	8002b5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b52:	461a      	mov	r2, r3
 8002b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b58:	6093      	str	r3, [r2, #8]
 8002b5a:	e0a2      	b.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002b82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4403      	add	r3, r0
 8002b92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4403      	add	r3, r0
 8002bba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4419      	add	r1, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4403      	add	r3, r0
 8002bd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bd4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d114      	bne.n	8002c06 <PCD_EP_OutXfrComplete_int+0x16a>
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d108      	bne.n	8002c06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2101      	movs	r1, #1
 8002c02:	f004 f93b 	bl	8006e7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f00a fcff 	bl	800d610 <HAL_PCD_DataOutStageCallback>
 8002c12:	e046      	b.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d124      	bne.n	8002c66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c32:	461a      	mov	r2, r3
 8002c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c38:	6093      	str	r3, [r2, #8]
 8002c3a:	e032      	b.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c52:	461a      	mov	r2, r3
 8002c54:	2320      	movs	r3, #32
 8002c56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f00a fcd6 	bl	800d610 <HAL_PCD_DataOutStageCallback>
 8002c64:	e01d      	b.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d114      	bne.n	8002c96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d108      	bne.n	8002c96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2100      	movs	r1, #0
 8002c92:	f004 f8f3 	bl	8006e7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f00a fcb7 	bl	800d610 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	4f54300a 	.word	0x4f54300a
 8002cb0:	4f54310a 	.word	0x4f54310a

08002cb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	333c      	adds	r3, #60	; 0x3c
 8002ccc:	3304      	adds	r3, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d90e      	bls.n	8002d08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d00:	461a      	mov	r2, r3
 8002d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f00a fc6f 	bl	800d5ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d90c      	bls.n	8002d30 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	f004 f8a6 	bl	8006e7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	4f54300a 	.word	0x4f54300a

08002d40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d5e:	883b      	ldrh	r3, [r7, #0]
 8002d60:	0419      	lsls	r1, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d6c:	e028      	b.n	8002dc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	4413      	add	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e00d      	b.n	8002d9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	3340      	adds	r3, #64	; 0x40
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	4413      	add	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d3ec      	bcc.n	8002d82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002da8:	883b      	ldrh	r3, [r7, #0]
 8002daa:	0418      	lsls	r0, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	4302      	orrs	r2, r0
 8002db8:	3340      	adds	r3, #64	; 0x40
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e25b      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d075      	beq.n	8002f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e26:	4ba3      	ldr	r3, [pc, #652]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d00c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e32:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d112      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3e:	4b9d      	ldr	r3, [pc, #628]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	4b99      	ldr	r3, [pc, #612]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d05b      	beq.n	8002f10 <HAL_RCC_OscConfig+0x108>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d157      	bne.n	8002f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e236      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x74>
 8002e6e:	4b91      	ldr	r3, [pc, #580]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a90      	ldr	r2, [pc, #576]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e01d      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a8a      	ldr	r2, [pc, #552]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a87      	ldr	r2, [pc, #540]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb0>
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b81      	ldr	r3, [pc, #516]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a80      	ldr	r2, [pc, #512]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd ff98 	bl	8000df4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fd ff94 	bl	8000df4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1fb      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xc0>
 8002ee6:	e014      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fd ff84 	bl	8000df4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fd ff80 	bl	8000df4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1e7      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xe8>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1e:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2a:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d11c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d116      	bne.n	8002f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	4b5c      	ldr	r3, [pc, #368]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_RCC_OscConfig+0x152>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e1bb      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5a:	4b56      	ldr	r3, [pc, #344]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4952      	ldr	r1, [pc, #328]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	e03a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f78:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <HAL_RCC_OscConfig+0x2b0>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fd ff39 	bl	8000df4 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f86:	f7fd ff35 	bl	8000df4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e19c      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4940      	ldr	r1, [pc, #256]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_OscConfig+0x2b0>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fd ff18 	bl	8000df4 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7fd ff14 	bl	8000df4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e17b      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d030      	beq.n	8003054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_RCC_OscConfig+0x2b4>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd fef8 	bl	8000df4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003008:	f7fd fef4 	bl	8000df4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e15b      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x200>
 8003026:	e015      	b.n	8003054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_OscConfig+0x2b4>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302e:	f7fd fee1 	bl	8000df4 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003036:	f7fd fedd 	bl	8000df4 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e144      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a0 	beq.w	80031a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x2b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d121      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_RCC_OscConfig+0x2b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_RCC_OscConfig+0x2b8>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fd fea3 	bl	8000df4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	e011      	b.n	80030d6 <HAL_RCC_OscConfig+0x2ce>
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	42470000 	.word	0x42470000
 80030bc:	42470e80 	.word	0x42470e80
 80030c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c4:	f7fd fe96 	bl	8000df4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0fd      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b81      	ldr	r3, [pc, #516]	; (80032dc <HAL_RCC_OscConfig+0x4d4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
 80030ea:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	e01c      	b.n	8003132 <HAL_RCC_OscConfig+0x32a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x312>
 8003100:	4b77      	ldr	r3, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a76      	ldr	r2, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	4b74      	ldr	r3, [pc, #464]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x32a>
 800311a:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a70      	ldr	r2, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	4b6e      	ldr	r3, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a6d      	ldr	r2, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fd fe5b 	bl	8000df4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd fe57 	bl	8000df4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0bc      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x33a>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fd fe45 	bl	8000df4 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd fe41 	bl	8000df4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0a6      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	4b56      	ldr	r3, [pc, #344]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a51      	ldr	r2, [pc, #324]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8092 	beq.w	80032d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d05c      	beq.n	8003272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d141      	bne.n	8003244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCC_OscConfig+0x4dc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fd fe15 	bl	8000df4 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fd fe11 	bl	8000df4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e078      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	019b      	lsls	r3, r3, #6
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	4933      	ldr	r1, [pc, #204]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003216:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_RCC_OscConfig+0x4dc>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fd fdea 	bl	8000df4 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fd fde6 	bl	8000df4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e04d      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x41c>
 8003242:	e045      	b.n	80032d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x4dc>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fd fdd3 	bl	8000df4 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7fd fdcf 	bl	8000df4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e036      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x44a>
 8003270:	e02e      	b.n	80032d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e029      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_RCC_OscConfig+0x4d8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	429a      	cmp	r2, r3
 8003290:	d11c      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d115      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d10d      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470060 	.word	0x42470060

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0cc      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90c      	bls.n	8003324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a58      	ldr	r2, [pc, #352]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003354:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	494d      	ldr	r1, [pc, #308]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d044      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d119      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e067      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4934      	ldr	r1, [pc, #208]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fd fd0c 	bl	8000df4 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fd fd08 	bl	8000df4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e04f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d20c      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e032      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4916      	ldr	r1, [pc, #88]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	490e      	ldr	r1, [pc, #56]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346e:	f000 f821 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003472:	4602      	mov	r2, r0
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	490a      	ldr	r1, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	5ccb      	ldrb	r3, [r1, r3]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fc6c 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	40023800 	.word	0x40023800
 80034a8:	0800ecc0 	.word	0x0800ecc0
 80034ac:	2000001c 	.word	0x2000001c
 80034b0:	20000020 	.word	0x20000020

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	2300      	movs	r3, #0
 80034c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034cc:	4b67      	ldr	r3, [pc, #412]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x40>
 80034d8:	2b08      	cmp	r3, #8
 80034da:	f200 80bd 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x34>
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x3a>
 80034e6:	e0b7      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034ea:	60bb      	str	r3, [r7, #8]
       break;
 80034ec:	e0b7      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034f0:	60bb      	str	r3, [r7, #8]
      break;
 80034f2:	e0b4      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04d      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b58      	ldr	r3, [pc, #352]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	461a      	mov	r2, r3
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	ea02 0800 	and.w	r8, r2, r0
 8003522:	ea03 0901 	and.w	r9, r3, r1
 8003526:	4640      	mov	r0, r8
 8003528:	4649      	mov	r1, r9
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	014b      	lsls	r3, r1, #5
 8003534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003538:	0142      	lsls	r2, r0, #5
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	ebb0 0008 	subs.w	r0, r0, r8
 8003542:	eb61 0109 	sbc.w	r1, r1, r9
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	018b      	lsls	r3, r1, #6
 8003550:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003554:	0182      	lsls	r2, r0, #6
 8003556:	1a12      	subs	r2, r2, r0
 8003558:	eb63 0301 	sbc.w	r3, r3, r1
 800355c:	f04f 0000 	mov.w	r0, #0
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	00d9      	lsls	r1, r3, #3
 8003566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800356a:	00d0      	lsls	r0, r2, #3
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	eb12 0208 	adds.w	r2, r2, r8
 8003574:	eb43 0309 	adc.w	r3, r3, r9
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	0259      	lsls	r1, r3, #9
 8003582:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003586:	0250      	lsls	r0, r2, #9
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f7fc fe72 	bl	8000280 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e04a      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	461a      	mov	r2, r3
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	ea02 0400 	and.w	r4, r2, r0
 80035be:	ea03 0501 	and.w	r5, r3, r1
 80035c2:	4620      	mov	r0, r4
 80035c4:	4629      	mov	r1, r5
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	014b      	lsls	r3, r1, #5
 80035d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035d4:	0142      	lsls	r2, r0, #5
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	1b00      	subs	r0, r0, r4
 80035dc:	eb61 0105 	sbc.w	r1, r1, r5
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	018b      	lsls	r3, r1, #6
 80035ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ee:	0182      	lsls	r2, r0, #6
 80035f0:	1a12      	subs	r2, r2, r0
 80035f2:	eb63 0301 	sbc.w	r3, r3, r1
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	00d9      	lsls	r1, r3, #3
 8003600:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003604:	00d0      	lsls	r0, r2, #3
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	1912      	adds	r2, r2, r4
 800360c:	eb45 0303 	adc.w	r3, r5, r3
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	0299      	lsls	r1, r3, #10
 800361a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800361e:	0290      	lsls	r0, r2, #10
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	f7fc fe26 	bl	8000280 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	60bb      	str	r3, [r7, #8]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800365a:	60bb      	str	r3, [r7, #8]
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	68bb      	ldr	r3, [r7, #8]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	2000001c 	.word	0x2000001c

08003690 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e022      	b.n	80036e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd f91f 	bl	80008f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f814 	bl	80036f0 <HAL_SD_InitCard>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00a      	b.n	80036e8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80036f0:	b5b0      	push	{r4, r5, r7, lr}
 80036f2:	b08e      	sub	sp, #56	; 0x38
 80036f4:	af04      	add	r7, sp, #16
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800370c:	2376      	movs	r3, #118	; 0x76
 800370e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681d      	ldr	r5, [r3, #0]
 8003714:	466c      	mov	r4, sp
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800371e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003728:	4628      	mov	r0, r5
 800372a:	f001 fbaf 	bl	8004e8c <SDIO_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e031      	b.n	80037a4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_SD_InitCard+0xbc>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f001 fbe7 	bl	8004f1e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <HAL_SD_InitCard+0xbc>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f001 f982 	bl	8004a60 <SD_PowerON>
 800375c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e013      	b.n	80037a4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 f8a3 	bl	80048c8 <SD_InitCard>
 8003782:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bdb0      	pop	{r4, r5, r7, pc}
 80037ac:	422580a0 	.word	0x422580a0

080037b0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b092      	sub	sp, #72	; 0x48
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037be:	f7fd fb19 	bl	8000df4 <HAL_GetTick>
 80037c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d107      	bne.n	80037e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e1d9      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	f040 81cc 	bne.w	8003b88 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80037f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	441a      	add	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	429a      	cmp	r2, r3
 8003802:	d907      	bls.n	8003814 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e1c0      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2203      	movs	r2, #3
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	025b      	lsls	r3, r3, #9
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fc02 	bl	8005044 <SDMMC_CmdBlockLength>
 8003840:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00f      	beq.n	8003868 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a9b      	ldr	r2, [pc, #620]	; (8003abc <HAL_SD_ReadBlocks+0x30c>)
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003856:	431a      	orrs	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e196      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
 800386c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	025b      	lsls	r3, r3, #9
 8003872:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003874:	2390      	movs	r3, #144	; 0x90
 8003876:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003878:	2302      	movs	r3, #2
 800387a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003880:	2301      	movs	r3, #1
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f107 0214 	add.w	r2, r7, #20
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f001 fbac 	bl	8004fec <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d90a      	bls.n	80038b0 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2202      	movs	r2, #2
 800389e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 fc10 	bl	80050cc <SDMMC_CmdReadMultiBlock>
 80038ac:	6478      	str	r0, [r7, #68]	; 0x44
 80038ae:	e009      	b.n	80038c4 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fbe3 	bl	8005088 <SDMMC_CmdReadSingleBlock>
 80038c2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7b      	ldr	r2, [pc, #492]	; (8003abc <HAL_SD_ReadBlocks+0x30c>)
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e152      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80038f4:	e061      	b.n	80039ba <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03c      	beq.n	800397e <HAL_SD_ReadBlocks+0x1ce>
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d039      	beq.n	800397e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800390a:	2300      	movs	r3, #0
 800390c:	643b      	str	r3, [r7, #64]	; 0x40
 800390e:	e033      	b.n	8003978 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fae4 	bl	8004ee2 <SDIO_ReadFIFO>
 800391a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	b2da      	uxtb	r2, r3
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	3301      	adds	r3, #1
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	3b01      	subs	r3, #1
 800392e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	b2da      	uxtb	r2, r3
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	3301      	adds	r3, #1
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003942:	3b01      	subs	r3, #1
 8003944:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	b2da      	uxtb	r2, r3
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003952:	3301      	adds	r3, #1
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	3b01      	subs	r3, #1
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	0e1b      	lsrs	r3, r3, #24
 8003960:	b2da      	uxtb	r2, r3
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003968:	3301      	adds	r3, #1
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	3b01      	subs	r3, #1
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003974:	3301      	adds	r3, #1
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
 8003978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397a:	2b07      	cmp	r3, #7
 800397c:	d9c8      	bls.n	8003910 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800397e:	f7fd fa39 	bl	8000df4 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800398a:	429a      	cmp	r2, r3
 800398c:	d902      	bls.n	8003994 <HAL_SD_ReadBlocks+0x1e4>
 800398e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003990:	2b00      	cmp	r3, #0
 8003992:	d112      	bne.n	80039ba <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a48      	ldr	r2, [pc, #288]	; (8003abc <HAL_SD_ReadBlocks+0x30c>)
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0ed      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c0:	f240 332a 	movw	r3, #810	; 0x32a
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d095      	beq.n	80038f6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d022      	beq.n	8003a1e <HAL_SD_ReadBlocks+0x26e>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d91f      	bls.n	8003a1e <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d01b      	beq.n	8003a1e <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 fbd4 	bl	8005198 <SDMMC_CmdStopTransfer>
 80039f0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80039f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <HAL_SD_ReadBlocks+0x30c>)
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a06:	431a      	orrs	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0bb      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <HAL_SD_ReadBlocks+0x30c>)
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	f043 0208 	orr.w	r2, r3, #8
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0a1      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d012      	beq.n	8003a86 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a15      	ldr	r2, [pc, #84]	; (8003abc <HAL_SD_ReadBlocks+0x30c>)
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	f043 0202 	orr.w	r2, r3, #2
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e087      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d064      	beq.n	8003b5e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_SD_ReadBlocks+0x30c>)
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06d      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
 8003aba:	bf00      	nop
 8003abc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fa0c 	bl	8004ee2 <SDIO_ReadFIFO>
 8003aca:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	3b01      	subs	r3, #1
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	3301      	adds	r3, #1
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af2:	3b01      	subs	r3, #1
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	3301      	adds	r3, #1
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	0e1b      	lsrs	r3, r3, #24
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	3301      	adds	r3, #1
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003b22:	f7fd f967 	bl	8000df4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d902      	bls.n	8003b38 <HAL_SD_ReadBlocks+0x388>
 8003b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d112      	bne.n	8003b5e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_SD_ReadBlocks+0x3f0>)
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e01b      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_SD_ReadBlocks+0x3c2>
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1a6      	bne.n	8003ac0 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e006      	b.n	8003b96 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3748      	adds	r7, #72	; 0x48
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	004005ff 	.word	0x004005ff

08003ba4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b092      	sub	sp, #72	; 0x48
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003bb2:	f7fd f91f 	bl	8000df4 <HAL_GetTick>
 8003bb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d107      	bne.n	8003bd6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e184      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	f040 8177 	bne.w	8003ed2 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d907      	bls.n	8003c08 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e16b      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2200      	movs	r2, #0
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d002      	beq.n	8003c26 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	025b      	lsls	r3, r3, #9
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fa08 	bl	8005044 <SDMMC_CmdBlockLength>
 8003c34:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00f      	beq.n	8003c5c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a9d      	ldr	r2, [pc, #628]	; (8003eb8 <HAL_SD_WriteBlocks+0x314>)
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e141      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c60:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	025b      	lsls	r3, r3, #9
 8003c66:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003c68:	2390      	movs	r3, #144	; 0x90
 8003c6a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f107 0218 	add.w	r2, r7, #24
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f9b2 	bl	8004fec <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d90a      	bls.n	8003ca4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 fa5a 	bl	8005154 <SDMMC_CmdWriteMultiBlock>
 8003ca0:	6478      	str	r0, [r7, #68]	; 0x44
 8003ca2:	e009      	b.n	8003cb8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 fa2d 	bl	8005110 <SDMMC_CmdWriteSingleBlock>
 8003cb6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d012      	beq.n	8003ce4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7d      	ldr	r2, [pc, #500]	; (8003eb8 <HAL_SD_WriteBlocks+0x314>)
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0fd      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003ce8:	e065      	b.n	8003db6 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d040      	beq.n	8003d7a <HAL_SD_WriteBlocks+0x1d6>
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d03d      	beq.n	8003d7a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	643b      	str	r3, [r7, #64]	; 0x40
 8003d02:	e037      	b.n	8003d74 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d12:	3b01      	subs	r3, #1
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d24:	3301      	adds	r3, #1
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	041a      	lsls	r2, r3, #16
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	3b01      	subs	r3, #1
 8003d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	061a      	lsls	r2, r3, #24
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d54:	3301      	adds	r3, #1
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f107 0214 	add.w	r2, r7, #20
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 f8c7 	bl	8004efc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d70:	3301      	adds	r3, #1
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
 8003d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d76:	2b07      	cmp	r3, #7
 8003d78:	d9c4      	bls.n	8003d04 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d7a:	f7fd f83b 	bl	8000df4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d902      	bls.n	8003d90 <HAL_SD_WriteBlocks+0x1ec>
 8003d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d112      	bne.n	8003db6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a48      	ldr	r2, [pc, #288]	; (8003eb8 <HAL_SD_WriteBlocks+0x314>)
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e094      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbc:	f240 331a 	movw	r3, #794	; 0x31a
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d091      	beq.n	8003cea <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d022      	beq.n	8003e1a <HAL_SD_WriteBlocks+0x276>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d91f      	bls.n	8003e1a <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d01b      	beq.n	8003e1a <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 f9d6 	bl	8005198 <SDMMC_CmdStopTransfer>
 8003dec:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2f      	ldr	r2, [pc, #188]	; (8003eb8 <HAL_SD_WriteBlocks+0x314>)
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	431a      	orrs	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e062      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d012      	beq.n	8003e4e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <HAL_SD_WriteBlocks+0x314>)
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	f043 0208 	orr.w	r2, r3, #8
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e048      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d012      	beq.n	8003e82 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <HAL_SD_WriteBlocks+0x314>)
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f043 0202 	orr.w	r2, r3, #2
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e02e      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_SD_WriteBlocks+0x314>)
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	f043 0210 	orr.w	r2, r3, #16
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e014      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
 8003eb6:	bf00      	nop
 8003eb8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e006      	b.n	8003ee0 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3748      	adds	r7, #72	; 0x48
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0c9      	b.n	80040a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	f040 80c2 	bne.w	80040a2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	441a      	add	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d907      	bls.n	8003f42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0b0      	b.n	80040a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2203      	movs	r2, #3
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a50      	ldr	r2, [pc, #320]	; (80040ac <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a4f      	ldr	r2, [pc, #316]	; (80040b0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3380      	adds	r3, #128	; 0x80
 8003f88:	4619      	mov	r1, r3
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	025b      	lsls	r3, r3, #9
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	f7fd f91f 	bl	80011d4 <HAL_DMA_Start_IT>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d017      	beq.n	8003fcc <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003faa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a40      	ldr	r2, [pc, #256]	; (80040b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e06b      	b.n	80040a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	025b      	lsls	r3, r3, #9
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 f82b 	bl	8005044 <SDMMC_CmdBlockLength>
 8003fee:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00f      	beq.n	8004016 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e046      	b.n	80040a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004016:	f04f 33ff 	mov.w	r3, #4294967295
 800401a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	025b      	lsls	r3, r3, #9
 8004020:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004022:	2390      	movs	r3, #144	; 0x90
 8004024:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004026:	2302      	movs	r3, #2
 8004028:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800402e:	2301      	movs	r3, #1
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f107 0210 	add.w	r2, r7, #16
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 ffd5 	bl	8004fec <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d90a      	bls.n	800405e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2282      	movs	r2, #130	; 0x82
 800404c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f839 	bl	80050cc <SDMMC_CmdReadMultiBlock>
 800405a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800405c:	e009      	b.n	8004072 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2281      	movs	r2, #129	; 0x81
 8004062:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406a:	4618      	mov	r0, r3
 800406c:	f001 f80c 	bl	8005088 <SDMMC_CmdReadSingleBlock>
 8004070:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d012      	beq.n	800409e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004086:	431a      	orrs	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e002      	b.n	80040a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3730      	adds	r7, #48	; 0x30
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	080047b3 	.word	0x080047b3
 80040b0:	08004825 	.word	0x08004825
 80040b4:	004005ff 	.word	0x004005ff
 80040b8:	4225858c 	.word	0x4225858c

080040bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	; 0x30
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0ce      	b.n	8004282 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	f040 80c7 	bne.w	8004280 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	441a      	add	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	429a      	cmp	r2, r3
 8004104:	d907      	bls.n	8004116 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0b5      	b.n	8004282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2203      	movs	r2, #3
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2200      	movs	r2, #0
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	4a53      	ldr	r2, [pc, #332]	; (800428c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	4a52      	ldr	r2, [pc, #328]	; (8004290 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	2200      	movs	r2, #0
 8004150:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	2b01      	cmp	r3, #1
 8004158:	d002      	beq.n	8004160 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	025b      	lsls	r3, r3, #9
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004168:	4618      	mov	r0, r3
 800416a:	f000 ff6b 	bl	8005044 <SDMMC_CmdBlockLength>
 800416e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00f      	beq.n	8004196 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a46      	ldr	r2, [pc, #280]	; (8004294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e075      	b.n	8004282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d90a      	bls.n	80041b2 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	22a0      	movs	r2, #160	; 0xa0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 ffd3 	bl	8005154 <SDMMC_CmdWriteMultiBlock>
 80041ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80041b0:	e009      	b.n	80041c6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2290      	movs	r2, #144	; 0x90
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 ffa6 	bl	8005110 <SDMMC_CmdWriteSingleBlock>
 80041c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	; (8004294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	431a      	orrs	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e047      	b.n	8004282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3380      	adds	r3, #128	; 0x80
 8004204:	461a      	mov	r2, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	025b      	lsls	r3, r3, #9
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	f7fc ffe2 	bl	80011d4 <HAL_DMA_Start_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01c      	beq.n	8004250 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004224:	f023 0302 	bic.w	r3, r3, #2
 8004228:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e018      	b.n	8004282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	025b      	lsls	r3, r3, #9
 800425a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800425c:	2390      	movs	r3, #144	; 0x90
 800425e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004264:	2300      	movs	r3, #0
 8004266:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004268:	2301      	movs	r3, #1
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f107 0210 	add.w	r2, r7, #16
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 feb8 	bl	8004fec <SDIO_ConfigData>

      return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e000      	b.n	8004282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
  }
}
 8004282:	4618      	mov	r0, r3
 8004284:	3730      	adds	r7, #48	; 0x30
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	08004789 	.word	0x08004789
 8004290:	08004825 	.word	0x08004825
 8004294:	004005ff 	.word	0x004005ff
 8004298:	4225858c 	.word	0x4225858c

0800429c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042be:	0f9b      	lsrs	r3, r3, #30
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ca:	0e9b      	lsrs	r3, r3, #26
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042dc:	0e1b      	lsrs	r3, r3, #24
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	b2da      	uxtb	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004310:	0d1b      	lsrs	r3, r3, #20
 8004312:	b29a      	uxth	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	b2da      	uxtb	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432e:	0bdb      	lsrs	r3, r3, #15
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004340:	0b9b      	lsrs	r3, r3, #14
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004352:	0b5b      	lsrs	r3, r3, #13
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004364:	0b1b      	lsrs	r3, r3, #12
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2200      	movs	r2, #0
 8004376:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	2b00      	cmp	r3, #0
 800437e:	d163      	bne.n	8004448 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004384:	009a      	lsls	r2, r3, #2
 8004386:	f640 73fc 	movw	r3, #4092	; 0xffc
 800438a:	4013      	ands	r3, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004390:	0f92      	lsrs	r2, r2, #30
 8004392:	431a      	orrs	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439c:	0edb      	lsrs	r3, r3, #27
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ae:	0e1b      	lsrs	r3, r3, #24
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	0d5b      	lsrs	r3, r3, #21
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e4:	0bdb      	lsrs	r3, r3, #15
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7e1b      	ldrb	r3, [r3, #24]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	3302      	adds	r3, #2
 8004408:	2201      	movs	r2, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004412:	fb02 f203 	mul.w	r2, r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	7a1b      	ldrb	r3, [r3, #8]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004434:	0a52      	lsrs	r2, r2, #9
 8004436:	fb02 f203 	mul.w	r2, r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004444:	661a      	str	r2, [r3, #96]	; 0x60
 8004446:	e031      	b.n	80044ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	2b01      	cmp	r3, #1
 800444e:	d11d      	bne.n	800448c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	431a      	orrs	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	3301      	adds	r3, #1
 800446c:	029a      	lsls	r2, r3, #10
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004480:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
 800448a:	e00f      	b.n	80044ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <HAL_SD_GetCardCSD+0x344>)
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e09d      	b.n	80045e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b0:	0b9b      	lsrs	r3, r3, #14
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c2:	09db      	lsrs	r3, r3, #7
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	0fdb      	lsrs	r3, r3, #31
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	0f5b      	lsrs	r3, r3, #29
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	0e9b      	lsrs	r3, r3, #26
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b2da      	uxtb	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	0d9b      	lsrs	r3, r3, #22
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	b2da      	uxtb	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	0d5b      	lsrs	r3, r3, #21
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	b2da      	uxtb	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	0bdb      	lsrs	r3, r3, #15
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	0b9b      	lsrs	r3, r3, #14
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	b2da      	uxtb	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	0b1b      	lsrs	r3, r3, #12
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	004005ff 	.word	0x004005ff

080045f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004650:	b5b0      	push	{r4, r5, r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af04      	add	r7, sp, #16
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2203      	movs	r2, #3
 800465e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	2b03      	cmp	r3, #3
 8004668:	d02e      	beq.n	80046c8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004670:	d106      	bne.n	8004680 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
 800467e:	e029      	b.n	80046d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004686:	d10a      	bne.n	800469e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa9f 	bl	8004bcc <SD_WideBus_Enable>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
 800469c:	e01a      	b.n	80046d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fadc 	bl	8004c62 <SD_WideBus_Disable>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
 80046b8:	e00c      	b.n	80046d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
 80046c6:	e005      	b.n	80046d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e024      	b.n	800473a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681d      	ldr	r5, [r3, #0]
 8004716:	466c      	mov	r4, sp
 8004718:	f107 0318 	add.w	r3, r7, #24
 800471c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004724:	f107 030c 	add.w	r3, r7, #12
 8004728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800472a:	4628      	mov	r0, r5
 800472c:	f000 fbae 	bl	8004e8c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bdb0      	pop	{r4, r5, r7, pc}
 8004742:	bf00      	nop
 8004744:	004005ff 	.word	0x004005ff

08004748 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa0e 	bl	8004b7c <SD_SendStatus>
 8004760:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	0a5b      	lsrs	r3, r3, #9
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800477e:	693b      	ldr	r3, [r7, #16]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	2b82      	cmp	r3, #130	; 0x82
 80047c6:	d111      	bne.n	80047ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fce3 	bl	8005198 <SDMMC_CmdStopTransfer>
 80047d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff fd58 	bl	800429c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0208 	bic.w	r2, r2, #8
 80047fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f240 523a 	movw	r2, #1338	; 0x53a
 8004804:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f002 fc55 	bl	80070c4 <HAL_SD_RxCpltCallback>
#endif
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc feb0 	bl	8001598 <HAL_DMA_GetError>
 8004838:	4603      	mov	r3, r0
 800483a:	2b02      	cmp	r3, #2
 800483c:	d03e      	beq.n	80048bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d002      	beq.n	800485a <SD_DMAError+0x36>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d12d      	bne.n	80048b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <SD_DMAError+0xa0>)
 8004860:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004870:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	f7ff ff62 	bl	8004748 <HAL_SD_GetCardState>
 8004884:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b06      	cmp	r3, #6
 800488a:	d002      	beq.n	8004892 <SD_DMAError+0x6e>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b05      	cmp	r3, #5
 8004890:	d10a      	bne.n	80048a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fc7e 	bl	8005198 <SDMMC_CmdStopTransfer>
 800489c:	4602      	mov	r2, r0
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	431a      	orrs	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f7ff fcf0 	bl	800429c <HAL_SD_ErrorCallback>
#endif
  }
}
 80048bc:	bf00      	nop
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	004005ff 	.word	0x004005ff

080048c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048c8:	b5b0      	push	{r4, r5, r7, lr}
 80048ca:	b094      	sub	sp, #80	; 0x50
 80048cc:	af04      	add	r7, sp, #16
 80048ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80048d0:	2301      	movs	r3, #1
 80048d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fb2f 	bl	8004f3c <SDIO_GetPowerState>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048e8:	e0b6      	b.n	8004a58 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d02f      	beq.n	8004952 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fd58 	bl	80053ac <SDMMC_CmdSendCID>
 80048fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <SD_InitCard+0x40>
    {
      return errorstate;
 8004904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004906:	e0a7      	b.n	8004a58 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fb59 	bl	8004fc6 <SDIO_GetResponse>
 8004914:	4602      	mov	r2, r0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2104      	movs	r1, #4
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fb50 	bl	8004fc6 <SDIO_GetResponse>
 8004926:	4602      	mov	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2108      	movs	r1, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fb47 	bl	8004fc6 <SDIO_GetResponse>
 8004938:	4602      	mov	r2, r0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	210c      	movs	r1, #12
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fb3e 	bl	8004fc6 <SDIO_GetResponse>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	2b03      	cmp	r3, #3
 8004958:	d00d      	beq.n	8004976 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f107 020e 	add.w	r2, r7, #14
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fd5e 	bl	8005426 <SDMMC_CmdSetRelAdd>
 800496a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <SD_InitCard+0xae>
    {
      return errorstate;
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	e070      	b.n	8004a58 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	2b03      	cmp	r3, #3
 800497c:	d036      	beq.n	80049ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800497e:	89fb      	ldrh	r3, [r7, #14]
 8004980:	461a      	mov	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fd28 	bl	80053e8 <SDMMC_CmdSendCSD>
 8004998:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80049a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a2:	e059      	b.n	8004a58 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fb0b 	bl	8004fc6 <SDIO_GetResponse>
 80049b0:	4602      	mov	r2, r0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2104      	movs	r1, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fb02 	bl	8004fc6 <SDIO_GetResponse>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2108      	movs	r1, #8
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 faf9 	bl	8004fc6 <SDIO_GetResponse>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	210c      	movs	r1, #12
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 faf0 	bl	8004fc6 <SDIO_GetResponse>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2104      	movs	r1, #4
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fae7 	bl	8004fc6 <SDIO_GetResponse>
 80049f8:	4603      	mov	r3, r0
 80049fa:	0d1a      	lsrs	r2, r3, #20
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fc52 	bl	80042b0 <HAL_SD_GetCardCSD>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a16:	e01f      	b.n	8004a58 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	461a      	mov	r2, r3
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	f000 fbd7 	bl	80051dc <SDMMC_CmdSelDesel>
 8004a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <SD_InitCard+0x172>
  {
    return errorstate;
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	e00e      	b.n	8004a58 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681d      	ldr	r5, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	466c      	mov	r4, sp
 8004a42:	f103 0210 	add.w	r2, r3, #16
 8004a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fa1b 	bl	8004e8c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3740      	adds	r7, #64	; 0x40
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bdb0      	pop	{r4, r5, r7, pc}

08004a60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fbd2 	bl	8005222 <SDMMC_CmdGoIdleState>
 8004a7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	e072      	b.n	8004b70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fbe5 	bl	800525e <SDMMC_CmdOperCond>
 8004a94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fbbb 	bl	8005222 <SDMMC_CmdGoIdleState>
 8004aac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <SD_PowerON+0x5e>
    {
      return errorstate;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	e05b      	b.n	8004b70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d137      	bne.n	8004b36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fbe5 	bl	800529c <SDMMC_CmdAppCommand>
 8004ad2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02d      	beq.n	8004b36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ade:	e047      	b.n	8004b70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fbd8 	bl	800529c <SDMMC_CmdAppCommand>
 8004aec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <SD_PowerON+0x98>
    {
      return errorstate;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	e03b      	b.n	8004b70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	491e      	ldr	r1, [pc, #120]	; (8004b78 <SD_PowerON+0x118>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fbee 	bl	80052e0 <SDMMC_CmdAppOperCommand>
 8004b04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b10:	e02e      	b.n	8004b70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fa54 	bl	8004fc6 <SDIO_GetResponse>
 8004b1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	0fdb      	lsrs	r3, r3, #31
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <SD_PowerON+0xcc>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <SD_PowerON+0xce>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]

    count++;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d802      	bhi.n	8004b46 <SD_PowerON+0xe6>
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0cc      	beq.n	8004ae0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d902      	bls.n	8004b56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b54:	e00c      	b.n	8004b70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
 8004b66:	e002      	b.n	8004b6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	c1100000 	.word	0xc1100000

08004b7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b90:	e018      	b.n	8004bc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f000 fc62 	bl	8005468 <SDMMC_CmdSendStatus>
 8004ba4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	e009      	b.n	8004bc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fa05 	bl	8004fc6 <SDIO_GetResponse>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f9ef 	bl	8004fc6 <SDIO_GetResponse>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf2:	d102      	bne.n	8004bfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bf8:	e02f      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f879 	bl	8004cf8 <SD_FindSCR>
 8004c06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	e023      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fb37 	bl	800529c <SDMMC_CmdAppCommand>
 8004c2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e00f      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fb70 	bl	8005326 <SDMMC_CmdBusWidth>
 8004c46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e003      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e001      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f9a4 	bl	8004fc6 <SDIO_GetResponse>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c88:	d102      	bne.n	8004c90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c8e:	e02f      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f82e 	bl	8004cf8 <SD_FindSCR>
 8004c9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	e023      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01c      	beq.n	8004cec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 faec 	bl	800529c <SDMMC_CmdAppCommand>
 8004cc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	e00f      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fb25 	bl	8005326 <SDMMC_CmdBusWidth>
 8004cdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	e003      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e001      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b08f      	sub	sp, #60	; 0x3c
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d02:	f7fc f877 	bl	8000df4 <HAL_GetTick>
 8004d06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2108      	movs	r1, #8
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f990 	bl	8005044 <SDMMC_CmdBlockLength>
 8004d24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	e0a9      	b.n	8004e84 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 faad 	bl	800529c <SDMMC_CmdAppCommand>
 8004d42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	e09a      	b.n	8004e84 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d54:	2308      	movs	r3, #8
 8004d56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004d58:	2330      	movs	r3, #48	; 0x30
 8004d5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f107 0210 	add.w	r2, r7, #16
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f93a 	bl	8004fec <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 faf4 	bl	800536a <SDMMC_CmdSendSCR>
 8004d82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d022      	beq.n	8004dd0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	e07a      	b.n	8004e84 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00e      	beq.n	8004dba <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	f107 0208 	add.w	r2, r7, #8
 8004da8:	18d4      	adds	r4, r2, r3
 8004daa:	4608      	mov	r0, r1
 8004dac:	f000 f899 	bl	8004ee2 <SDIO_ReadFIFO>
 8004db0:	4603      	mov	r3, r0
 8004db2:	6023      	str	r3, [r4, #0]
      index++;
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	3301      	adds	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004dba:	f7fc f81b 	bl	8000df4 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d102      	bne.n	8004dd0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004dca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dce:	e059      	b.n	8004e84 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd6:	f240 432a 	movw	r3, #1066	; 0x42a
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0d6      	beq.n	8004d8e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004df6:	2308      	movs	r3, #8
 8004df8:	e044      	b.n	8004e84 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e10:	2302      	movs	r3, #2
 8004e12:	e037      	b.n	8004e84 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2220      	movs	r2, #32
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	e02a      	b.n	8004e84 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	061a      	lsls	r2, r3, #24
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	0e1b      	lsrs	r3, r3, #24
 8004e54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	601a      	str	r2, [r3, #0]
    scr++;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	061a      	lsls	r2, r3, #24
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	0e1b      	lsrs	r3, r3, #24
 8004e7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	373c      	adds	r7, #60	; 0x3c
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd90      	pop	{r4, r7, pc}

08004e8c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	f107 001c 	add.w	r0, r7, #28
 8004e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004ea2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004ea6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004eaa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004eae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004eb2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004eb6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004ec6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	b004      	add	sp, #16
 8004ee0:	4770      	bx	lr

08004ee2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004f2c:	2002      	movs	r0, #2
 8004f2e:	f7fb ff6d 	bl	8000e0c <HAL_Delay>
  
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0303 	and.w	r3, r3, #3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f92:	f023 030f 	bic.w	r3, r3, #15
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	b2db      	uxtb	r3, r3
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	4413      	add	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
}  
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005012:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005018:	431a      	orrs	r2, r3
                       Data->DPSM);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800501e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005036:	2300      	movs	r3, #0

}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005052:	2310      	movs	r3, #16
 8005054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005056:	2340      	movs	r3, #64	; 0x40
 8005058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800505e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005062:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005064:	f107 0308 	add.w	r3, r7, #8
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff ff74 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005070:	f241 3288 	movw	r2, #5000	; 0x1388
 8005074:	2110      	movs	r1, #16
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa40 	bl	80054fc <SDMMC_GetCmdResp1>
 800507c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800507e:	69fb      	ldr	r3, [r7, #28]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005096:	2311      	movs	r3, #17
 8005098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800509a:	2340      	movs	r3, #64	; 0x40
 800509c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a8:	f107 0308 	add.w	r3, r7, #8
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff ff52 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	2111      	movs	r1, #17
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa1e 	bl	80054fc <SDMMC_GetCmdResp1>
 80050c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050c2:	69fb      	ldr	r3, [r7, #28]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050da:	2312      	movs	r3, #18
 80050dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050de:	2340      	movs	r3, #64	; 0x40
 80050e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050ec:	f107 0308 	add.w	r3, r7, #8
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff30 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80050f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fc:	2112      	movs	r1, #18
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f9fc 	bl	80054fc <SDMMC_GetCmdResp1>
 8005104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005106:	69fb      	ldr	r3, [r7, #28]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800511e:	2318      	movs	r3, #24
 8005120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005122:	2340      	movs	r3, #64	; 0x40
 8005124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800512a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800512e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005130:	f107 0308 	add.w	r3, r7, #8
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ff0e 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800513c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005140:	2118      	movs	r1, #24
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9da 	bl	80054fc <SDMMC_GetCmdResp1>
 8005148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800514a:	69fb      	ldr	r3, [r7, #28]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005162:	2319      	movs	r3, #25
 8005164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005166:	2340      	movs	r3, #64	; 0x40
 8005168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800516e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005172:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff feec 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	2119      	movs	r1, #25
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9b8 	bl	80054fc <SDMMC_GetCmdResp1>
 800518c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800518e:	69fb      	ldr	r3, [r7, #28]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051a4:	230c      	movs	r3, #12
 80051a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fecb 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80051c2:	4a05      	ldr	r2, [pc, #20]	; (80051d8 <SDMMC_CmdStopTransfer+0x40>)
 80051c4:	210c      	movs	r1, #12
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f998 	bl	80054fc <SDMMC_GetCmdResp1>
 80051cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ce:	69fb      	ldr	r3, [r7, #28]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	05f5e100 	.word	0x05f5e100

080051dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80051ec:	2307      	movs	r3, #7
 80051ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051f0:	2340      	movs	r3, #64	; 0x40
 80051f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051fe:	f107 0310 	add.w	r3, r7, #16
 8005202:	4619      	mov	r1, r3
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff fea7 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	2107      	movs	r1, #7
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f973 	bl	80054fc <SDMMC_GetCmdResp1>
 8005216:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800521a:	4618      	mov	r0, r3
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b088      	sub	sp, #32
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800523a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fe86 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f92d 	bl	80054ac <SDMMC_GetCmdError>
 8005252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005254:	69fb      	ldr	r3, [r7, #28]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005266:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800526a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800526c:	2308      	movs	r3, #8
 800526e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005270:	2340      	movs	r3, #64	; 0x40
 8005272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800527c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff fe67 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb16 	bl	80058bc <SDMMC_GetCmdResp7>
 8005290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005292:	69fb      	ldr	r3, [r7, #28]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80052aa:	2337      	movs	r3, #55	; 0x37
 80052ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052bc:	f107 0308 	add.w	r3, r7, #8
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fe48 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80052c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052cc:	2137      	movs	r1, #55	; 0x37
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f914 	bl	80054fc <SDMMC_GetCmdResp1>
 80052d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052d6:	69fb      	ldr	r3, [r7, #28]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80052f6:	2329      	movs	r3, #41	; 0x29
 80052f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052fa:	2340      	movs	r3, #64	; 0x40
 80052fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005306:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005308:	f107 0308 	add.w	r3, r7, #8
 800530c:	4619      	mov	r1, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fe22 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fa23 	bl	8005760 <SDMMC_GetCmdResp3>
 800531a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800531c:	69fb      	ldr	r3, [r7, #28]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b088      	sub	sp, #32
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005334:	2306      	movs	r3, #6
 8005336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005344:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005346:	f107 0308 	add.w	r3, r7, #8
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff fe03 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005352:	f241 3288 	movw	r2, #5000	; 0x1388
 8005356:	2106      	movs	r1, #6
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8cf 	bl	80054fc <SDMMC_GetCmdResp1>
 800535e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005360:	69fb      	ldr	r3, [r7, #28]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005376:	2333      	movs	r3, #51	; 0x33
 8005378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005386:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fde2 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005394:	f241 3288 	movw	r2, #5000	; 0x1388
 8005398:	2133      	movs	r1, #51	; 0x33
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8ae 	bl	80054fc <SDMMC_GetCmdResp1>
 80053a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053a2:	69fb      	ldr	r3, [r7, #28]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80053b8:	2302      	movs	r3, #2
 80053ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053bc:	23c0      	movs	r3, #192	; 0xc0
 80053be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fdc1 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f97c 	bl	80056d4 <SDMMC_GetCmdResp2>
 80053dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053de:	69fb      	ldr	r3, [r7, #28]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80053f6:	2309      	movs	r3, #9
 80053f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053fa:	23c0      	movs	r3, #192	; 0xc0
 80053fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005406:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005408:	f107 0308 	add.w	r3, r7, #8
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fda2 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f95d 	bl	80056d4 <SDMMC_GetCmdResp2>
 800541a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800541c:	69fb      	ldr	r3, [r7, #28]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b088      	sub	sp, #32
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005434:	2303      	movs	r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005438:	2340      	movs	r3, #64	; 0x40
 800543a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005444:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005446:	f107 0308 	add.w	r3, r7, #8
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fd83 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	2103      	movs	r1, #3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f9bc 	bl	80057d4 <SDMMC_GetCmdResp6>
 800545c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800545e:	69fb      	ldr	r3, [r7, #28]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005476:	230d      	movs	r3, #13
 8005478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800547a:	2340      	movs	r3, #64	; 0x40
 800547c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005486:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fd62 	bl	8004f58 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005494:	f241 3288 	movw	r2, #5000	; 0x1388
 8005498:	210d      	movs	r1, #13
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f82e 	bl	80054fc <SDMMC_GetCmdResp1>
 80054a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054a2:	69fb      	ldr	r3, [r7, #28]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80054ac:	b490      	push	{r4, r7}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <SDMMC_GetCmdError+0x48>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a0f      	ldr	r2, [pc, #60]	; (80054f8 <SDMMC_GetCmdError+0x4c>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0a5b      	lsrs	r3, r3, #9
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80054c8:	4623      	mov	r3, r4
 80054ca:	1e5c      	subs	r4, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054d4:	e009      	b.n	80054ea <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f2      	beq.n	80054c8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	22c5      	movs	r2, #197	; 0xc5
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc90      	pop	{r4, r7}
 80054f2:	4770      	bx	lr
 80054f4:	2000001c 	.word	0x2000001c
 80054f8:	10624dd3 	.word	0x10624dd3

080054fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	460b      	mov	r3, r1
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800550a:	4b6f      	ldr	r3, [pc, #444]	; (80056c8 <SDMMC_GetCmdResp1+0x1cc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6f      	ldr	r2, [pc, #444]	; (80056cc <SDMMC_GetCmdResp1+0x1d0>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	0a5b      	lsrs	r3, r3, #9
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800551c:	4623      	mov	r3, r4
 800551e:	1e5c      	subs	r4, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005528:	e0c9      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <SDMMC_GetCmdResp1+0x20>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1eb      	bne.n	800551c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2204      	movs	r2, #4
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005556:	2304      	movs	r3, #4
 8005558:	e0b1      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800556c:	2301      	movs	r3, #1
 800556e:	e0a6      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	22c5      	movs	r2, #197	; 0xc5
 8005574:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fd18 	bl	8004fac <SDIO_GetCommandResponse>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	4293      	cmp	r3, r2
 8005584:	d001      	beq.n	800558a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005586:	2301      	movs	r3, #1
 8005588:	e099      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800558a:	2100      	movs	r1, #0
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff fd1a 	bl	8004fc6 <SDIO_GetResponse>
 8005592:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4b4e      	ldr	r3, [pc, #312]	; (80056d0 <SDMMC_GetCmdResp1+0x1d4>)
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800559e:	2300      	movs	r3, #0
 80055a0:	e08d      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da02      	bge.n	80055ae <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ac:	e087      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	e080      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	e079      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055d8:	e071      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80055e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e8:	e069      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80055f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f8:	e061      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005608:	e059      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005618:	e051      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005628:	e049      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005638:	e041      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005648:	e039      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005658:	e031      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005668:	e029      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005678:	e021      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005688:	e019      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005698:	e011      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80056a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056a8:	e009      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056b8:	e001      	b.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd90      	pop	{r4, r7, pc}
 80056c6:	bf00      	nop
 80056c8:	2000001c 	.word	0x2000001c
 80056cc:	10624dd3 	.word	0x10624dd3
 80056d0:	fdffe008 	.word	0xfdffe008

080056d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80056d4:	b490      	push	{r4, r7}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <SDMMC_GetCmdResp2+0x84>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1e      	ldr	r2, [pc, #120]	; (800575c <SDMMC_GetCmdResp2+0x88>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	0a5b      	lsrs	r3, r3, #9
 80056e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80056f0:	4623      	mov	r3, r4
 80056f2:	1e5c      	subs	r4, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056fc:	e026      	b.n	800574c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <SDMMC_GetCmdResp2+0x1c>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1eb      	bne.n	80056f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2204      	movs	r2, #4
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800572a:	2304      	movs	r3, #4
 800572c:	e00e      	b.n	800574c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005740:	2301      	movs	r3, #1
 8005742:	e003      	b.n	800574c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	22c5      	movs	r2, #197	; 0xc5
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bc90      	pop	{r4, r7}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	2000001c 	.word	0x2000001c
 800575c:	10624dd3 	.word	0x10624dd3

08005760 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005760:	b490      	push	{r4, r7}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005768:	4b18      	ldr	r3, [pc, #96]	; (80057cc <SDMMC_GetCmdResp3+0x6c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <SDMMC_GetCmdResp3+0x70>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	0a5b      	lsrs	r3, r3, #9
 8005774:	f241 3288 	movw	r2, #5000	; 0x1388
 8005778:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800577c:	4623      	mov	r3, r4
 800577e:	1e5c      	subs	r4, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005788:	e01b      	b.n	80057c2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <SDMMC_GetCmdResp3+0x1c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1eb      	bne.n	800577c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2204      	movs	r2, #4
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057b6:	2304      	movs	r3, #4
 80057b8:	e003      	b.n	80057c2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	22c5      	movs	r2, #197	; 0xc5
 80057be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc90      	pop	{r4, r7}
 80057ca:	4770      	bx	lr
 80057cc:	2000001c 	.word	0x2000001c
 80057d0:	10624dd3 	.word	0x10624dd3

080057d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	460b      	mov	r3, r1
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057e2:	4b34      	ldr	r3, [pc, #208]	; (80058b4 <SDMMC_GetCmdResp6+0xe0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a34      	ldr	r2, [pc, #208]	; (80058b8 <SDMMC_GetCmdResp6+0xe4>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	0a5b      	lsrs	r3, r3, #9
 80057ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80057f6:	4623      	mov	r3, r4
 80057f8:	1e5c      	subs	r4, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005802:	e052      	b.n	80058aa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <SDMMC_GetCmdResp6+0x22>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1eb      	bne.n	80057f6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2204      	movs	r2, #4
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005830:	2304      	movs	r3, #4
 8005832:	e03a      	b.n	80058aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005846:	2301      	movs	r3, #1
 8005848:	e02f      	b.n	80058aa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fbae 	bl	8004fac <SDIO_GetCommandResponse>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	4293      	cmp	r3, r2
 8005858:	d001      	beq.n	800585e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800585a:	2301      	movs	r3, #1
 800585c:	e025      	b.n	80058aa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22c5      	movs	r2, #197	; 0xc5
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005864:	2100      	movs	r1, #0
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fbad 	bl	8004fc6 <SDIO_GetResponse>
 800586c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005882:	2300      	movs	r3, #0
 8005884:	e011      	b.n	80058aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005894:	e009      	b.n	80058aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058a4:	e001      	b.n	80058aa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd90      	pop	{r4, r7, pc}
 80058b2:	bf00      	nop
 80058b4:	2000001c 	.word	0x2000001c
 80058b8:	10624dd3 	.word	0x10624dd3

080058bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80058bc:	b490      	push	{r4, r7}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <SDMMC_GetCmdResp7+0x90>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a21      	ldr	r2, [pc, #132]	; (8005950 <SDMMC_GetCmdResp7+0x94>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	0a5b      	lsrs	r3, r3, #9
 80058d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80058d8:	4623      	mov	r3, r4
 80058da:	1e5c      	subs	r4, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058e4:	e02c      	b.n	8005940 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <SDMMC_GetCmdResp7+0x1c>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1eb      	bne.n	80058d8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2204      	movs	r2, #4
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005912:	2304      	movs	r3, #4
 8005914:	e014      	b.n	8005940 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005928:	2301      	movs	r3, #1
 800592a:	e009      	b.n	8005940 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2240      	movs	r2, #64	; 0x40
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
  
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bc90      	pop	{r4, r7}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	2000001c 	.word	0x2000001c
 8005950:	10624dd3 	.word	0x10624dd3

08005954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005954:	b084      	sub	sp, #16
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	f107 001c 	add.w	r0, r7, #28
 8005962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b01      	cmp	r3, #1
 800596a:	d122      	bne.n	80059b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d105      	bne.n	80059a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fac6 	bl	8006f38 <USB_CoreReset>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
 80059b0:	e01a      	b.n	80059e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 faba 	bl	8006f38 <USB_CoreReset>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
 80059da:	e005      	b.n	80059e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10b      	bne.n	8005a06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f043 0206 	orr.w	r2, r3, #6
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a12:	b004      	add	sp, #16
 8005a14:	4770      	bx	lr
	...

08005a18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d165      	bne.n	8005af8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a41      	ldr	r2, [pc, #260]	; (8005b34 <USB_SetTurnaroundTime+0x11c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d906      	bls.n	8005a42 <USB_SetTurnaroundTime+0x2a>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <USB_SetTurnaroundTime+0x120>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d202      	bcs.n	8005a42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a3c:	230f      	movs	r3, #15
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e062      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <USB_SetTurnaroundTime+0x120>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d306      	bcc.n	8005a58 <USB_SetTurnaroundTime+0x40>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4a3b      	ldr	r2, [pc, #236]	; (8005b3c <USB_SetTurnaroundTime+0x124>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d202      	bcs.n	8005a58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a52:	230e      	movs	r3, #14
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e057      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <USB_SetTurnaroundTime+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d306      	bcc.n	8005a6e <USB_SetTurnaroundTime+0x56>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4a37      	ldr	r2, [pc, #220]	; (8005b40 <USB_SetTurnaroundTime+0x128>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d202      	bcs.n	8005a6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a68:	230d      	movs	r3, #13
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	e04c      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <USB_SetTurnaroundTime+0x128>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d306      	bcc.n	8005a84 <USB_SetTurnaroundTime+0x6c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <USB_SetTurnaroundTime+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d802      	bhi.n	8005a84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a7e:	230c      	movs	r3, #12
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e041      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <USB_SetTurnaroundTime+0x12c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d906      	bls.n	8005a9a <USB_SetTurnaroundTime+0x82>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4a2e      	ldr	r2, [pc, #184]	; (8005b48 <USB_SetTurnaroundTime+0x130>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d802      	bhi.n	8005a9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a94:	230b      	movs	r3, #11
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e036      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <USB_SetTurnaroundTime+0x130>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d906      	bls.n	8005ab0 <USB_SetTurnaroundTime+0x98>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <USB_SetTurnaroundTime+0x134>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d802      	bhi.n	8005ab0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005aaa:	230a      	movs	r3, #10
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e02b      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a26      	ldr	r2, [pc, #152]	; (8005b4c <USB_SetTurnaroundTime+0x134>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d906      	bls.n	8005ac6 <USB_SetTurnaroundTime+0xae>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4a25      	ldr	r2, [pc, #148]	; (8005b50 <USB_SetTurnaroundTime+0x138>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d202      	bcs.n	8005ac6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ac0:	2309      	movs	r3, #9
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	e020      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <USB_SetTurnaroundTime+0x138>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d306      	bcc.n	8005adc <USB_SetTurnaroundTime+0xc4>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <USB_SetTurnaroundTime+0x13c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d802      	bhi.n	8005adc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e015      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <USB_SetTurnaroundTime+0x13c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d906      	bls.n	8005af2 <USB_SetTurnaroundTime+0xda>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <USB_SetTurnaroundTime+0x140>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d202      	bcs.n	8005af2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005aec:	2307      	movs	r3, #7
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e00a      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005af2:	2306      	movs	r3, #6
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e007      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005afe:	2309      	movs	r3, #9
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e001      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b04:	2309      	movs	r3, #9
 8005b06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	029b      	lsls	r3, r3, #10
 8005b1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	00d8acbf 	.word	0x00d8acbf
 8005b38:	00e4e1c0 	.word	0x00e4e1c0
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	01067380 	.word	0x01067380
 8005b44:	011a499f 	.word	0x011a499f
 8005b48:	01312cff 	.word	0x01312cff
 8005b4c:	014ca43f 	.word	0x014ca43f
 8005b50:	016e3600 	.word	0x016e3600
 8005b54:	01a6ab1f 	.word	0x01a6ab1f
 8005b58:	01e84800 	.word	0x01e84800

08005b5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f043 0201 	orr.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d106      	bne.n	8005bcc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60da      	str	r2, [r3, #12]
 8005bca:	e00b      	b.n	8005be4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	e001      	b.n	8005be4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e003      	b.n	8005bec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005be4:	2032      	movs	r0, #50	; 0x32
 8005be6:	f7fb f911 	bl	8000e0c <HAL_Delay>

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	e009      	b.n	8005c28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3340      	adds	r3, #64	; 0x40
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3301      	adds	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b0e      	cmp	r3, #14
 8005c2c:	d9f2      	bls.n	8005c14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11c      	bne.n	8005c6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c42:	f043 0302 	orr.w	r3, r3, #2
 8005c46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c6c:	e00b      	b.n	8005c86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	4619      	mov	r1, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	680b      	ldr	r3, [r1, #0]
 8005ca4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d10c      	bne.n	8005cc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f949 	bl	8005f4c <USB_SetDevSpeed>
 8005cba:	e008      	b.n	8005cce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f944 	bl	8005f4c <USB_SetDevSpeed>
 8005cc4:	e003      	b.n	8005cce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f93f 	bl	8005f4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cce:	2110      	movs	r1, #16
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f8f3 	bl	8005ebc <USB_FlushTxFifo>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f911 	bl	8005f08 <USB_FlushRxFifo>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	e043      	b.n	8005da2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d30:	d118      	bne.n	8005d64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	461a      	mov	r2, r3
 8005d46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e013      	b.n	8005d76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e008      	b.n	8005d76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	461a      	mov	r2, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	461a      	mov	r2, r3
 8005d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3b7      	bcc.n	8005d1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	e043      	b.n	8005e38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc6:	d118      	bne.n	8005dfa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e013      	b.n	8005e0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	461a      	mov	r2, r3
 8005df2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e008      	b.n	8005e0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3301      	adds	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3b7      	bcc.n	8005db0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f043 0210 	orr.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <USB_DevInit+0x2c4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f043 0208 	orr.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d107      	bne.n	8005ea8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea0:	f043 0304 	orr.w	r3, r3, #4
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eb4:	b004      	add	sp, #16
 8005eb6:	4770      	bx	lr
 8005eb8:	803c3800 	.word	0x803c3800

08005ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <USB_FlushTxFifo+0x48>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d901      	bls.n	8005ee8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e006      	b.n	8005ef6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d0f0      	beq.n	8005ed6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	00030d40 	.word	0x00030d40

08005f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2210      	movs	r2, #16
 8005f18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <USB_FlushRxFifo+0x40>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e006      	b.n	8005f3a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d0f0      	beq.n	8005f1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	00030d40 	.word	0x00030d40

08005f4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	68f9      	ldr	r1, [r7, #12]
 8005f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b087      	sub	sp, #28
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0306 	and.w	r3, r3, #6
 8005f96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75fb      	strb	r3, [r7, #23]
 8005fa2:	e00a      	b.n	8005fba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d002      	beq.n	8005fb0 <USB_GetDevSpeed+0x32>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d102      	bne.n	8005fb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	75fb      	strb	r3, [r7, #23]
 8005fb4:	e001      	b.n	8005fba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fb6:	230f      	movs	r3, #15
 8005fb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d13a      	bne.n	800605a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	68f9      	ldr	r1, [r7, #12]
 8005ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006002:	4313      	orrs	r3, r2
 8006004:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d155      	bne.n	80060c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	78db      	ldrb	r3, [r3, #3]
 8006036:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006038:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	059b      	lsls	r3, r3, #22
 800603e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006040:	4313      	orrs	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	440a      	add	r2, r1
 800604a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	e036      	b.n	80060c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006060:	69da      	ldr	r2, [r3, #28]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	2101      	movs	r1, #1
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	68f9      	ldr	r1, [r7, #12]
 8006074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006078:	4313      	orrs	r3, r2
 800607a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11a      	bne.n	80060c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	78db      	ldrb	r3, [r3, #3]
 80060ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060ae:	430b      	orrs	r3, r1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d161      	bne.n	80061b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610a:	d11f      	bne.n	800614c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800612a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800614a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	2101      	movs	r1, #1
 800615e:	fa01 f303 	lsl.w	r3, r1, r3
 8006162:	b29b      	uxth	r3, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800616c:	4013      	ands	r3, r2
 800616e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	b29b      	uxth	r3, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006190:	4013      	ands	r3, r2
 8006192:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	0159      	lsls	r1, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	440b      	add	r3, r1
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	4619      	mov	r1, r3
 80061b0:	4b35      	ldr	r3, [pc, #212]	; (8006288 <USB_DeactivateEndpoint+0x1b0>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]
 80061b6:	e060      	b.n	800627a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ce:	d11f      	bne.n	8006210 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800620e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	2101      	movs	r1, #1
 8006222:	fa01 f303 	lsl.w	r3, r1, r3
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	43db      	mvns	r3, r3
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006230:	4013      	ands	r3, r2
 8006232:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	2101      	movs	r1, #1
 8006246:	fa01 f303 	lsl.w	r3, r1, r3
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	43db      	mvns	r3, r3
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006254:	4013      	ands	r3, r2
 8006256:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	0159      	lsls	r1, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	440b      	add	r3, r1
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	4619      	mov	r1, r3
 8006274:	4b05      	ldr	r3, [pc, #20]	; (800628c <USB_DeactivateEndpoint+0x1b4>)
 8006276:	4013      	ands	r3, r2
 8006278:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	ec337800 	.word	0xec337800
 800628c:	eff37800 	.word	0xeff37800

08006290 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 815c 	bne.w	800656a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d132      	bne.n	8006320 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	0cdb      	lsrs	r3, r3, #19
 800631a:	04db      	lsls	r3, r3, #19
 800631c:	6113      	str	r3, [r2, #16]
 800631e:	e074      	b.n	800640a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633a:	0cdb      	lsrs	r3, r3, #19
 800633c:	04db      	lsls	r3, r3, #19
 800633e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800635e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6959      	ldr	r1, [r3, #20]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	440b      	add	r3, r1
 800637c:	1e59      	subs	r1, r3, #1
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	fbb1 f3f3 	udiv	r3, r1, r3
 8006386:	04d9      	lsls	r1, r3, #19
 8006388:	4b9d      	ldr	r3, [pc, #628]	; (8006600 <USB_EPStartXfer+0x370>)
 800638a:	400b      	ands	r3, r1
 800638c:	69b9      	ldr	r1, [r7, #24]
 800638e:	0148      	lsls	r0, r1, #5
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	4401      	add	r1, r0
 8006394:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006398:	4313      	orrs	r3, r2
 800639a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b2:	69b9      	ldr	r1, [r7, #24]
 80063b4:	0148      	lsls	r0, r1, #5
 80063b6:	69f9      	ldr	r1, [r7, #28]
 80063b8:	4401      	add	r1, r0
 80063ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063be:	4313      	orrs	r3, r2
 80063c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d11f      	bne.n	800640a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006404:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006408:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d14b      	bne.n	80064a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	461a      	mov	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	78db      	ldrb	r3, [r3, #3]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d128      	bne.n	8006486 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d110      	bne.n	8006466 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e00f      	b.n	8006486 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006484:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	e12f      	b.n	8006708 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d015      	beq.n	80064fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8117 	beq.w	8006708 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	2101      	movs	r1, #1
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	69f9      	ldr	r1, [r7, #28]
 80064f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f6:	4313      	orrs	r3, r2
 80064f8:	634b      	str	r3, [r1, #52]	; 0x34
 80064fa:	e105      	b.n	8006708 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d110      	bne.n	800652e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	e00f      	b.n	800654e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800654c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	68d9      	ldr	r1, [r3, #12]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	b298      	uxth	r0, r3
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	4603      	mov	r3, r0
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fa2b 	bl	80069be <USB_WritePacket>
 8006568:	e0ce      	b.n	8006708 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006584:	0cdb      	lsrs	r3, r3, #19
 8006586:	04db      	lsls	r3, r3, #19
 8006588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d126      	bne.n	8006604 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065cc:	69b9      	ldr	r1, [r7, #24]
 80065ce:	0148      	lsls	r0, r1, #5
 80065d0:	69f9      	ldr	r1, [r7, #28]
 80065d2:	4401      	add	r1, r0
 80065d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065d8:	4313      	orrs	r3, r2
 80065da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065fa:	6113      	str	r3, [r2, #16]
 80065fc:	e036      	b.n	800666c <USB_EPStartXfer+0x3dc>
 80065fe:	bf00      	nop
 8006600:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	695a      	ldr	r2, [r3, #20]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	4413      	add	r3, r2
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	8afb      	ldrh	r3, [r7, #22]
 800662a:	04d9      	lsls	r1, r3, #19
 800662c:	4b39      	ldr	r3, [pc, #228]	; (8006714 <USB_EPStartXfer+0x484>)
 800662e:	400b      	ands	r3, r1
 8006630:	69b9      	ldr	r1, [r7, #24]
 8006632:	0148      	lsls	r0, r1, #5
 8006634:	69f9      	ldr	r1, [r7, #28]
 8006636:	4401      	add	r1, r0
 8006638:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800663c:	4313      	orrs	r3, r2
 800663e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	8af9      	ldrh	r1, [r7, #22]
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	0148      	lsls	r0, r1, #5
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	4401      	add	r1, r0
 8006664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006668:	4313      	orrs	r3, r2
 800666a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10d      	bne.n	800668e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	68d9      	ldr	r1, [r3, #12]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668a:	460a      	mov	r2, r1
 800668c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	78db      	ldrb	r3, [r3, #3]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d128      	bne.n	80066e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d110      	bne.n	80066c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e00f      	b.n	80066e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006706:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	1ff80000 	.word	0x1ff80000

08006718 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4613      	mov	r3, r2
 8006724:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b01      	cmp	r3, #1
 8006736:	f040 80cd 	bne.w	80068d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d132      	bne.n	80067a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006760:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	440a      	add	r2, r1
 800679c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a0:	0cdb      	lsrs	r3, r3, #19
 80067a2:	04db      	lsls	r3, r3, #19
 80067a4:	6113      	str	r3, [r2, #16]
 80067a6:	e04e      	b.n	8006846 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c2:	0cdb      	lsrs	r3, r3, #19
 80067c4:	04db      	lsls	r3, r3, #19
 80067c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	695a      	ldr	r2, [r3, #20]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d903      	bls.n	8006800 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800681e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006836:	6939      	ldr	r1, [r7, #16]
 8006838:	0148      	lsls	r0, r1, #5
 800683a:	6979      	ldr	r1, [r7, #20]
 800683c:	4401      	add	r1, r0
 800683e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006842:	4313      	orrs	r3, r2
 8006844:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d11e      	bne.n	800688a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	461a      	mov	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	440a      	add	r2, r1
 800687e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006882:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	e092      	b.n	80069b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d07e      	beq.n	80069b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	2101      	movs	r1, #1
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	6979      	ldr	r1, [r7, #20]
 80068ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ce:	4313      	orrs	r3, r2
 80068d0:	634b      	str	r3, [r1, #52]	; 0x34
 80068d2:	e06d      	b.n	80069b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ee:	0cdb      	lsrs	r3, r3, #19
 80068f0:	04db      	lsls	r3, r3, #19
 80068f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006912:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006916:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006946:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695e:	6939      	ldr	r1, [r7, #16]
 8006960:	0148      	lsls	r0, r1, #5
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	4401      	add	r1, r0
 8006966:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800696a:	4313      	orrs	r3, r2
 800696c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10d      	bne.n	8006990 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d009      	beq.n	8006990 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	68d9      	ldr	r1, [r3, #12]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	460a      	mov	r2, r1
 800698e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069be:	b480      	push	{r7}
 80069c0:	b089      	sub	sp, #36	; 0x24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	4611      	mov	r1, r2
 80069ca:	461a      	mov	r2, r3
 80069cc:	460b      	mov	r3, r1
 80069ce:	71fb      	strb	r3, [r7, #7]
 80069d0:	4613      	mov	r3, r2
 80069d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80069dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11a      	bne.n	8006a1a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069e4:	88bb      	ldrh	r3, [r7, #4]
 80069e6:	3303      	adds	r3, #3
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e00f      	b.n	8006a12 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	031a      	lsls	r2, r3, #12
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fe:	461a      	mov	r2, r3
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d3eb      	bcc.n	80069f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3724      	adds	r7, #36	; 0x24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	3303      	adds	r3, #3
 8006a42:	089b      	lsrs	r3, r3, #2
 8006a44:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	e00b      	b.n	8006a64 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	3301      	adds	r3, #1
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d3ef      	bcc.n	8006a4c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3724      	adds	r7, #36	; 0x24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d12c      	bne.n	8006af0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	db12      	blt.n	8006ace <USB_EPSetStall+0x54>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00f      	beq.n	8006ace <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e02b      	b.n	8006b48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	db12      	blt.n	8006b28 <USB_EPSetStall+0xae>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00f      	beq.n	8006b28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	0151      	lsls	r1, r2, #5
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d128      	bne.n	8006bc4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	78db      	ldrb	r3, [r3, #3]
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d003      	beq.n	8006ba2 <USB_EPClearStall+0x4c>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	78db      	ldrb	r3, [r3, #3]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d138      	bne.n	8006c14 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e027      	b.n	8006c14 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006be2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	78db      	ldrb	r3, [r3, #3]
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d003      	beq.n	8006bf4 <USB_EPClearStall+0x9e>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	78db      	ldrb	r3, [r3, #3]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d10f      	bne.n	8006c14 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c12:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c44:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c88:	f023 0303 	bic.w	r3, r3, #3
 8006c8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9c:	f023 0302 	bic.w	r3, r3, #2
 8006ca0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cde:	f043 0302 	orr.w	r3, r3, #2
 8006ce2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4013      	ands	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	0c1b      	lsrs	r3, r3, #16
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	b29b      	uxth	r3, r3
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	4013      	ands	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dae:	68bb      	ldr	r3, [r7, #8]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dde:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	01db      	lsls	r3, r3, #7
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4013      	ands	r3, r2
 8006e08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f003 0301 	and.w	r3, r3, #1
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e52:	f023 0307 	bic.w	r3, r3, #7
 8006e56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	460b      	mov	r3, r1
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	333c      	adds	r3, #60	; 0x3c
 8006e92:	3304      	adds	r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4a26      	ldr	r2, [pc, #152]	; (8006f34 <USB_EP0_OutStart+0xb8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d90a      	bls.n	8006eb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb0:	d101      	bne.n	8006eb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e037      	b.n	8006f26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee4:	f043 0318 	orr.w	r3, r3, #24
 8006ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006efc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10f      	bne.n	8006f24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	4f54300a 	.word	0x4f54300a

08006f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <USB_CoreReset+0x64>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d901      	bls.n	8006f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e01b      	b.n	8006f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	daf2      	bge.n	8006f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f043 0201 	orr.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <USB_CoreReset+0x64>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d901      	bls.n	8006f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e006      	b.n	8006f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d0f0      	beq.n	8006f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	00030d40 	.word	0x00030d40

08006fa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006fa4:	4904      	ldr	r1, [pc, #16]	; (8006fb8 <MX_FATFS_Init+0x18>)
 8006fa6:	4805      	ldr	r0, [pc, #20]	; (8006fbc <MX_FATFS_Init+0x1c>)
 8006fa8:	f006 f81a 	bl	800cfe0 <FATFS_LinkDriver>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <MX_FATFS_Init+0x20>)
 8006fb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000608 	.word	0x20000608
 8006fbc:	0800ecd8 	.word	0x0800ecd8
 8006fc0:	20000604 	.word	0x20000604

08006fc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006fc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006fde:	f000 f87b 	bl	80070d8 <BSP_SD_IsDetected>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e012      	b.n	8007012 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006fec:	480b      	ldr	r0, [pc, #44]	; (800701c <BSP_SD_Init+0x48>)
 8006fee:	f7fc fb4f 	bl	8003690 <HAL_SD_Init>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006ffc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007000:	4806      	ldr	r0, [pc, #24]	; (800701c <BSP_SD_Init+0x48>)
 8007002:	f7fd fb25 	bl	8004650 <HAL_SD_ConfigWideBusOperation>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007010:	79fb      	ldrb	r3, [r7, #7]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000578 	.word	0x20000578

08007020 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	4806      	ldr	r0, [pc, #24]	; (8007050 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007038:	f7fc ff56 	bl	8003ee8 <HAL_SD_ReadBlocks_DMA>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000578 	.word	0x20000578

08007054 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	4806      	ldr	r0, [pc, #24]	; (8007084 <BSP_SD_WriteBlocks_DMA+0x30>)
 800706c:	f7fd f826 	bl	80040bc <HAL_SD_WriteBlocks_DMA>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000578 	.word	0x20000578

08007088 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800708c:	4805      	ldr	r0, [pc, #20]	; (80070a4 <BSP_SD_GetCardState+0x1c>)
 800708e:	f7fd fb5b 	bl	8004748 <HAL_SD_GetCardState>
 8007092:	4603      	mov	r3, r0
 8007094:	2b04      	cmp	r3, #4
 8007096:	bf14      	ite	ne
 8007098:	2301      	movne	r3, #1
 800709a:	2300      	moveq	r3, #0
 800709c:	b2db      	uxtb	r3, r3
}
 800709e:	4618      	mov	r0, r3
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20000578 	.word	0x20000578

080070a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4803      	ldr	r0, [pc, #12]	; (80070c0 <BSP_SD_GetCardInfo+0x18>)
 80070b4:	f7fd faa0 	bl	80045f8 <HAL_SD_GetCardInfo>
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000578 	.word	0x20000578

080070c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80070cc:	f000 f97a 	bl	80073c4 <BSP_SD_ReadCpltCallback>
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80070de:	2301      	movs	r3, #1
 80070e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	b2db      	uxtb	r3, r3
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80070fa:	f7f9 fe7b 	bl	8000df4 <HAL_GetTick>
 80070fe:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007100:	e006      	b.n	8007110 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007102:	f7ff ffc1 	bl	8007088 <BSP_SD_GetCardState>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800710c:	2300      	movs	r3, #0
 800710e:	e009      	b.n	8007124 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007110:	f7f9 fe70 	bl	8000df4 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	429a      	cmp	r2, r3
 800711e:	d8f0      	bhi.n	8007102 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <SD_CheckStatus+0x38>)
 8007138:	2201      	movs	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800713c:	f7ff ffa4 	bl	8007088 <BSP_SD_GetCardState>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <SD_CheckStatus+0x38>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	b2da      	uxtb	r2, r3
 8007152:	4b04      	ldr	r3, [pc, #16]	; (8007164 <SD_CheckStatus+0x38>)
 8007154:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <SD_CheckStatus+0x38>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b2db      	uxtb	r3, r3
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000025 	.word	0x20000025

08007168 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007172:	f7ff ff2f 	bl	8006fd4 <BSP_SD_Init>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d107      	bne.n	800718c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff ffd4 	bl	800712c <SD_CheckStatus>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	4b04      	ldr	r3, [pc, #16]	; (800719c <SD_initialize+0x34>)
 800718a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800718c:	4b03      	ldr	r3, [pc, #12]	; (800719c <SD_initialize+0x34>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	b2db      	uxtb	r3, r3
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000025 	.word	0x20000025

080071a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff ffbd 	bl	800712c <SD_CheckStatus>
 80071b2:	4603      	mov	r3, r0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80071d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80071d4:	f7ff ff8d 	bl	80070f2 <SD_CheckStatusWithTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	da01      	bge.n	80071e2 <SD_read+0x26>
  {
    return res;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	e03b      	b.n	800725a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	68b8      	ldr	r0, [r7, #8]
 80071e8:	f7ff ff1a 	bl	8007020 <BSP_SD_ReadBlocks_DMA>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d132      	bne.n	8007258 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <SD_read+0xa8>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80071f8:	f7f9 fdfc 	bl	8000df4 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80071fe:	bf00      	nop
 8007200:	4b18      	ldr	r3, [pc, #96]	; (8007264 <SD_read+0xa8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d108      	bne.n	800721a <SD_read+0x5e>
 8007208:	f7f9 fdf4 	bl	8000df4 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	f247 522f 	movw	r2, #29999	; 0x752f
 8007216:	4293      	cmp	r3, r2
 8007218:	d9f2      	bls.n	8007200 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800721a:	4b12      	ldr	r3, [pc, #72]	; (8007264 <SD_read+0xa8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d102      	bne.n	8007228 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	75fb      	strb	r3, [r7, #23]
 8007226:	e017      	b.n	8007258 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007228:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <SD_read+0xa8>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800722e:	f7f9 fde1 	bl	8000df4 <HAL_GetTick>
 8007232:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007234:	e007      	b.n	8007246 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007236:	f7ff ff27 	bl	8007088 <BSP_SD_GetCardState>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <SD_read+0x8a>
          {
            res = RES_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007244:	e008      	b.n	8007258 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007246:	f7f9 fdd5 	bl	8000df4 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	f247 522f 	movw	r2, #29999	; 0x752f
 8007254:	4293      	cmp	r3, r2
 8007256:	d9ee      	bls.n	8007236 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000208 	.word	0x20000208

08007268 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800727c:	4b24      	ldr	r3, [pc, #144]	; (8007310 <SD_write+0xa8>)
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007282:	f247 5030 	movw	r0, #30000	; 0x7530
 8007286:	f7ff ff34 	bl	80070f2 <SD_CheckStatusWithTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	da01      	bge.n	8007294 <SD_write+0x2c>
  {
    return res;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	e038      	b.n	8007306 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f7ff fedb 	bl	8007054 <BSP_SD_WriteBlocks_DMA>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d12f      	bne.n	8007304 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80072a4:	f7f9 fda6 	bl	8000df4 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80072aa:	bf00      	nop
 80072ac:	4b18      	ldr	r3, [pc, #96]	; (8007310 <SD_write+0xa8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d108      	bne.n	80072c6 <SD_write+0x5e>
 80072b4:	f7f9 fd9e 	bl	8000df4 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	f247 522f 	movw	r2, #29999	; 0x752f
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d9f2      	bls.n	80072ac <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <SD_write+0xa8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
 80072d2:	e017      	b.n	8007304 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <SD_write+0xa8>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80072da:	f7f9 fd8b 	bl	8000df4 <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80072e0:	e007      	b.n	80072f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80072e2:	f7ff fed1 	bl	8007088 <BSP_SD_GetCardState>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <SD_write+0x8a>
          {
            res = RES_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
            break;
 80072f0:	e008      	b.n	8007304 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80072f2:	f7f9 fd7f 	bl	8000df4 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8007300:	4293      	cmp	r3, r2
 8007302:	d9ee      	bls.n	80072e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007304:	7dfb      	ldrb	r3, [r7, #23]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000204 	.word	0x20000204

08007314 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08c      	sub	sp, #48	; 0x30
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	603a      	str	r2, [r7, #0]
 800731e:	71fb      	strb	r3, [r7, #7]
 8007320:	460b      	mov	r3, r1
 8007322:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800732a:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <SD_ioctl+0xac>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <SD_ioctl+0x28>
 8007338:	2303      	movs	r3, #3
 800733a:	e03c      	b.n	80073b6 <SD_ioctl+0xa2>

  switch (cmd)
 800733c:	79bb      	ldrb	r3, [r7, #6]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d834      	bhi.n	80073ac <SD_ioctl+0x98>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <SD_ioctl+0x34>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007359 	.word	0x08007359
 800734c:	08007361 	.word	0x08007361
 8007350:	08007379 	.word	0x08007379
 8007354:	08007393 	.word	0x08007393
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800735e:	e028      	b.n	80073b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007360:	f107 030c 	add.w	r3, r7, #12
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fe9f 	bl	80070a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800736a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007376:	e01c      	b.n	80073b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fe93 	bl	80070a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	b29a      	uxth	r2, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007390:	e00f      	b.n	80073b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007392:	f107 030c 	add.w	r3, r7, #12
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fe86 	bl	80070a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	0a5a      	lsrs	r2, r3, #9
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073aa:	e002      	b.n	80073b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80073ac:	2304      	movs	r3, #4
 80073ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80073b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3730      	adds	r7, #48	; 0x30
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000025 	.word	0x20000025

080073c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80073c8:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <BSP_SD_ReadCpltCallback+0x14>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
}
 80073ce:	bf00      	nop
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20000208 	.word	0x20000208

080073dc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80073e8:	f44f 701d 	mov.w	r0, #628	; 0x274
 80073ec:	f006 fbf0 	bl	800dbd0 <malloc>
 80073f0:	4603      	mov	r3, r0
 80073f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007402:	2302      	movs	r3, #2
 8007404:	e034      	b.n	8007470 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	7c1b      	ldrb	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d115      	bne.n	8007442 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741a:	2202      	movs	r2, #2
 800741c:	2101      	movs	r1, #1
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f006 fa3d 	bl	800d89e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800742c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007430:	2202      	movs	r2, #2
 8007432:	2181      	movs	r1, #129	; 0x81
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f006 fa32 	bl	800d89e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	871a      	strh	r2, [r3, #56]	; 0x38
 8007440:	e012      	b.n	8007468 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	2202      	movs	r2, #2
 8007446:	2101      	movs	r1, #1
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f006 fa28 	bl	800d89e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	2202      	movs	r2, #2
 800745a:	2181      	movs	r1, #129	; 0x81
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f006 fa1e 	bl	800d89e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f990 	bl	800778e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8007484:	2101      	movs	r1, #1
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f006 fa2f 	bl	800d8ea <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8007494:	2181      	movs	r1, #129	; 0x81
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f006 fa27 	bl	800d8ea <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9c9 	bl	800783a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074b8:	4618      	mov	r0, r3
 80074ba:	f006 fb91 	bl	800dbe0 <free>
    pdev->pClassData = NULL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074e0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d04e      	beq.n	8007594 <USBD_MSC_Setup+0xc4>
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	f040 80c8 	bne.w	800768c <USBD_MSC_Setup+0x1bc>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2bfe      	cmp	r3, #254	; 0xfe
 8007502:	d002      	beq.n	800750a <USBD_MSC_Setup+0x3a>
 8007504:	2bff      	cmp	r3, #255	; 0xff
 8007506:	d025      	beq.n	8007554 <USBD_MSC_Setup+0x84>
 8007508:	e03c      	b.n	8007584 <USBD_MSC_Setup+0xb4>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d119      	bne.n	8007546 <USBD_MSC_Setup+0x76>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	88db      	ldrh	r3, [r3, #6]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d115      	bne.n	8007546 <USBD_MSC_Setup+0x76>
          ((req->bmRequest & 0x80U) == 0x80U))
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007520:	2b00      	cmp	r3, #0
 8007522:	da10      	bge.n	8007546 <USBD_MSC_Setup+0x76>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	4798      	blx	r3
 800752e:	4603      	mov	r3, r0
 8007530:	461a      	mov	r2, r3
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2201      	movs	r2, #1
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f002 fd13 	bl	8009f68 <USBD_CtlSendData>
 8007542:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007544:	e025      	b.n	8007592 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f002 fc9c 	bl	8009e86 <USBD_CtlError>
        ret = USBD_FAIL;
 800754e:	2303      	movs	r3, #3
 8007550:	75fb      	strb	r3, [r7, #23]
      break;
 8007552:	e01e      	b.n	8007592 <USBD_MSC_Setup+0xc2>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	885b      	ldrh	r3, [r3, #2]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10c      	bne.n	8007576 <USBD_MSC_Setup+0xa6>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d108      	bne.n	8007576 <USBD_MSC_Setup+0xa6>
          ((req->bmRequest & 0x80U) != 0x80U))
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800756a:	2b00      	cmp	r3, #0
 800756c:	db03      	blt.n	8007576 <USBD_MSC_Setup+0xa6>
      {
        MSC_BOT_Reset(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f941 	bl	80077f6 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007574:	e00d      	b.n	8007592 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f002 fc84 	bl	8009e86 <USBD_CtlError>
        ret = USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	75fb      	strb	r3, [r7, #23]
      break;
 8007582:	e006      	b.n	8007592 <USBD_MSC_Setup+0xc2>

    default:
      USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f002 fc7d 	bl	8009e86 <USBD_CtlError>
      ret = USBD_FAIL;
 800758c:	2303      	movs	r3, #3
 800758e:	75fb      	strb	r3, [r7, #23]
      break;
 8007590:	bf00      	nop
    }
    break;
 8007592:	e082      	b.n	800769a <USBD_MSC_Setup+0x1ca>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b0b      	cmp	r3, #11
 800759a:	d86e      	bhi.n	800767a <USBD_MSC_Setup+0x1aa>
 800759c:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <USBD_MSC_Setup+0xd4>)
 800759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a2:	bf00      	nop
 80075a4:	080075d5 	.word	0x080075d5
 80075a8:	0800764b 	.word	0x0800764b
 80075ac:	0800767b 	.word	0x0800767b
 80075b0:	0800767b 	.word	0x0800767b
 80075b4:	0800767b 	.word	0x0800767b
 80075b8:	0800767b 	.word	0x0800767b
 80075bc:	0800767b 	.word	0x0800767b
 80075c0:	0800767b 	.word	0x0800767b
 80075c4:	0800767b 	.word	0x0800767b
 80075c8:	0800767b 	.word	0x0800767b
 80075cc:	080075fd 	.word	0x080075fd
 80075d0:	08007625 	.word	0x08007625
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d107      	bne.n	80075ee <USBD_MSC_Setup+0x11e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075de:	f107 030e 	add.w	r3, r7, #14
 80075e2:	2202      	movs	r2, #2
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f002 fcbe 	bl	8009f68 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80075ec:	e04d      	b.n	800768a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f002 fc48 	bl	8009e86 <USBD_CtlError>
        ret = USBD_FAIL;
 80075f6:	2303      	movs	r3, #3
 80075f8:	75fb      	strb	r3, [r7, #23]
      break;
 80075fa:	e046      	b.n	800768a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007602:	2b03      	cmp	r3, #3
 8007604:	d107      	bne.n	8007616 <USBD_MSC_Setup+0x146>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3304      	adds	r3, #4
 800760a:	2201      	movs	r2, #1
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f002 fcaa 	bl	8009f68 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007614:	e039      	b.n	800768a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f002 fc34 	bl	8009e86 <USBD_CtlError>
        ret = USBD_FAIL;
 800761e:	2303      	movs	r3, #3
 8007620:	75fb      	strb	r3, [r7, #23]
      break;
 8007622:	e032      	b.n	800768a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762a:	2b03      	cmp	r3, #3
 800762c:	d106      	bne.n	800763c <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800763a:	e026      	b.n	800768a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f002 fc21 	bl	8009e86 <USBD_CtlError>
        ret = USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	75fb      	strb	r3, [r7, #23]
      break;
 8007648:	e01f      	b.n	800768a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007650:	2b03      	cmp	r3, #3
 8007652:	d119      	bne.n	8007688 <USBD_MSC_Setup+0x1b8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	885b      	ldrh	r3, [r3, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d115      	bne.n	8007688 <USBD_MSC_Setup+0x1b8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	889b      	ldrh	r3, [r3, #4]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f006 f95f 	bl	800d928 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	889b      	ldrh	r3, [r3, #4]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa5c 	bl	8007b30 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8007678:	e006      	b.n	8007688 <USBD_MSC_Setup+0x1b8>

    default:
      USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f002 fc02 	bl	8009e86 <USBD_CtlError>
      ret = USBD_FAIL;
 8007682:	2303      	movs	r3, #3
 8007684:	75fb      	strb	r3, [r7, #23]
      break;
 8007686:	e000      	b.n	800768a <USBD_MSC_Setup+0x1ba>
      break;
 8007688:	bf00      	nop
    }
    break;
 800768a:	e006      	b.n	800769a <USBD_MSC_Setup+0x1ca>

  default:
    USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f002 fbf9 	bl	8009e86 <USBD_CtlError>
    ret = USBD_FAIL;
 8007694:	2303      	movs	r3, #3
 8007696:	75fb      	strb	r3, [r7, #23]
    break;
 8007698:	bf00      	nop
  }

  return (uint8_t)ret;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f8d1 	bl	800785c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f8f3 	bl	80078c0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80076f2:	4b03      	ldr	r3, [pc, #12]	; (8007700 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000060 	.word	0x20000060

08007704 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8007712:	4b03      	ldr	r3, [pc, #12]	; (8007720 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	20000080 	.word	0x20000080

08007724 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8007732:	4b03      	ldr	r3, [pc, #12]	; (8007740 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	200000a0 	.word	0x200000a0

08007744 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	220a      	movs	r2, #10
 8007750:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8007752:	4b03      	ldr	r3, [pc, #12]	; (8007760 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	200000c0 	.word	0x200000c0

08007764 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007774:	2303      	movs	r3, #3
 8007776:	e004      	b.n	8007782 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2000      	movs	r0, #0
 80077cc:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80077ce:	2101      	movs	r1, #1
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f006 f8a9 	bl	800d928 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80077d6:	2181      	movs	r1, #129	; 0x81
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f006 f8a5 	bl	800d928 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80077e4:	231f      	movs	r3, #31
 80077e6:	2101      	movs	r1, #1
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f006 f966 	bl	800daba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007804:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8007812:	2181      	movs	r1, #129	; 0x81
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f006 f8c5 	bl	800d9a4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800781a:	2101      	movs	r1, #1
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f006 f8c1 	bl	800d9a4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007828:	231f      	movs	r3, #31
 800782a:	2101      	movs	r1, #1
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f006 f944 	bl	800daba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007848:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	721a      	strb	r2, [r3, #8]
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800786e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	7a1b      	ldrb	r3, [r3, #8]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d005      	beq.n	8007884 <MSC_BOT_DataIn+0x28>
 8007878:	2b02      	cmp	r3, #2
 800787a:	db1a      	blt.n	80078b2 <MSC_BOT_DataIn+0x56>
 800787c:	3b03      	subs	r3, #3
 800787e:	2b01      	cmp	r3, #1
 8007880:	d817      	bhi.n	80078b2 <MSC_BOT_DataIn+0x56>
 8007882:	e011      	b.n	80078a8 <MSC_BOT_DataIn+0x4c>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007890:	461a      	mov	r2, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f974 	bl	8007b80 <SCSI_ProcessCmd>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	da0b      	bge.n	80078b6 <MSC_BOT_DataIn+0x5a>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800789e:	2101      	movs	r1, #1
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8eb 	bl	8007a7c <MSC_BOT_SendCSW>
    }
    break;
 80078a6:	e006      	b.n	80078b6 <MSC_BOT_DataIn+0x5a>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8e6 	bl	8007a7c <MSC_BOT_SendCSW>
    break;
 80078b0:	e002      	b.n	80078b8 <MSC_BOT_DataIn+0x5c>

  default:
    break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <MSC_BOT_DataIn+0x5c>
    break;
 80078b6:	bf00      	nop
  }
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	7a1b      	ldrb	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <MSC_BOT_DataOut+0x22>
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d004      	beq.n	80078ea <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80078e0:	e015      	b.n	800790e <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f818 	bl	8007918 <MSC_BOT_CBW_Decode>
      break;
 80078e8:	e011      	b.n	800790e <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80078f6:	461a      	mov	r2, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f941 	bl	8007b80 <SCSI_ProcessCmd>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	da03      	bge.n	800790c <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007904:	2101      	movs	r1, #1
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f8b8 	bl	8007a7c <MSC_BOT_SendCSW>
      break;
 800790c:	bf00      	nop
  }
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007926:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007940:	2101      	movs	r1, #1
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f006 f8da 	bl	800dafc <USBD_LL_GetRxDataSize>
 8007948:	4603      	mov	r3, r0
 800794a:	2b1f      	cmp	r3, #31
 800794c:	d114      	bne.n	8007978 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007954:	4a32      	ldr	r2, [pc, #200]	; (8007a20 <MSC_BOT_CBW_Decode+0x108>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d10e      	bne.n	8007978 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007960:	2b01      	cmp	r3, #1
 8007962:	d809      	bhi.n	8007978 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007974:	2b10      	cmp	r3, #16
 8007976:	d90e      	bls.n	8007996 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800797e:	2320      	movs	r3, #32
 8007980:	2205      	movs	r2, #5
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fd71 	bl	800846a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2202      	movs	r2, #2
 800798c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8a0 	bl	8007ad4 <MSC_BOT_Abort>
 8007994:	e041      	b.n	8007a1a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80079a2:	461a      	mov	r2, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f8eb 	bl	8007b80 <SCSI_ProcessCmd>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da0c      	bge.n	80079ca <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	7a1b      	ldrb	r3, [r3, #8]
 80079b4:	2b05      	cmp	r3, #5
 80079b6:	d104      	bne.n	80079c2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80079b8:	2101      	movs	r1, #1
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f85e 	bl	8007a7c <MSC_BOT_SendCSW>
 80079c0:	e02b      	b.n	8007a1a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f886 	bl	8007ad4 <MSC_BOT_Abort>
 80079c8:	e027      	b.n	8007a1a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	7a1b      	ldrb	r3, [r3, #8]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d022      	beq.n	8007a18 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d01e      	beq.n	8007a18 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d01a      	beq.n	8007a18 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f103 0110 	add.w	r1, r3, #16
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f814 	bl	8007a24 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80079fc:	e00d      	b.n	8007a1a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007a06:	2100      	movs	r1, #0
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f837 	bl	8007a7c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007a0e:	e004      	b.n	8007a1a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f85f 	bl	8007ad4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007a16:	e000      	b.n	8007a1a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007a18:	bf00      	nop
    }
  }
}
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	43425355 	.word	0x43425355

08007a24 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a36:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	bf28      	it	cs
 8007a44:	4613      	movcs	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	1ad2      	subs	r2, r2, r3
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2204      	movs	r2, #4
 8007a64:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	2181      	movs	r1, #129	; 0x81
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f006 f803 	bl	800da78 <USBD_LL_Transmit>
}
 8007a72:	bf00      	nop
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a8e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <MSC_BOT_SendCSW+0x54>)
 8007a94:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8007aac:	230d      	movs	r3, #13
 8007aae:	2181      	movs	r1, #129	; 0x81
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f005 ffe1 	bl	800da78 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007abc:	231f      	movs	r3, #31
 8007abe:	2101      	movs	r1, #1
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f005 fffa 	bl	800daba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	53425355 	.word	0x53425355

08007ad4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10c      	bne.n	8007b08 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007b00:	2101      	movs	r1, #1
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f005 ff2f 	bl	800d966 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007b08:	2181      	movs	r1, #129	; 0x81
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f005 ff2b 	bl	800d966 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	7a5b      	ldrb	r3, [r3, #9]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d107      	bne.n	8007b28 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007b18:	2181      	movs	r1, #129	; 0x81
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f005 ff23 	bl	800d966 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007b20:	2101      	movs	r1, #1
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f005 ff1f 	bl	800d966 <USBD_LL_StallEP>
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b42:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	7a5b      	ldrb	r3, [r3, #9]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d108      	bne.n	8007b5e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007b4c:	2181      	movs	r1, #129	; 0x81
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f005 ff09 	bl	800d966 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007b54:	2101      	movs	r1, #1
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f005 ff05 	bl	800d966 <USBD_LL_StallEP>
 8007b5c:	e00d      	b.n	8007b7a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	da08      	bge.n	8007b78 <MSC_BOT_CplClrFeature+0x48>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	7a5b      	ldrb	r3, [r3, #9]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d004      	beq.n	8007b78 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007b6e:	2101      	movs	r1, #1
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff ff83 	bl	8007a7c <MSC_BOT_SendCSW>
 8007b76:	e000      	b.n	8007b7a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8007b78:	bf00      	nop
  }
}
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b94:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2baa      	cmp	r3, #170	; 0xaa
 8007b9c:	f000 8144 	beq.w	8007e28 <SCSI_ProcessCmd+0x2a8>
 8007ba0:	2baa      	cmp	r3, #170	; 0xaa
 8007ba2:	f300 8153 	bgt.w	8007e4c <SCSI_ProcessCmd+0x2cc>
 8007ba6:	2ba8      	cmp	r3, #168	; 0xa8
 8007ba8:	f000 812c 	beq.w	8007e04 <SCSI_ProcessCmd+0x284>
 8007bac:	2ba8      	cmp	r3, #168	; 0xa8
 8007bae:	f300 814d 	bgt.w	8007e4c <SCSI_ProcessCmd+0x2cc>
 8007bb2:	2b5a      	cmp	r3, #90	; 0x5a
 8007bb4:	f300 80c0 	bgt.w	8007d38 <SCSI_ProcessCmd+0x1b8>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f2c0 8147 	blt.w	8007e4c <SCSI_ProcessCmd+0x2cc>
 8007bbe:	2b5a      	cmp	r3, #90	; 0x5a
 8007bc0:	f200 8144 	bhi.w	8007e4c <SCSI_ProcessCmd+0x2cc>
 8007bc4:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <SCSI_ProcessCmd+0x4c>)
 8007bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bca:	bf00      	nop
 8007bcc:	08007d3f 	.word	0x08007d3f
 8007bd0:	08007e4d 	.word	0x08007e4d
 8007bd4:	08007e4d 	.word	0x08007e4d
 8007bd8:	08007d51 	.word	0x08007d51
 8007bdc:	08007e4d 	.word	0x08007e4d
 8007be0:	08007e4d 	.word	0x08007e4d
 8007be4:	08007e4d 	.word	0x08007e4d
 8007be8:	08007e4d 	.word	0x08007e4d
 8007bec:	08007e4d 	.word	0x08007e4d
 8007bf0:	08007e4d 	.word	0x08007e4d
 8007bf4:	08007e4d 	.word	0x08007e4d
 8007bf8:	08007e4d 	.word	0x08007e4d
 8007bfc:	08007e4d 	.word	0x08007e4d
 8007c00:	08007e4d 	.word	0x08007e4d
 8007c04:	08007e4d 	.word	0x08007e4d
 8007c08:	08007e4d 	.word	0x08007e4d
 8007c0c:	08007e4d 	.word	0x08007e4d
 8007c10:	08007e4d 	.word	0x08007e4d
 8007c14:	08007d63 	.word	0x08007d63
 8007c18:	08007e4d 	.word	0x08007e4d
 8007c1c:	08007e4d 	.word	0x08007e4d
 8007c20:	08007e4d 	.word	0x08007e4d
 8007c24:	08007e4d 	.word	0x08007e4d
 8007c28:	08007e4d 	.word	0x08007e4d
 8007c2c:	08007e4d 	.word	0x08007e4d
 8007c30:	08007e4d 	.word	0x08007e4d
 8007c34:	08007d99 	.word	0x08007d99
 8007c38:	08007d75 	.word	0x08007d75
 8007c3c:	08007e4d 	.word	0x08007e4d
 8007c40:	08007e4d 	.word	0x08007e4d
 8007c44:	08007d87 	.word	0x08007d87
 8007c48:	08007e4d 	.word	0x08007e4d
 8007c4c:	08007e4d 	.word	0x08007e4d
 8007c50:	08007e4d 	.word	0x08007e4d
 8007c54:	08007e4d 	.word	0x08007e4d
 8007c58:	08007dbd 	.word	0x08007dbd
 8007c5c:	08007e4d 	.word	0x08007e4d
 8007c60:	08007dcf 	.word	0x08007dcf
 8007c64:	08007e4d 	.word	0x08007e4d
 8007c68:	08007e4d 	.word	0x08007e4d
 8007c6c:	08007df3 	.word	0x08007df3
 8007c70:	08007e4d 	.word	0x08007e4d
 8007c74:	08007e17 	.word	0x08007e17
 8007c78:	08007e4d 	.word	0x08007e4d
 8007c7c:	08007e4d 	.word	0x08007e4d
 8007c80:	08007e4d 	.word	0x08007e4d
 8007c84:	08007e4d 	.word	0x08007e4d
 8007c88:	08007e3b 	.word	0x08007e3b
 8007c8c:	08007e4d 	.word	0x08007e4d
 8007c90:	08007e4d 	.word	0x08007e4d
 8007c94:	08007e4d 	.word	0x08007e4d
 8007c98:	08007e4d 	.word	0x08007e4d
 8007c9c:	08007e4d 	.word	0x08007e4d
 8007ca0:	08007e4d 	.word	0x08007e4d
 8007ca4:	08007e4d 	.word	0x08007e4d
 8007ca8:	08007e4d 	.word	0x08007e4d
 8007cac:	08007e4d 	.word	0x08007e4d
 8007cb0:	08007e4d 	.word	0x08007e4d
 8007cb4:	08007e4d 	.word	0x08007e4d
 8007cb8:	08007e4d 	.word	0x08007e4d
 8007cbc:	08007e4d 	.word	0x08007e4d
 8007cc0:	08007e4d 	.word	0x08007e4d
 8007cc4:	08007e4d 	.word	0x08007e4d
 8007cc8:	08007e4d 	.word	0x08007e4d
 8007ccc:	08007e4d 	.word	0x08007e4d
 8007cd0:	08007e4d 	.word	0x08007e4d
 8007cd4:	08007e4d 	.word	0x08007e4d
 8007cd8:	08007e4d 	.word	0x08007e4d
 8007cdc:	08007e4d 	.word	0x08007e4d
 8007ce0:	08007e4d 	.word	0x08007e4d
 8007ce4:	08007e4d 	.word	0x08007e4d
 8007ce8:	08007e4d 	.word	0x08007e4d
 8007cec:	08007e4d 	.word	0x08007e4d
 8007cf0:	08007e4d 	.word	0x08007e4d
 8007cf4:	08007e4d 	.word	0x08007e4d
 8007cf8:	08007e4d 	.word	0x08007e4d
 8007cfc:	08007e4d 	.word	0x08007e4d
 8007d00:	08007e4d 	.word	0x08007e4d
 8007d04:	08007e4d 	.word	0x08007e4d
 8007d08:	08007e4d 	.word	0x08007e4d
 8007d0c:	08007e4d 	.word	0x08007e4d
 8007d10:	08007e4d 	.word	0x08007e4d
 8007d14:	08007e4d 	.word	0x08007e4d
 8007d18:	08007e4d 	.word	0x08007e4d
 8007d1c:	08007e4d 	.word	0x08007e4d
 8007d20:	08007e4d 	.word	0x08007e4d
 8007d24:	08007e4d 	.word	0x08007e4d
 8007d28:	08007e4d 	.word	0x08007e4d
 8007d2c:	08007e4d 	.word	0x08007e4d
 8007d30:	08007e4d 	.word	0x08007e4d
 8007d34:	08007dab 	.word	0x08007dab
 8007d38:	2b9e      	cmp	r3, #158	; 0x9e
 8007d3a:	d051      	beq.n	8007de0 <SCSI_ProcessCmd+0x260>
 8007d3c:	e086      	b.n	8007e4c <SCSI_ProcessCmd+0x2cc>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007d3e:	7afb      	ldrb	r3, [r7, #11]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	4619      	mov	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f893 	bl	8007e70 <SCSI_TestUnitReady>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]
    break;
 8007d4e:	e089      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	4619      	mov	r1, r3
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fb0e 	bl	8008378 <SCSI_RequestSense>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007d60:	e080      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4619      	mov	r1, r3
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f8cb 	bl	8007f04 <SCSI_Inquiry>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]
    break;
 8007d72:	e077      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fbb8 	bl	80084f0 <SCSI_StartStopUnit>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]
    break;
 8007d84:	e06e      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fbfa 	bl	8008586 <SCSI_AllowPreventRemovable>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]
    break;
 8007d96:	e065      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fa9e 	bl	80082e0 <SCSI_ModeSense6>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75fb      	strb	r3, [r7, #23]
    break;
 8007da8:	e05c      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4619      	mov	r1, r3
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fabb 	bl	800832c <SCSI_ModeSense10>
 8007db6:	4603      	mov	r3, r0
 8007db8:	75fb      	strb	r3, [r7, #23]
    break;
 8007dba:	e053      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fa1f 	bl	8008206 <SCSI_ReadFormatCapacity>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75fb      	strb	r3, [r7, #23]
    break;
 8007dcc:	e04a      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f903 	bl	8007fe0 <SCSI_ReadCapacity10>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]
    break;
 8007dde:	e041      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	4619      	mov	r1, r3
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f969 	bl	80080be <SCSI_ReadCapacity16>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75fb      	strb	r3, [r7, #23]
    break;
 8007df0:	e038      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	4619      	mov	r1, r3
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fbe7 	bl	80085cc <SCSI_Read10>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75fb      	strb	r3, [r7, #23]
    break;
 8007e02:	e02f      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 fc78 	bl	8008700 <SCSI_Read12>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]
    break;
 8007e14:	e026      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fd14 	bl	800884a <SCSI_Write10>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]
    break;
 8007e26:	e01d      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 fdca 	bl	80089c8 <SCSI_Write12>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]
    break;
 8007e38:	e014      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fe90 	bl	8008b66 <SCSI_Verify10>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]
    break;
 8007e4a:	e00b      	b.n	8007e64 <SCSI_ProcessCmd+0x2e4>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007e4c:	7af9      	ldrb	r1, [r7, #11]
 8007e4e:	2320      	movs	r3, #32
 8007e50:	2205      	movs	r2, #5
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fb09 	bl	800846a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8007e5e:	23ff      	movs	r3, #255	; 0xff
 8007e60:	75fb      	strb	r3, [r7, #23]
    break;
 8007e62:	bf00      	nop
  }

  return ret;
 8007e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e84:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00a      	beq.n	8007ea6 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007e96:	2320      	movs	r3, #32
 8007e98:	2205      	movs	r2, #5
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fae5 	bl	800846a <SCSI_SenseCode>

    return -1;
 8007ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea4:	e02a      	b.n	8007efc <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d10b      	bne.n	8007ec8 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007eb0:	7af9      	ldrb	r1, [r7, #11]
 8007eb2:	233a      	movs	r3, #58	; 0x3a
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fad7 	bl	800846a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2205      	movs	r2, #5
 8007ec0:	721a      	strb	r2, [r3, #8]
    return -1;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec6:	e019      	b.n	8007efc <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	7afa      	ldrb	r2, [r7, #11]
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4798      	blx	r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007edc:	7af9      	ldrb	r1, [r7, #11]
 8007ede:	233a      	movs	r3, #58	; 0x3a
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fac1 	bl	800846a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2205      	movs	r2, #5
 8007eec:	721a      	strb	r2, [r3, #8]

    return -1;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef2:	e003      	b.n	8007efc <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	60da      	str	r2, [r3, #12]

  return 0;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f18:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007f2a:	2320      	movs	r3, #32
 8007f2c:	2205      	movs	r2, #5
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 fa9b 	bl	800846a <SCSI_SenseCode>
    return -1;
 8007f34:	f04f 33ff 	mov.w	r3, #4294967295
 8007f38:	e04a      	b.n	8007fd0 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d020      	beq.n	8007f8a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007f52:	2206      	movs	r2, #6
 8007f54:	4920      	ldr	r1, [pc, #128]	; (8007fd8 <SCSI_Inquiry+0xd4>)
 8007f56:	69b8      	ldr	r0, [r7, #24]
 8007f58:	f000 ff50 	bl	8008dfc <SCSI_UpdateBotData>
 8007f5c:	e037      	b.n	8007fce <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3302      	adds	r3, #2
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b80      	cmp	r3, #128	; 0x80
 8007f66:	d105      	bne.n	8007f74 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007f68:	2208      	movs	r2, #8
 8007f6a:	491c      	ldr	r1, [pc, #112]	; (8007fdc <SCSI_Inquiry+0xd8>)
 8007f6c:	69b8      	ldr	r0, [r7, #24]
 8007f6e:	f000 ff45 	bl	8008dfc <SCSI_UpdateBotData>
 8007f72:	e02c      	b.n	8007fce <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007f7a:	2324      	movs	r3, #36	; 0x24
 8007f7c:	2205      	movs	r2, #5
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 fa73 	bl	800846a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007f84:	f04f 33ff 	mov.w	r3, #4294967295
 8007f88:	e022      	b.n	8007fd0 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f90:	69d9      	ldr	r1, [r3, #28]
 8007f92:	7afa      	ldrb	r2, [r7, #11]
 8007f94:	4613      	mov	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	3305      	adds	r3, #5
 8007faa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	8bfa      	ldrh	r2, [r7, #30]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d303      	bcc.n	8007fc2 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007fc2:	8bfb      	ldrh	r3, [r7, #30]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6979      	ldr	r1, [r7, #20]
 8007fc8:	69b8      	ldr	r0, [r7, #24]
 8007fca:	f000 ff17 	bl	8008dfc <SCSI_UpdateBotData>
  }

  return 0;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200000cc 	.word	0x200000cc
 8007fdc:	200000d4 	.word	0x200000d4

08007fe0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800800a:	7af8      	ldrb	r0, [r7, #11]
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008012:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <SCSI_ReadCapacity10+0x44>
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008020:	2b02      	cmp	r3, #2
 8008022:	d108      	bne.n	8008036 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008024:	7af9      	ldrb	r1, [r7, #11]
 8008026:	233a      	movs	r3, #58	; 0x3a
 8008028:	2202      	movs	r2, #2
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fa1d 	bl	800846a <SCSI_SenseCode>
    return -1;
 8008030:	f04f 33ff 	mov.w	r3, #4294967295
 8008034:	e03f      	b.n	80080b6 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800803c:	3b01      	subs	r3, #1
 800803e:	0e1b      	lsrs	r3, r3, #24
 8008040:	b2da      	uxtb	r2, r3
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800804c:	3b01      	subs	r3, #1
 800804e:	0c1b      	lsrs	r3, r3, #16
 8008050:	b2da      	uxtb	r2, r3
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800805c:	3b01      	subs	r3, #1
 800805e:	0a1b      	lsrs	r3, r3, #8
 8008060:	b2da      	uxtb	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800806c:	b2db      	uxtb	r3, r3
 800806e:	3b01      	subs	r3, #1
 8008070:	b2da      	uxtb	r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800807c:	161b      	asrs	r3, r3, #24
 800807e:	b2da      	uxtb	r2, r3
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800808a:	141b      	asrs	r3, r3, #16
 800808c:	b2da      	uxtb	r2, r3
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008098:	0a1b      	lsrs	r3, r3, #8
 800809a:	b29b      	uxth	r3, r3
 800809c:	b2da      	uxtb	r2, r3
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2208      	movs	r2, #8
 80080b2:	60da      	str	r2, [r3, #12]

  return 0;
 80080b4:	2300      	movs	r3, #0

}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b088      	sub	sp, #32
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	460b      	mov	r3, r1
 80080c8:	607a      	str	r2, [r7, #4]
 80080ca:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80080e8:	7af8      	ldrb	r0, [r7, #11]
 80080ea:	4798      	blx	r3
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80080f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <SCSI_ReadCapacity16+0x44>
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d108      	bne.n	8008114 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008102:	7af9      	ldrb	r1, [r7, #11]
 8008104:	233a      	movs	r3, #58	; 0x3a
 8008106:	2202      	movs	r2, #2
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f9ae 	bl	800846a <SCSI_SenseCode>
    return -1;
 800810e:	f04f 33ff 	mov.w	r3, #4294967295
 8008112:	e074      	b.n	80081fe <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	330a      	adds	r3, #10
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	330b      	adds	r3, #11
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008124:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	330c      	adds	r3, #12
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800812e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	320d      	adds	r2, #13
 8008134:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008136:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800813c:	2300      	movs	r3, #0
 800813e:	77fb      	strb	r3, [r7, #31]
 8008140:	e007      	b.n	8008152 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 8008142:	7ffb      	ldrb	r3, [r7, #31]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	4413      	add	r3, r2
 8008148:	2200      	movs	r2, #0
 800814a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800814c:	7ffb      	ldrb	r3, [r7, #31]
 800814e:	3301      	adds	r3, #1
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	7ffa      	ldrb	r2, [r7, #31]
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	429a      	cmp	r2, r3
 800815a:	d3f2      	bcc.n	8008142 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008162:	3b01      	subs	r3, #1
 8008164:	0e1b      	lsrs	r3, r3, #24
 8008166:	b2da      	uxtb	r2, r3
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008172:	3b01      	subs	r3, #1
 8008174:	0c1b      	lsrs	r3, r3, #16
 8008176:	b2da      	uxtb	r2, r3
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008182:	3b01      	subs	r3, #1
 8008184:	0a1b      	lsrs	r3, r3, #8
 8008186:	b2da      	uxtb	r2, r3
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008192:	b2db      	uxtb	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b2da      	uxtb	r2, r3
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80081a2:	161b      	asrs	r3, r3, #24
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80081b0:	141b      	asrs	r3, r3, #16
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	330a      	adds	r3, #10
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	330b      	adds	r3, #11
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80081e4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	330c      	adds	r3, #12
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80081ee:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	320d      	adds	r2, #13
 80081f4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80081f6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	60da      	str	r2, [r3, #12]

  return 0;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3720      	adds	r7, #32
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b088      	sub	sp, #32
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	460b      	mov	r3, r1
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f107 0214 	add.w	r2, r7, #20
 8008228:	f107 0110 	add.w	r1, r7, #16
 800822c:	7af8      	ldrb	r0, [r7, #11]
 800822e:	4798      	blx	r3
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008234:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d104      	bne.n	8008246 <SCSI_ReadFormatCapacity+0x40>
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008242:	2b02      	cmp	r3, #2
 8008244:	d108      	bne.n	8008258 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008246:	7af9      	ldrb	r1, [r7, #11]
 8008248:	233a      	movs	r3, #58	; 0x3a
 800824a:	2202      	movs	r2, #2
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 f90c 	bl	800846a <SCSI_SenseCode>
    return -1;
 8008252:	f04f 33ff 	mov.w	r3, #4294967295
 8008256:	e03e      	b.n	80082d6 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 8008258:	2300      	movs	r3, #0
 800825a:	83fb      	strh	r3, [r7, #30]
 800825c:	e007      	b.n	800826e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800825e:	8bfb      	ldrh	r3, [r7, #30]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	4413      	add	r3, r2
 8008264:	2200      	movs	r2, #0
 8008266:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8008268:	8bfb      	ldrh	r3, [r7, #30]
 800826a:	3301      	adds	r3, #1
 800826c:	83fb      	strh	r3, [r7, #30]
 800826e:	8bfb      	ldrh	r3, [r7, #30]
 8008270:	2b0b      	cmp	r3, #11
 8008272:	d9f4      	bls.n	800825e <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2208      	movs	r2, #8
 8008278:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	3b01      	subs	r3, #1
 800827e:	0e1b      	lsrs	r3, r3, #24
 8008280:	b2da      	uxtb	r2, r3
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3b01      	subs	r3, #1
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	b2da      	uxtb	r2, r3
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3b01      	subs	r3, #1
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	b2da      	uxtb	r2, r3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2202      	movs	r2, #2
 80082ae:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80082b0:	8abb      	ldrh	r3, [r7, #20]
 80082b2:	141b      	asrs	r3, r3, #16
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80082ba:	8abb      	ldrh	r3, [r7, #20]
 80082bc:	0a1b      	lsrs	r3, r3, #8
 80082be:	b29b      	uxth	r3, r3
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80082c6:	8abb      	ldrh	r3, [r7, #20]
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	220c      	movs	r2, #12
 80082d2:	60da      	str	r2, [r3, #12]

  return 0;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3720      	adds	r7, #32
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	460b      	mov	r3, r1
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082f4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80082f6:	2317      	movs	r3, #23
 80082f8:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3304      	adds	r3, #4
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	8afa      	ldrh	r2, [r7, #22]
 8008304:	429a      	cmp	r2, r3
 8008306:	d303      	bcc.n	8008310 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8008310:	8afb      	ldrh	r3, [r7, #22]
 8008312:	461a      	mov	r2, r3
 8008314:	4904      	ldr	r1, [pc, #16]	; (8008328 <SCSI_ModeSense6+0x48>)
 8008316:	6938      	ldr	r0, [r7, #16]
 8008318:	f000 fd70 	bl	8008dfc <SCSI_UpdateBotData>

  return 0;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200000dc 	.word	0x200000dc

0800832c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	460b      	mov	r3, r1
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008340:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8008342:	231b      	movs	r3, #27
 8008344:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3308      	adds	r3, #8
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	8afa      	ldrh	r2, [r7, #22]
 8008350:	429a      	cmp	r2, r3
 8008352:	d303      	bcc.n	800835c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3308      	adds	r3, #8
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800835c:	8afb      	ldrh	r3, [r7, #22]
 800835e:	461a      	mov	r2, r3
 8008360:	4904      	ldr	r1, [pc, #16]	; (8008374 <SCSI_ModeSense10+0x48>)
 8008362:	6938      	ldr	r0, [r7, #16]
 8008364:	f000 fd4a 	bl	8008dfc <SCSI_UpdateBotData>

  return 0;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200000f4 	.word	0x200000f4

08008378 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	460b      	mov	r3, r1
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800838c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800839e:	2320      	movs	r3, #32
 80083a0:	2205      	movs	r2, #5
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 f861 	bl	800846a <SCSI_SenseCode>
    return -1;
 80083a8:	f04f 33ff 	mov.w	r3, #4294967295
 80083ac:	e059      	b.n	8008462 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80083ae:	2300      	movs	r3, #0
 80083b0:	75fb      	strb	r3, [r7, #23]
 80083b2:	e007      	b.n	80083c4 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4413      	add	r3, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	3301      	adds	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b11      	cmp	r3, #17
 80083c8:	d9f4      	bls.n	80083b4 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2270      	movs	r2, #112	; 0x70
 80083ce:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	220c      	movs	r2, #12
 80083d4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d02e      	beq.n	8008444 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80083ec:	461a      	mov	r2, r3
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3248      	adds	r2, #72	; 0x48
 80083f2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	3348      	adds	r3, #72	; 0x48
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	4413      	add	r3, r2
 8008408:	791a      	ldrb	r2, [r3, #4]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	3348      	adds	r3, #72	; 0x48
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	4413      	add	r3, r2
 800841c:	795a      	ldrb	r2, [r3, #5]
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008428:	3301      	adds	r3, #1
 800842a:	b2da      	uxtb	r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008438:	2b04      	cmp	r3, #4
 800843a:	d103      	bne.n	8008444 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2212      	movs	r2, #18
 8008448:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b12      	cmp	r3, #18
 8008452:	d805      	bhi.n	8008460 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3304      	adds	r3, #4
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	4608      	mov	r0, r1
 8008474:	4611      	mov	r1, r2
 8008476:	461a      	mov	r2, r3
 8008478:	4603      	mov	r3, r0
 800847a:	70fb      	strb	r3, [r7, #3]
 800847c:	460b      	mov	r3, r1
 800847e:	70bb      	strb	r3, [r7, #2]
 8008480:	4613      	mov	r3, r2
 8008482:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800848a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008492:	461a      	mov	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3248      	adds	r2, #72	; 0x48
 8008498:	78b9      	ldrb	r1, [r7, #2]
 800849a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	3348      	adds	r3, #72	; 0x48
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	4413      	add	r3, r2
 80084ac:	787a      	ldrb	r2, [r7, #1]
 80084ae:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	3348      	adds	r3, #72	; 0x48
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	4413      	add	r3, r2
 80084be:	2200      	movs	r2, #0
 80084c0:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80084c8:	3301      	adds	r3, #1
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d103      	bne.n	80084e4 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	460b      	mov	r3, r1
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008504:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800850c:	2b01      	cmp	r3, #1
 800850e:	d10f      	bne.n	8008530 <SCSI_StartStopUnit+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3304      	adds	r3, #4
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d108      	bne.n	8008530 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800851e:	7af9      	ldrb	r1, [r7, #11]
 8008520:	2324      	movs	r3, #36	; 0x24
 8008522:	2205      	movs	r2, #5
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7ff ffa0 	bl	800846a <SCSI_SenseCode>

    return -1;
 800852a:	f04f 33ff 	mov.w	r3, #4294967295
 800852e:	e026      	b.n	800857e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3304      	adds	r3, #4
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	2b01      	cmp	r3, #1
 800853c:	d104      	bne.n	8008548 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8008546:	e016      	b.n	8008576 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d104      	bne.n	8008560 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800855e:	e00a      	b.n	8008576 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3304      	adds	r3, #4
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b03      	cmp	r3, #3
 800856c:	d103      	bne.n	8008576 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2200      	movs	r2, #0
 800857a:	60da      	str	r2, [r3, #12]

  return 0;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008586:	b480      	push	{r7}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	460b      	mov	r3, r1
 8008590:	607a      	str	r2, [r7, #4]
 8008592:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800859a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3304      	adds	r3, #4
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80085ae:	e003      	b.n	80085b8 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	60da      	str	r2, [r3, #12]

  return 0;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	460b      	mov	r3, r1
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	7a1b      	ldrb	r3, [r3, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d17c      	bne.n	80086e4 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	db0a      	blt.n	800860c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80085fc:	2320      	movs	r3, #32
 80085fe:	2205      	movs	r2, #5
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff ff32 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008606:	f04f 33ff 	mov.w	r3, #4294967295
 800860a:	e075      	b.n	80086f8 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008612:	2b02      	cmp	r3, #2
 8008614:	d108      	bne.n	8008628 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008616:	7af9      	ldrb	r1, [r7, #11]
 8008618:	233a      	movs	r3, #58	; 0x3a
 800861a:	2202      	movs	r2, #2
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff ff24 	bl	800846a <SCSI_SenseCode>

      return -1;
 8008622:	f04f 33ff 	mov.w	r3, #4294967295
 8008626:	e067      	b.n	80086f8 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	7afa      	ldrb	r2, [r7, #11]
 8008632:	4610      	mov	r0, r2
 8008634:	4798      	blx	r3
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d008      	beq.n	800864e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800863c:	7af9      	ldrb	r1, [r7, #11]
 800863e:	233a      	movs	r3, #58	; 0x3a
 8008640:	2202      	movs	r2, #2
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f7ff ff11 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
 800864c:	e054      	b.n	80086f8 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3302      	adds	r3, #2
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3303      	adds	r3, #3
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800865e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3304      	adds	r3, #4
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008668:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	3205      	adds	r2, #5
 800866e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008670:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3307      	adds	r3, #7
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	3208      	adds	r2, #8
 8008684:	7812      	ldrb	r2, [r2, #0]
 8008686:	431a      	orrs	r2, r3
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800869a:	7af9      	ldrb	r1, [r7, #11]
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 fa95 	bl	8008bcc <SCSI_CheckAddressRange>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	da02      	bge.n	80086ae <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80086a8:	f04f 33ff 	mov.w	r3, #4294967295
 80086ac:	e024      	b.n	80086f8 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80086ba:	6979      	ldr	r1, [r7, #20]
 80086bc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d00a      	beq.n	80086de <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80086ce:	2320      	movs	r3, #32
 80086d0:	2205      	movs	r2, #5
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff fec9 	bl	800846a <SCSI_SenseCode>
      return -1;
 80086d8:	f04f 33ff 	mov.w	r3, #4294967295
 80086dc:	e00c      	b.n	80086f8 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2202      	movs	r2, #2
 80086e2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ea:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	4619      	mov	r1, r3
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fa8d 	bl	8008c10 <SCSI_ProcessRead>
 80086f6:	4603      	mov	r3, r0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	460b      	mov	r3, r1
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008714:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	7a1b      	ldrb	r3, [r3, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 8087 	bne.w	800882e <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008726:	b25b      	sxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	db0a      	blt.n	8008742 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008732:	2320      	movs	r3, #32
 8008734:	2205      	movs	r2, #5
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff fe97 	bl	800846a <SCSI_SenseCode>
      return -1;
 800873c:	f04f 33ff 	mov.w	r3, #4294967295
 8008740:	e07f      	b.n	8008842 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008748:	2b02      	cmp	r3, #2
 800874a:	d108      	bne.n	800875e <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800874c:	7af9      	ldrb	r1, [r7, #11]
 800874e:	233a      	movs	r3, #58	; 0x3a
 8008750:	2202      	movs	r2, #2
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff fe89 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008758:	f04f 33ff 	mov.w	r3, #4294967295
 800875c:	e071      	b.n	8008842 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	7afa      	ldrb	r2, [r7, #11]
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008772:	7af9      	ldrb	r1, [r7, #11]
 8008774:	233a      	movs	r3, #58	; 0x3a
 8008776:	2202      	movs	r2, #2
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7ff fe76 	bl	800846a <SCSI_SenseCode>
      return -1;
 800877e:	f04f 33ff 	mov.w	r3, #4294967295
 8008782:	e05e      	b.n	8008842 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3302      	adds	r3, #2
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3303      	adds	r3, #3
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008794:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3304      	adds	r3, #4
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800879e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	3205      	adds	r2, #5
 80087a4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80087a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3306      	adds	r3, #6
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3307      	adds	r3, #7
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087be:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3308      	adds	r3, #8
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80087c8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	3209      	adds	r2, #9
 80087ce:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80087d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80087e4:	7af9      	ldrb	r1, [r7, #11]
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 f9f0 	bl	8008bcc <SCSI_CheckAddressRange>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da02      	bge.n	80087f8 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80087f2:	f04f 33ff 	mov.w	r3, #4294967295
 80087f6:	e024      	b.n	8008842 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008804:	6979      	ldr	r1, [r7, #20]
 8008806:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800880a:	fb01 f303 	mul.w	r3, r1, r3
 800880e:	429a      	cmp	r2, r3
 8008810:	d00a      	beq.n	8008828 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008818:	2320      	movs	r3, #32
 800881a:	2205      	movs	r2, #5
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff fe24 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	e00c      	b.n	8008842 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2202      	movs	r2, #2
 800882c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008834:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008836:	7afb      	ldrb	r3, [r7, #11]
 8008838:	4619      	mov	r1, r3
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 f9e8 	bl	8008c10 <SCSI_ProcessRead>
 8008840:	4603      	mov	r3, r0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b086      	sub	sp, #24
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	460b      	mov	r3, r1
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800885e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	7a1b      	ldrb	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 80a5 	bne.w	80089b4 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800887a:	2320      	movs	r3, #32
 800887c:	2205      	movs	r2, #5
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7ff fdf3 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008884:	f04f 33ff 	mov.w	r3, #4294967295
 8008888:	e09a      	b.n	80089c0 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008890:	b25b      	sxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	da0a      	bge.n	80088ac <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800889c:	2320      	movs	r3, #32
 800889e:	2205      	movs	r2, #5
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fde2 	bl	800846a <SCSI_SenseCode>
      return -1;
 80088a6:	f04f 33ff 	mov.w	r3, #4294967295
 80088aa:	e089      	b.n	80089c0 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	7afa      	ldrb	r2, [r7, #11]
 80088b6:	4610      	mov	r0, r2
 80088b8:	4798      	blx	r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80088c0:	7af9      	ldrb	r1, [r7, #11]
 80088c2:	233a      	movs	r3, #58	; 0x3a
 80088c4:	2202      	movs	r2, #2
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff fdcf 	bl	800846a <SCSI_SenseCode>
      return -1;
 80088cc:	f04f 33ff 	mov.w	r3, #4294967295
 80088d0:	e076      	b.n	80089c0 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	7afa      	ldrb	r2, [r7, #11]
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80088e6:	7af9      	ldrb	r1, [r7, #11]
 80088e8:	2327      	movs	r3, #39	; 0x27
 80088ea:	2202      	movs	r2, #2
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f7ff fdbc 	bl	800846a <SCSI_SenseCode>
      return -1;
 80088f2:	f04f 33ff 	mov.w	r3, #4294967295
 80088f6:	e063      	b.n	80089c0 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3302      	adds	r3, #2
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3303      	adds	r3, #3
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008908:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008912:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	3205      	adds	r2, #5
 8008918:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800891a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3307      	adds	r3, #7
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	3208      	adds	r2, #8
 800892e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008930:	431a      	orrs	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008944:	7af9      	ldrb	r1, [r7, #11]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f940 	bl	8008bcc <SCSI_CheckAddressRange>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	da02      	bge.n	8008958 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	e033      	b.n	80089c0 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008964:	fb02 f303 	mul.w	r3, r2, r3
 8008968:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	429a      	cmp	r2, r3
 8008974:	d00a      	beq.n	800898c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800897c:	2320      	movs	r3, #32
 800897e:	2205      	movs	r2, #5
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff fd72 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008986:	f04f 33ff 	mov.w	r3, #4294967295
 800898a:	e019      	b.n	80089c0 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008992:	bf28      	it	cs
 8008994:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008998:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2201      	movs	r2, #1
 800899e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f103 0210 	add.w	r2, r3, #16
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2101      	movs	r1, #1
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f005 f885 	bl	800daba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	e005      	b.n	80089c0 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	4619      	mov	r1, r3
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 f99c 	bl	8008cf6 <SCSI_ProcessWrite>
 80089be:	4603      	mov	r3, r0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	460b      	mov	r3, r1
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089dc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	7a1b      	ldrb	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 80b5 	bne.w	8008b52 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10a      	bne.n	8008a08 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80089f8:	2320      	movs	r3, #32
 80089fa:	2205      	movs	r2, #5
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fd34 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008a02:	f04f 33ff 	mov.w	r3, #4294967295
 8008a06:	e0aa      	b.n	8008b5e <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008a0e:	b25b      	sxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da0a      	bge.n	8008a2a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008a1a:	2320      	movs	r3, #32
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff fd23 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008a24:	f04f 33ff 	mov.w	r3, #4294967295
 8008a28:	e099      	b.n	8008b5e <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	7afa      	ldrb	r2, [r7, #11]
 8008a34:	4610      	mov	r0, r2
 8008a36:	4798      	blx	r3
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008a3e:	7af9      	ldrb	r1, [r7, #11]
 8008a40:	233a      	movs	r3, #58	; 0x3a
 8008a42:	2202      	movs	r2, #2
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff fd10 	bl	800846a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2205      	movs	r2, #5
 8008a4e:	721a      	strb	r2, [r3, #8]
      return -1;
 8008a50:	f04f 33ff 	mov.w	r3, #4294967295
 8008a54:	e083      	b.n	8008b5e <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	7afa      	ldrb	r2, [r7, #11]
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008a6a:	7af9      	ldrb	r1, [r7, #11]
 8008a6c:	2327      	movs	r3, #39	; 0x27
 8008a6e:	2202      	movs	r2, #2
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff fcfa 	bl	800846a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2205      	movs	r2, #5
 8008a7a:	721a      	strb	r2, [r3, #8]
      return -1;
 8008a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a80:	e06d      	b.n	8008b5e <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3302      	adds	r3, #2
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3303      	adds	r3, #3
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3304      	adds	r3, #4
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008a9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	3205      	adds	r2, #5
 8008aa2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008aa4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3306      	adds	r3, #6
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3307      	adds	r3, #7
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008abc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008ac6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	3209      	adds	r2, #9
 8008acc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008ace:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ae2:	7af9      	ldrb	r1, [r7, #11]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f871 	bl	8008bcc <SCSI_CheckAddressRange>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	da02      	bge.n	8008af6 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008af0:	f04f 33ff 	mov.w	r3, #4294967295
 8008af4:	e033      	b.n	8008b5e <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d00a      	beq.n	8008b2a <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	2205      	movs	r2, #5
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff fca3 	bl	800846a <SCSI_SenseCode>
      return -1;
 8008b24:	f04f 33ff 	mov.w	r3, #4294967295
 8008b28:	e019      	b.n	8008b5e <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b30:	bf28      	it	cs
 8008b32:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008b36:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f103 0210 	add.w	r2, r3, #16
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	2101      	movs	r1, #1
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f004 ffb6 	bl	800daba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e005      	b.n	8008b5e <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8008b52:	7afb      	ldrb	r3, [r7, #11]
 8008b54:	4619      	mov	r1, r3
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f8cd 	bl	8008cf6 <SCSI_ProcessWrite>
 8008b5c:	4603      	mov	r3, r0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b7a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008b8a:	7af9      	ldrb	r1, [r7, #11]
 8008b8c:	2324      	movs	r3, #36	; 0x24
 8008b8e:	2205      	movs	r2, #5
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff fc6a 	bl	800846a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9a:	e013      	b.n	8008bc4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ba8:	7af9      	ldrb	r1, [r7, #11]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f80e 	bl	8008bcc <SCSI_CheckAddressRange>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da02      	bge.n	8008bbc <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 8008bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bba:	e003      	b.n	8008bc4 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	60da      	str	r2, [r3, #12]

  return 0;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	607a      	str	r2, [r7, #4]
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008be2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	441a      	add	r2, r3
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d908      	bls.n	8008c06 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008bf4:	7af9      	ldrb	r1, [r7, #11]
 8008bf6:	2321      	movs	r3, #33	; 0x21
 8008bf8:	2205      	movs	r2, #5
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fc35 	bl	800846a <SCSI_SenseCode>
    return -1;
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	e000      	b.n	8008c08 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008c10:	b590      	push	{r4, r7, lr}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c22:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008c30:	fb02 f303 	mul.w	r3, r2, r3
 8008c34:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c3c:	bf28      	it	cs
 8008c3e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008c42:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c4a:	691c      	ldr	r4, [r3, #16]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f103 0110 	add.w	r1, r3, #16
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008c5e:	4618      	mov	r0, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	78f8      	ldrb	r0, [r7, #3]
 8008c6a:	47a0      	blx	r4
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da08      	bge.n	8008c84 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	2311      	movs	r3, #17
 8008c76:	2204      	movs	r2, #4
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fbf6 	bl	800846a <SCSI_SenseCode>
    return -1;
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c82:	e034      	b.n	8008cee <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f103 0210 	add.w	r2, r3, #16
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2181      	movs	r1, #129	; 0x81
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f004 fef2 	bl	800da78 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ca8:	441a      	add	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cc4:	1ad2      	subs	r2, r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	1ad2      	subs	r2, r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d102      	bne.n	8008cec <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2203      	movs	r2, #3
 8008cea:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd90      	pop	{r4, r7, pc}

08008cf6 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008cf6:	b590      	push	{r4, r7, lr}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d08:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d22:	bf28      	it	cs
 8008d24:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008d28:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d30:	695c      	ldr	r4, [r3, #20]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f103 0110 	add.w	r1, r3, #16
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008d44:	4618      	mov	r0, r3
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	78f8      	ldrb	r0, [r7, #3]
 8008d50:	47a0      	blx	r4
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da08      	bge.n	8008d6a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008d58:	78f9      	ldrb	r1, [r7, #3]
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	2204      	movs	r2, #4
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff fb83 	bl	800846a <SCSI_SenseCode>
    return -1;
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295
 8008d68:	e044      	b.n	8008df4 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008d76:	4619      	mov	r1, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d7e:	441a      	add	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008d92:	4619      	mov	r1, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d9a:	1ad2      	subs	r2, r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	1ad2      	subs	r2, r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d104      	bne.n	8008dc6 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fe fe5c 	bl	8007a7c <MSC_BOT_SendCSW>
 8008dc4:	e015      	b.n	8008df2 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008dd2:	fb02 f303 	mul.w	r3, r2, r3
 8008dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dda:	bf28      	it	cs
 8008ddc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008de0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f103 0210 	add.w	r2, r3, #16
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2101      	movs	r1, #1
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f004 fe64 	bl	800daba <USBD_LL_PrepareReceive>
  }

  return 0;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd90      	pop	{r4, r7, pc}

08008dfc <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8008e0e:	8afa      	ldrh	r2, [r7, #22]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008e14:	e00b      	b.n	8008e2e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8008e16:	8afb      	ldrh	r3, [r7, #22]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008e1c:	8afb      	ldrh	r3, [r7, #22]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	441a      	add	r2, r3
 8008e22:	8afb      	ldrh	r3, [r7, #22]
 8008e24:	7811      	ldrb	r1, [r2, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008e2e:	8afb      	ldrh	r3, [r7, #22]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1f0      	bne.n	8008e16 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e025      	b.n	8008ea6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	79fa      	ldrb	r2, [r7, #7]
 8008e98:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f004 fc98 	bl	800d7d0 <USBD_LL_Init>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e010      	b.n	8008ee8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	f107 020e 	add.w	r2, r7, #14
 8008eda:	4610      	mov	r0, r2
 8008edc:	4798      	blx	r3
 8008ede:	4602      	mov	r2, r0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f004 fcb5 	bl	800d868 <USBD_LL_Start>
 8008efe:	4603      	mov	r3, r0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d009      	beq.n	8008f4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4611      	mov	r1, r2
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	4798      	blx	r3
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d007      	beq.n	8008f7c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	4611      	mov	r1, r2
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
  }

  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 ff3a 	bl	8009e12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fac:	461a      	mov	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fba:	f003 031f 	and.w	r3, r3, #31
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d01a      	beq.n	8008ff8 <USBD_LL_SetupStage+0x72>
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d822      	bhi.n	800900c <USBD_LL_SetupStage+0x86>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <USBD_LL_SetupStage+0x4a>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d00a      	beq.n	8008fe4 <USBD_LL_SetupStage+0x5e>
 8008fce:	e01d      	b.n	800900c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa17 	bl	800940c <USBD_StdDevReq>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe2:	e020      	b.n	8009026 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa7b 	bl	80094e8 <USBD_StdItfReq>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff6:	e016      	b.n	8009026 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fab9 	bl	8009578 <USBD_StdEPReq>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
      break;
 800900a:	e00c      	b.n	8009026 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009012:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009016:	b2db      	uxtb	r3, r3
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f004 fca3 	bl	800d966 <USBD_LL_StallEP>
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	bf00      	nop
  }

  return ret;
 8009026:	7bfb      	ldrb	r3, [r7, #15]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	460b      	mov	r3, r1
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800903e:	7afb      	ldrb	r3, [r7, #11]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d137      	bne.n	80090b4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800904a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009052:	2b03      	cmp	r3, #3
 8009054:	d14a      	bne.n	80090ec <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	429a      	cmp	r2, r3
 8009060:	d913      	bls.n	800908a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	1ad2      	subs	r2, r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	4293      	cmp	r3, r2
 800907a:	bf28      	it	cs
 800907c:	4613      	movcs	r3, r2
 800907e:	461a      	mov	r2, r3
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 ff9c 	bl	8009fc0 <USBD_CtlContinueRx>
 8009088:	e030      	b.n	80090ec <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800909c:	2b03      	cmp	r3, #3
 800909e:	d105      	bne.n	80090ac <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 ff98 	bl	8009fe2 <USBD_CtlSendStatus>
 80090b2:	e01b      	b.n	80090ec <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d013      	beq.n	80090e8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d10e      	bne.n	80090e8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	7afa      	ldrb	r2, [r7, #11]
 80090d4:	4611      	mov	r1, r2
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	4798      	blx	r3
 80090da:	4603      	mov	r3, r0
 80090dc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	e002      	b.n	80090ee <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e000      	b.n	80090ee <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	460b      	mov	r3, r1
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009104:	7afb      	ldrb	r3, [r7, #11]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d16a      	bne.n	80091e0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3314      	adds	r3, #20
 800910e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009116:	2b02      	cmp	r3, #2
 8009118:	d155      	bne.n	80091c6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	429a      	cmp	r2, r3
 8009124:	d914      	bls.n	8009150 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	461a      	mov	r2, r3
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 ff2e 	bl	8009f9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009142:	2300      	movs	r3, #0
 8009144:	2200      	movs	r2, #0
 8009146:	2100      	movs	r1, #0
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f004 fcb6 	bl	800daba <USBD_LL_PrepareReceive>
 800914e:	e03a      	b.n	80091c6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	429a      	cmp	r2, r3
 800915a:	d11c      	bne.n	8009196 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009164:	429a      	cmp	r2, r3
 8009166:	d316      	bcc.n	8009196 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009172:	429a      	cmp	r2, r3
 8009174:	d20f      	bcs.n	8009196 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009176:	2200      	movs	r2, #0
 8009178:	2100      	movs	r1, #0
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 ff0f 	bl	8009f9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009188:	2300      	movs	r3, #0
 800918a:	2200      	movs	r2, #0
 800918c:	2100      	movs	r1, #0
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f004 fc93 	bl	800daba <USBD_LL_PrepareReceive>
 8009194:	e017      	b.n	80091c6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d105      	bne.n	80091b8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091b8:	2180      	movs	r1, #128	; 0x80
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f004 fbd3 	bl	800d966 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 ff21 	bl	800a008 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d123      	bne.n	8009218 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff fe99 	bl	8008f08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091de:	e01b      	b.n	8009218 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d013      	beq.n	8009214 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d10e      	bne.n	8009214 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	7afa      	ldrb	r2, [r7, #11]
 8009200:	4611      	mov	r1, r2
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	e002      	b.n	800921a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009214:	2303      	movs	r3, #3
 8009216:	e000      	b.n	800921a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800924e:	2b00      	cmp	r3, #0
 8009250:	d009      	beq.n	8009266 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	6852      	ldr	r2, [r2, #4]
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	4611      	mov	r1, r2
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009266:	2340      	movs	r3, #64	; 0x40
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f004 fb16 	bl	800d89e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2240      	movs	r2, #64	; 0x40
 800927e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009282:	2340      	movs	r3, #64	; 0x40
 8009284:	2200      	movs	r2, #0
 8009286:	2180      	movs	r1, #128	; 0x80
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f004 fb08 	bl	800d89e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2240      	movs	r2, #64	; 0x40
 8009298:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2204      	movs	r2, #4
 80092dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d105      	bne.n	800930c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009328:	2b03      	cmp	r3, #3
 800932a:	d10b      	bne.n	8009344 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d009      	beq.n	80093c6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	6852      	ldr	r2, [r2, #4]
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	4611      	mov	r1, r2
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
  }

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	3301      	adds	r3, #1
 80093e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093ee:	8a3b      	ldrh	r3, [r7, #16]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	b21a      	sxth	r2, r3
 80093f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	b21b      	sxth	r3, r3
 80093fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093fe:	89fb      	ldrh	r3, [r7, #14]
}
 8009400:	4618      	mov	r0, r3
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009422:	2b40      	cmp	r3, #64	; 0x40
 8009424:	d005      	beq.n	8009432 <USBD_StdDevReq+0x26>
 8009426:	2b40      	cmp	r3, #64	; 0x40
 8009428:	d853      	bhi.n	80094d2 <USBD_StdDevReq+0xc6>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <USBD_StdDevReq+0x3a>
 800942e:	2b20      	cmp	r3, #32
 8009430:	d14f      	bne.n	80094d2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]
    break;
 8009444:	e04a      	b.n	80094dc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	785b      	ldrb	r3, [r3, #1]
 800944a:	2b09      	cmp	r3, #9
 800944c:	d83b      	bhi.n	80094c6 <USBD_StdDevReq+0xba>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <USBD_StdDevReq+0x48>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	080094a9 	.word	0x080094a9
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080094c7 	.word	0x080094c7
 8009460:	080094b3 	.word	0x080094b3
 8009464:	080094c7 	.word	0x080094c7
 8009468:	08009487 	.word	0x08009487
 800946c:	0800947d 	.word	0x0800947d
 8009470:	080094c7 	.word	0x080094c7
 8009474:	0800949f 	.word	0x0800949f
 8009478:	08009491 	.word	0x08009491
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9d8 	bl	8009834 <USBD_GetDescriptor>
      break;
 8009484:	e024      	b.n	80094d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fb3d 	bl	8009b08 <USBD_SetAddress>
      break;
 800948e:	e01f      	b.n	80094d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fb7c 	bl	8009b90 <USBD_SetConfig>
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]
      break;
 800949c:	e018      	b.n	80094d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fc19 	bl	8009cd8 <USBD_GetConfig>
      break;
 80094a6:	e013      	b.n	80094d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fc49 	bl	8009d42 <USBD_GetStatus>
      break;
 80094b0:	e00e      	b.n	80094d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fc77 	bl	8009da8 <USBD_SetFeature>
      break;
 80094ba:	e009      	b.n	80094d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fc86 	bl	8009dd0 <USBD_ClrFeature>
      break;
 80094c4:	e004      	b.n	80094d0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fcdc 	bl	8009e86 <USBD_CtlError>
      break;
 80094ce:	bf00      	nop
    }
    break;
 80094d0:	e004      	b.n	80094dc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fcd6 	bl	8009e86 <USBD_CtlError>
    break;
 80094da:	bf00      	nop
  }

  return ret;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop

080094e8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d005      	beq.n	800950e <USBD_StdItfReq+0x26>
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	d82e      	bhi.n	8009564 <USBD_StdItfReq+0x7c>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <USBD_StdItfReq+0x26>
 800950a:	2b20      	cmp	r3, #32
 800950c:	d12a      	bne.n	8009564 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009514:	3b01      	subs	r3, #1
 8009516:	2b02      	cmp	r3, #2
 8009518:	d81d      	bhi.n	8009556 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	889b      	ldrh	r3, [r3, #4]
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	d813      	bhi.n	800954c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
 8009532:	4603      	mov	r3, r0
 8009534:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	88db      	ldrh	r3, [r3, #6]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d110      	bne.n	8009560 <USBD_StdItfReq+0x78>
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10d      	bne.n	8009560 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fd4c 	bl	8009fe2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800954a:	e009      	b.n	8009560 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fc99 	bl	8009e86 <USBD_CtlError>
      break;
 8009554:	e004      	b.n	8009560 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fc94 	bl	8009e86 <USBD_CtlError>
      break;
 800955e:	e000      	b.n	8009562 <USBD_StdItfReq+0x7a>
      break;
 8009560:	bf00      	nop
    }
    break;
 8009562:	e004      	b.n	800956e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fc8d 	bl	8009e86 <USBD_CtlError>
    break;
 800956c:	bf00      	nop
  }

  return ret;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	889b      	ldrh	r3, [r3, #4]
 800958a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009594:	2b40      	cmp	r3, #64	; 0x40
 8009596:	d007      	beq.n	80095a8 <USBD_StdEPReq+0x30>
 8009598:	2b40      	cmp	r3, #64	; 0x40
 800959a:	f200 8140 	bhi.w	800981e <USBD_StdEPReq+0x2a6>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00c      	beq.n	80095bc <USBD_StdEPReq+0x44>
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	f040 813b 	bne.w	800981e <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	4798      	blx	r3
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
    break;
 80095ba:	e135      	b.n	8009828 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d007      	beq.n	80095d4 <USBD_StdEPReq+0x5c>
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	f300 8124 	bgt.w	8009812 <USBD_StdEPReq+0x29a>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d07b      	beq.n	80096c6 <USBD_StdEPReq+0x14e>
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d03b      	beq.n	800964a <USBD_StdEPReq+0xd2>
 80095d2:	e11e      	b.n	8009812 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d002      	beq.n	80095e4 <USBD_StdEPReq+0x6c>
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d016      	beq.n	8009610 <USBD_StdEPReq+0x98>
 80095e2:	e02c      	b.n	800963e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00d      	beq.n	8009606 <USBD_StdEPReq+0x8e>
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	2b80      	cmp	r3, #128	; 0x80
 80095ee:	d00a      	beq.n	8009606 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f004 f9b6 	bl	800d966 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095fa:	2180      	movs	r1, #128	; 0x80
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f004 f9b2 	bl	800d966 <USBD_LL_StallEP>
 8009602:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009604:	e020      	b.n	8009648 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fc3c 	bl	8009e86 <USBD_CtlError>
        break;
 800960e:	e01b      	b.n	8009648 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	885b      	ldrh	r3, [r3, #2]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10e      	bne.n	8009636 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00b      	beq.n	8009636 <USBD_StdEPReq+0xbe>
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b80      	cmp	r3, #128	; 0x80
 8009622:	d008      	beq.n	8009636 <USBD_StdEPReq+0xbe>
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	88db      	ldrh	r3, [r3, #6]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d104      	bne.n	8009636 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f004 f998 	bl	800d966 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fcd3 	bl	8009fe2 <USBD_CtlSendStatus>

        break;
 800963c:	e004      	b.n	8009648 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc20 	bl	8009e86 <USBD_CtlError>
        break;
 8009646:	bf00      	nop
      }
      break;
 8009648:	e0e8      	b.n	800981c <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009650:	2b02      	cmp	r3, #2
 8009652:	d002      	beq.n	800965a <USBD_StdEPReq+0xe2>
 8009654:	2b03      	cmp	r3, #3
 8009656:	d016      	beq.n	8009686 <USBD_StdEPReq+0x10e>
 8009658:	e02e      	b.n	80096b8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00d      	beq.n	800967c <USBD_StdEPReq+0x104>
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	2b80      	cmp	r3, #128	; 0x80
 8009664:	d00a      	beq.n	800967c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f004 f97b 	bl	800d966 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009670:	2180      	movs	r1, #128	; 0x80
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f004 f977 	bl	800d966 <USBD_LL_StallEP>
 8009678:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800967a:	e023      	b.n	80096c4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fc01 	bl	8009e86 <USBD_CtlError>
        break;
 8009684:	e01e      	b.n	80096c4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	885b      	ldrh	r3, [r3, #2]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d119      	bne.n	80096c2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009694:	2b00      	cmp	r3, #0
 8009696:	d004      	beq.n	80096a2 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f004 f981 	bl	800d9a4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fc9d 	bl	8009fe2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
        }
        break;
 80096b6:	e004      	b.n	80096c2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fbe3 	bl	8009e86 <USBD_CtlError>
        break;
 80096c0:	e000      	b.n	80096c4 <USBD_StdEPReq+0x14c>
        break;
 80096c2:	bf00      	nop
      }
      break;
 80096c4:	e0aa      	b.n	800981c <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d002      	beq.n	80096d6 <USBD_StdEPReq+0x15e>
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d032      	beq.n	800973a <USBD_StdEPReq+0x1c2>
 80096d4:	e097      	b.n	8009806 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d007      	beq.n	80096ec <USBD_StdEPReq+0x174>
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b80      	cmp	r3, #128	; 0x80
 80096e0:	d004      	beq.n	80096ec <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fbce 	bl	8009e86 <USBD_CtlError>
          break;
 80096ea:	e091      	b.n	8009810 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da0b      	bge.n	800970c <USBD_StdEPReq+0x194>
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	3310      	adds	r3, #16
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	4413      	add	r3, r2
 8009708:	3304      	adds	r3, #4
 800970a:	e00b      	b.n	8009724 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	4413      	add	r3, r2
 8009722:	3304      	adds	r3, #4
 8009724:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2202      	movs	r2, #2
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fc18 	bl	8009f68 <USBD_CtlSendData>
        break;
 8009738:	e06a      	b.n	8009810 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800973a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800973e:	2b00      	cmp	r3, #0
 8009740:	da11      	bge.n	8009766 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	f003 020f 	and.w	r2, r3, #15
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	440b      	add	r3, r1
 8009754:	3324      	adds	r3, #36	; 0x24
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d117      	bne.n	800978c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fb91 	bl	8009e86 <USBD_CtlError>
            break;
 8009764:	e054      	b.n	8009810 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	440b      	add	r3, r1
 8009778:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d104      	bne.n	800978c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fb7e 	bl	8009e86 <USBD_CtlError>
            break;
 800978a:	e041      	b.n	8009810 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800978c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009790:	2b00      	cmp	r3, #0
 8009792:	da0b      	bge.n	80097ac <USBD_StdEPReq+0x234>
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	3310      	adds	r3, #16
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	4413      	add	r3, r2
 80097a8:	3304      	adds	r3, #4
 80097aa:	e00b      	b.n	80097c4 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	4413      	add	r3, r2
 80097c2:	3304      	adds	r3, #4
 80097c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <USBD_StdEPReq+0x25a>
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2b80      	cmp	r3, #128	; 0x80
 80097d0:	d103      	bne.n	80097da <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2200      	movs	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	e00e      	b.n	80097f8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f004 f8ff 	bl	800d9e2 <USBD_LL_IsStallEP>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2201      	movs	r2, #1
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	e002      	b.n	80097f8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2202      	movs	r2, #2
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fbb2 	bl	8009f68 <USBD_CtlSendData>
          break;
 8009804:	e004      	b.n	8009810 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fb3c 	bl	8009e86 <USBD_CtlError>
        break;
 800980e:	bf00      	nop
      }
      break;
 8009810:	e004      	b.n	800981c <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fb36 	bl	8009e86 <USBD_CtlError>
      break;
 800981a:	bf00      	nop
    }
    break;
 800981c:	e004      	b.n	8009828 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fb30 	bl	8009e86 <USBD_CtlError>
    break;
 8009826:	bf00      	nop
  }

  return ret;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	885b      	ldrh	r3, [r3, #2]
 800984e:	0a1b      	lsrs	r3, r3, #8
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	2b06      	cmp	r3, #6
 8009856:	f200 8128 	bhi.w	8009aaa <USBD_GetDescriptor+0x276>
 800985a:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <USBD_GetDescriptor+0x2c>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009895 	.word	0x08009895
 8009868:	080098d5 	.word	0x080098d5
 800986c:	08009aab 	.word	0x08009aab
 8009870:	08009aab 	.word	0x08009aab
 8009874:	08009a4b 	.word	0x08009a4b
 8009878:	08009a77 	.word	0x08009a77
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	7c12      	ldrb	r2, [r2, #16]
 8009888:	f107 0108 	add.w	r1, r7, #8
 800988c:	4610      	mov	r0, r2
 800988e:	4798      	blx	r3
 8009890:	60f8      	str	r0, [r7, #12]
    break;
 8009892:	e112      	b.n	8009aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7c1b      	ldrb	r3, [r3, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10d      	bne.n	80098b8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a4:	f107 0208 	add.w	r2, r7, #8
 80098a8:	4610      	mov	r0, r2
 80098aa:	4798      	blx	r3
 80098ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	2202      	movs	r2, #2
 80098b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80098b6:	e100      	b.n	8009aba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	f107 0208 	add.w	r2, r7, #8
 80098c4:	4610      	mov	r0, r2
 80098c6:	4798      	blx	r3
 80098c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	2202      	movs	r2, #2
 80098d0:	701a      	strb	r2, [r3, #0]
    break;
 80098d2:	e0f2      	b.n	8009aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	885b      	ldrh	r3, [r3, #2]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b05      	cmp	r3, #5
 80098dc:	f200 80ac 	bhi.w	8009a38 <USBD_GetDescriptor+0x204>
 80098e0:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <USBD_GetDescriptor+0xb4>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	08009901 	.word	0x08009901
 80098ec:	08009935 	.word	0x08009935
 80098f0:	08009969 	.word	0x08009969
 80098f4:	0800999d 	.word	0x0800999d
 80098f8:	080099d1 	.word	0x080099d1
 80098fc:	08009a05 	.word	0x08009a05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00b      	beq.n	8009924 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7c12      	ldrb	r2, [r2, #16]
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
 8009920:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009922:	e091      	b.n	8009a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 faad 	bl	8009e86 <USBD_CtlError>
        err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
      break;
 8009932:	e089      	b.n	8009a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	7c12      	ldrb	r2, [r2, #16]
 800994c:	f107 0108 	add.w	r1, r7, #8
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009956:	e077      	b.n	8009a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa93 	bl	8009e86 <USBD_CtlError>
        err++;
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	3301      	adds	r3, #1
 8009964:	72fb      	strb	r3, [r7, #11]
      break;
 8009966:	e06f      	b.n	8009a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	7c12      	ldrb	r2, [r2, #16]
 8009980:	f107 0108 	add.w	r1, r7, #8
 8009984:	4610      	mov	r0, r2
 8009986:	4798      	blx	r3
 8009988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800998a:	e05d      	b.n	8009a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa79 	bl	8009e86 <USBD_CtlError>
        err++;
 8009994:	7afb      	ldrb	r3, [r7, #11]
 8009996:	3301      	adds	r3, #1
 8009998:	72fb      	strb	r3, [r7, #11]
      break;
 800999a:	e055      	b.n	8009a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00b      	beq.n	80099c0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7c12      	ldrb	r2, [r2, #16]
 80099b4:	f107 0108 	add.w	r1, r7, #8
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099be:	e043      	b.n	8009a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa5f 	bl	8009e86 <USBD_CtlError>
        err++;
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	3301      	adds	r3, #1
 80099cc:	72fb      	strb	r3, [r7, #11]
      break;
 80099ce:	e03b      	b.n	8009a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	7c12      	ldrb	r2, [r2, #16]
 80099e8:	f107 0108 	add.w	r1, r7, #8
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
 80099f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f2:	e029      	b.n	8009a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fa45 	bl	8009e86 <USBD_CtlError>
        err++;
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	3301      	adds	r3, #1
 8009a00:	72fb      	strb	r3, [r7, #11]
      break;
 8009a02:	e021      	b.n	8009a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	7c12      	ldrb	r2, [r2, #16]
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	4610      	mov	r0, r2
 8009a22:	4798      	blx	r3
 8009a24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a26:	e00f      	b.n	8009a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fa2b 	bl	8009e86 <USBD_CtlError>
        err++;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	3301      	adds	r3, #1
 8009a34:	72fb      	strb	r3, [r7, #11]
      break;
 8009a36:	e007      	b.n	8009a48 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa23 	bl	8009e86 <USBD_CtlError>
      err++;
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	3301      	adds	r3, #1
 8009a44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009a46:	bf00      	nop
    }
    break;
 8009a48:	e037      	b.n	8009aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	7c1b      	ldrb	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d109      	bne.n	8009a66 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5a:	f107 0208 	add.w	r2, r7, #8
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4798      	blx	r3
 8009a62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a64:	e029      	b.n	8009aba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa0c 	bl	8009e86 <USBD_CtlError>
      err++;
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	3301      	adds	r3, #1
 8009a72:	72fb      	strb	r3, [r7, #11]
    break;
 8009a74:	e021      	b.n	8009aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	7c1b      	ldrb	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10d      	bne.n	8009a9a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a86:	f107 0208 	add.w	r2, r7, #8
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	4798      	blx	r3
 8009a8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	2207      	movs	r2, #7
 8009a96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a98:	e00f      	b.n	8009aba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f9f2 	bl	8009e86 <USBD_CtlError>
      err++;
 8009aa2:	7afb      	ldrb	r3, [r7, #11]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	72fb      	strb	r3, [r7, #11]
    break;
 8009aa8:	e007      	b.n	8009aba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9ea 	bl	8009e86 <USBD_CtlError>
    err++;
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	72fb      	strb	r3, [r7, #11]
    break;
 8009ab8:	bf00      	nop
  }

  if (err != 0U)
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d11e      	bne.n	8009afe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	88db      	ldrh	r3, [r3, #6]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d016      	beq.n	8009af6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009ac8:	893b      	ldrh	r3, [r7, #8]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00e      	beq.n	8009aec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	88da      	ldrh	r2, [r3, #6]
 8009ad2:	893b      	ldrh	r3, [r7, #8]
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	bf28      	it	cs
 8009ad8:	4613      	movcs	r3, r2
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ade:	893b      	ldrh	r3, [r7, #8]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68f9      	ldr	r1, [r7, #12]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fa3f 	bl	8009f68 <USBD_CtlSendData>
 8009aea:	e009      	b.n	8009b00 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f9c9 	bl	8009e86 <USBD_CtlError>
 8009af4:	e004      	b.n	8009b00 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fa73 	bl	8009fe2 <USBD_CtlSendStatus>
 8009afc:	e000      	b.n	8009b00 <USBD_GetDescriptor+0x2cc>
    return;
 8009afe:	bf00      	nop
    }
  }
}
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop

08009b08 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d130      	bne.n	8009b7c <USBD_SetAddress+0x74>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	88db      	ldrh	r3, [r3, #6]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d12c      	bne.n	8009b7c <USBD_SetAddress+0x74>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	2b7f      	cmp	r3, #127	; 0x7f
 8009b28:	d828      	bhi.n	8009b7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d104      	bne.n	8009b4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f99f 	bl	8009e86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b48:	e01d      	b.n	8009b86 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7bfa      	ldrb	r2, [r7, #15]
 8009b4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f003 ff6f 	bl	800da3a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fa40 	bl	8009fe2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b70:	e009      	b.n	8009b86 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7a:	e004      	b.n	8009b86 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f981 	bl	8009e86 <USBD_CtlError>
  }
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	885b      	ldrh	r3, [r3, #2]
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	4b4b      	ldr	r3, [pc, #300]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009ba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ba8:	4b4a      	ldr	r3, [pc, #296]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d905      	bls.n	8009bbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f967 	bl	8009e86 <USBD_CtlError>
    return USBD_FAIL;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e087      	b.n	8009ccc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d002      	beq.n	8009bcc <USBD_SetConfig+0x3c>
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d025      	beq.n	8009c16 <USBD_SetConfig+0x86>
 8009bca:	e071      	b.n	8009cb0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009bcc:	4b41      	ldr	r3, [pc, #260]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01c      	beq.n	8009c0e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009bd4:	4b3f      	ldr	r3, [pc, #252]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bde:	4b3d      	ldr	r3, [pc, #244]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff f99a 	bl	8008f1e <USBD_SetClassConfig>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f945 	bl	8009e86 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009bfc:	e065      	b.n	8009cca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f9ef 	bl	8009fe2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2203      	movs	r2, #3
 8009c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009c0c:	e05d      	b.n	8009cca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f9e7 	bl	8009fe2 <USBD_CtlSendStatus>
    break;
 8009c14:	e059      	b.n	8009cca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009c16:	4b2f      	ldr	r3, [pc, #188]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d112      	bne.n	8009c44 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2202      	movs	r2, #2
 8009c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009c26:	4b2b      	ldr	r3, [pc, #172]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c30:	4b28      	ldr	r3, [pc, #160]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff f98d 	bl	8008f56 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f9d0 	bl	8009fe2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009c42:	e042      	b.n	8009cca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009c44:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d02a      	beq.n	8009ca8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff f97b 	bl	8008f56 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009c60:	4b1c      	ldr	r3, [pc, #112]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c6a:	4b1a      	ldr	r3, [pc, #104]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff f954 	bl	8008f1e <USBD_SetClassConfig>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00f      	beq.n	8009ca0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f8ff 	bl	8009e86 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff f960 	bl	8008f56 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009c9e:	e014      	b.n	8009cca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f99e 	bl	8009fe2 <USBD_CtlSendStatus>
    break;
 8009ca6:	e010      	b.n	8009cca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f99a 	bl	8009fe2 <USBD_CtlSendStatus>
    break;
 8009cae:	e00c      	b.n	8009cca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f8e7 	bl	8009e86 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cb8:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <USBD_SetConfig+0x144>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff f949 	bl	8008f56 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc8:	bf00      	nop
  }

  return ret;
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	2000020c 	.word	0x2000020c

08009cd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	88db      	ldrh	r3, [r3, #6]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d004      	beq.n	8009cf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f8ca 	bl	8009e86 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009cf2:	e022      	b.n	8009d3a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	dc02      	bgt.n	8009d04 <USBD_GetConfig+0x2c>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dc03      	bgt.n	8009d0a <USBD_GetConfig+0x32>
 8009d02:	e015      	b.n	8009d30 <USBD_GetConfig+0x58>
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d00b      	beq.n	8009d20 <USBD_GetConfig+0x48>
 8009d08:	e012      	b.n	8009d30 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3308      	adds	r3, #8
 8009d14:	2201      	movs	r2, #1
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f925 	bl	8009f68 <USBD_CtlSendData>
      break;
 8009d1e:	e00c      	b.n	8009d3a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3304      	adds	r3, #4
 8009d24:	2201      	movs	r2, #1
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f91d 	bl	8009f68 <USBD_CtlSendData>
      break;
 8009d2e:	e004      	b.n	8009d3a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f8a7 	bl	8009e86 <USBD_CtlError>
      break;
 8009d38:	bf00      	nop
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d52:	3b01      	subs	r3, #1
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d81e      	bhi.n	8009d96 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	88db      	ldrh	r3, [r3, #6]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d004      	beq.n	8009d6a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f88f 	bl	8009e86 <USBD_CtlError>
      break;
 8009d68:	e01a      	b.n	8009da0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d005      	beq.n	8009d86 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	f043 0202 	orr.w	r2, r3, #2
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	330c      	adds	r3, #12
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f8ea 	bl	8009f68 <USBD_CtlSendData>
    break;
 8009d94:	e004      	b.n	8009da0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f874 	bl	8009e86 <USBD_CtlError>
    break;
 8009d9e:	bf00      	nop
  }
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d106      	bne.n	8009dc8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f90d 	bl	8009fe2 <USBD_CtlSendStatus>
  }
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de0:	3b01      	subs	r3, #1
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d80b      	bhi.n	8009dfe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	885b      	ldrh	r3, [r3, #2]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d10c      	bne.n	8009e08 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f8f3 	bl	8009fe2 <USBD_CtlSendStatus>
      }
      break;
 8009dfc:	e004      	b.n	8009e08 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f840 	bl	8009e86 <USBD_CtlError>
      break;
 8009e06:	e000      	b.n	8009e0a <USBD_ClrFeature+0x3a>
      break;
 8009e08:	bf00      	nop
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	781a      	ldrb	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fac7 	bl	80093d0 <SWAPBYTE>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461a      	mov	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3301      	adds	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f7ff faba 	bl	80093d0 <SWAPBYTE>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	461a      	mov	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff faad 	bl	80093d0 <SWAPBYTE>
 8009e76:	4603      	mov	r3, r0
 8009e78:	461a      	mov	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	80da      	strh	r2, [r3, #6]
}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e90:	2180      	movs	r1, #128	; 0x80
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f003 fd67 	bl	800d966 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e98:	2100      	movs	r1, #0
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f003 fd63 	bl	800d966 <USBD_LL_StallEP>
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d036      	beq.n	8009f2c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ec2:	6938      	ldr	r0, [r7, #16]
 8009ec4:	f000 f836 	bl	8009f34 <USBD_GetLen>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	3301      	adds	r3, #1
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	4413      	add	r3, r2
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	2203      	movs	r2, #3
 8009ef0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ef8:	e013      	b.n	8009f22 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	4413      	add	r3, r2
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	7812      	ldrb	r2, [r2, #0]
 8009f04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	613b      	str	r3, [r7, #16]
    idx++;
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	4413      	add	r3, r2
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e7      	bne.n	8009efa <USBD_GetString+0x52>
 8009f2a:	e000      	b.n	8009f2e <USBD_GetString+0x86>
    return;
 8009f2c:	bf00      	nop
  }
}
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f44:	e005      	b.n	8009f52 <USBD_GetLen+0x1e>
  {
    len++;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1f5      	bne.n	8009f46 <USBD_GetLen+0x12>
  }

  return len;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f003 fd72 	bl	800da78 <USBD_LL_Transmit>

  return USBD_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f003 fd61 	bl	800da78 <USBD_LL_Transmit>

  return USBD_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f003 fd71 	bl	800daba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2204      	movs	r2, #4
 8009fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f003 fd3d 	bl	800da78 <USBD_LL_Transmit>

  return USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2205      	movs	r2, #5
 800a014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a018:	2300      	movs	r3, #0
 800a01a:	2200      	movs	r2, #0
 800a01c:	2100      	movs	r1, #0
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f003 fd4b 	bl	800daba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	4a08      	ldr	r2, [pc, #32]	; (800a060 <disk_status+0x30>)
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	79fa      	ldrb	r2, [r7, #7]
 800a048:	4905      	ldr	r1, [pc, #20]	; (800a060 <disk_status+0x30>)
 800a04a:	440a      	add	r2, r1
 800a04c:	7a12      	ldrb	r2, [r2, #8]
 800a04e:	4610      	mov	r0, r2
 800a050:	4798      	blx	r3
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a056:	7bfb      	ldrb	r3, [r7, #15]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20000438 	.word	0x20000438

0800a064 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	4a0d      	ldr	r2, [pc, #52]	; (800a0ac <disk_initialize+0x48>)
 800a076:	5cd3      	ldrb	r3, [r2, r3]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d111      	bne.n	800a0a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	4a0b      	ldr	r2, [pc, #44]	; (800a0ac <disk_initialize+0x48>)
 800a080:	2101      	movs	r1, #1
 800a082:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <disk_initialize+0x48>)
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	79fa      	ldrb	r2, [r7, #7]
 800a092:	4906      	ldr	r1, [pc, #24]	; (800a0ac <disk_initialize+0x48>)
 800a094:	440a      	add	r2, r1
 800a096:	7a12      	ldrb	r2, [r2, #8]
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20000438 	.word	0x20000438

0800a0b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a0b0:	b590      	push	{r4, r7, lr}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	607a      	str	r2, [r7, #4]
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	4a0a      	ldr	r2, [pc, #40]	; (800a0ec <disk_read+0x3c>)
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	689c      	ldr	r4, [r3, #8]
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	4a07      	ldr	r2, [pc, #28]	; (800a0ec <disk_read+0x3c>)
 800a0d0:	4413      	add	r3, r2
 800a0d2:	7a18      	ldrb	r0, [r3, #8]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	47a0      	blx	r4
 800a0dc:	4603      	mov	r3, r0
 800a0de:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd90      	pop	{r4, r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20000438 	.word	0x20000438

0800a0f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a0f0:	b590      	push	{r4, r7, lr}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	4a0a      	ldr	r2, [pc, #40]	; (800a12c <disk_write+0x3c>)
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	68dc      	ldr	r4, [r3, #12]
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	4a07      	ldr	r2, [pc, #28]	; (800a12c <disk_write+0x3c>)
 800a110:	4413      	add	r3, r2
 800a112:	7a18      	ldrb	r0, [r3, #8]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	47a0      	blx	r4
 800a11c:	4603      	mov	r3, r0
 800a11e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a120:	7dfb      	ldrb	r3, [r7, #23]
}
 800a122:	4618      	mov	r0, r3
 800a124:	371c      	adds	r7, #28
 800a126:	46bd      	mov	sp, r7
 800a128:	bd90      	pop	{r4, r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000438 	.word	0x20000438

0800a130 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	603a      	str	r2, [r7, #0]
 800a13a:	71fb      	strb	r3, [r7, #7]
 800a13c:	460b      	mov	r3, r1
 800a13e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	4a09      	ldr	r2, [pc, #36]	; (800a168 <disk_ioctl+0x38>)
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	79fa      	ldrb	r2, [r7, #7]
 800a14e:	4906      	ldr	r1, [pc, #24]	; (800a168 <disk_ioctl+0x38>)
 800a150:	440a      	add	r2, r1
 800a152:	7a10      	ldrb	r0, [r2, #8]
 800a154:	79b9      	ldrb	r1, [r7, #6]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	4798      	blx	r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000438 	.word	0x20000438

0800a16c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3301      	adds	r3, #1
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a17c:	89fb      	ldrh	r3, [r7, #14]
 800a17e:	021b      	lsls	r3, r3, #8
 800a180:	b21a      	sxth	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	b21b      	sxth	r3, r3
 800a188:	4313      	orrs	r3, r2
 800a18a:	b21b      	sxth	r3, r3
 800a18c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a18e:	89fb      	ldrh	r3, [r7, #14]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3303      	adds	r3, #3
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	3202      	adds	r2, #2
 800a1b4:	7812      	ldrb	r2, [r2, #0]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	3201      	adds	r2, #1
 800a1c2:	7812      	ldrb	r2, [r2, #0]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	887a      	ldrh	r2, [r7, #2]
 800a1f6:	b2d2      	uxtb	r2, r2
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	887b      	ldrh	r3, [r7, #2]
 800a1fc:	0a1b      	lsrs	r3, r3, #8
 800a1fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	607a      	str	r2, [r7, #4]
 800a206:	887a      	ldrh	r2, [r7, #2]
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	701a      	strb	r2, [r3, #0]
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	701a      	strb	r2, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	0a1b      	lsrs	r3, r3, #8
 800a232:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	b2d2      	uxtb	r2, r2
 800a23e:	701a      	strb	r2, [r3, #0]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	0a1b      	lsrs	r3, r3, #8
 800a244:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	701a      	strb	r2, [r3, #0]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	0a1b      	lsrs	r3, r3, #8
 800a256:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	607a      	str	r2, [r7, #4]
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	b2d2      	uxtb	r2, r2
 800a262:	701a      	strb	r2, [r3, #0]
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00d      	beq.n	800a2a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	1c53      	adds	r3, r2, #1
 800a28e:	613b      	str	r3, [r7, #16]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	1c59      	adds	r1, r3, #1
 800a294:	6179      	str	r1, [r7, #20]
 800a296:	7812      	ldrb	r2, [r2, #0]
 800a298:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	607b      	str	r3, [r7, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1f1      	bne.n	800a28a <mem_cpy+0x1a>
	}
}
 800a2a6:	bf00      	nop
 800a2a8:	371c      	adds	r7, #28
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a2b2:	b480      	push	{r7}
 800a2b4:	b087      	sub	sp, #28
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	60f8      	str	r0, [r7, #12]
 800a2ba:	60b9      	str	r1, [r7, #8]
 800a2bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	617a      	str	r2, [r7, #20]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	607b      	str	r3, [r7, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1f3      	bne.n	800a2c2 <mem_set+0x10>
}
 800a2da:	bf00      	nop
 800a2dc:	bf00      	nop
 800a2de:	371c      	adds	r7, #28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2e8:	b480      	push	{r7}
 800a2ea:	b089      	sub	sp, #36	; 0x24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	61fb      	str	r3, [r7, #28]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	61fa      	str	r2, [r7, #28]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	4619      	mov	r1, r3
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	61ba      	str	r2, [r7, #24]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	1acb      	subs	r3, r1, r3
 800a314:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3b01      	subs	r3, #1
 800a31a:	607b      	str	r3, [r7, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d002      	beq.n	800a328 <mem_cmp+0x40>
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0eb      	beq.n	800a300 <mem_cmp+0x18>

	return r;
 800a328:	697b      	ldr	r3, [r7, #20]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3724      	adds	r7, #36	; 0x24
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a340:	e002      	b.n	800a348 <chk_chr+0x12>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3301      	adds	r3, #1
 800a346:	607b      	str	r3, [r7, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d005      	beq.n	800a35c <chk_chr+0x26>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	4293      	cmp	r3, r2
 800a35a:	d1f2      	bne.n	800a342 <chk_chr+0xc>
	return *str;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	781b      	ldrb	r3, [r3, #0]
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a376:	2300      	movs	r3, #0
 800a378:	60bb      	str	r3, [r7, #8]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e029      	b.n	800a3d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a380:	4a27      	ldr	r2, [pc, #156]	; (800a420 <chk_lock+0xb4>)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	4413      	add	r3, r2
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d01d      	beq.n	800a3ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a38e:	4a24      	ldr	r2, [pc, #144]	; (800a420 <chk_lock+0xb4>)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	4413      	add	r3, r2
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d116      	bne.n	800a3ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a3a0:	4a1f      	ldr	r2, [pc, #124]	; (800a420 <chk_lock+0xb4>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	011b      	lsls	r3, r3, #4
 800a3a6:	4413      	add	r3, r2
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d10c      	bne.n	800a3ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3b4:	4a1a      	ldr	r2, [pc, #104]	; (800a420 <chk_lock+0xb4>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	011b      	lsls	r3, r3, #4
 800a3ba:	4413      	add	r3, r2
 800a3bc:	3308      	adds	r3, #8
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d102      	bne.n	800a3ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3c8:	e007      	b.n	800a3da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d9d2      	bls.n	800a380 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d109      	bne.n	800a3f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <chk_lock+0x80>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d101      	bne.n	800a3f0 <chk_lock+0x84>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e010      	b.n	800a412 <chk_lock+0xa6>
 800a3f0:	2312      	movs	r3, #18
 800a3f2:	e00e      	b.n	800a412 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d108      	bne.n	800a40c <chk_lock+0xa0>
 800a3fa:	4a09      	ldr	r2, [pc, #36]	; (800a420 <chk_lock+0xb4>)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	4413      	add	r3, r2
 800a402:	330c      	adds	r3, #12
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a40a:	d101      	bne.n	800a410 <chk_lock+0xa4>
 800a40c:	2310      	movs	r3, #16
 800a40e:	e000      	b.n	800a412 <chk_lock+0xa6>
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	20000218 	.word	0x20000218

0800a424 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a42a:	2300      	movs	r3, #0
 800a42c:	607b      	str	r3, [r7, #4]
 800a42e:	e002      	b.n	800a436 <enq_lock+0x12>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3301      	adds	r3, #1
 800a434:	607b      	str	r3, [r7, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d806      	bhi.n	800a44a <enq_lock+0x26>
 800a43c:	4a09      	ldr	r2, [pc, #36]	; (800a464 <enq_lock+0x40>)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	011b      	lsls	r3, r3, #4
 800a442:	4413      	add	r3, r2
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1f2      	bne.n	800a430 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	bf14      	ite	ne
 800a450:	2301      	movne	r3, #1
 800a452:	2300      	moveq	r3, #0
 800a454:	b2db      	uxtb	r3, r3
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20000218 	.word	0x20000218

0800a468 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e01f      	b.n	800a4b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a478:	4a41      	ldr	r2, [pc, #260]	; (800a580 <inc_lock+0x118>)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	011b      	lsls	r3, r3, #4
 800a47e:	4413      	add	r3, r2
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d113      	bne.n	800a4b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a48a:	4a3d      	ldr	r2, [pc, #244]	; (800a580 <inc_lock+0x118>)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	011b      	lsls	r3, r3, #4
 800a490:	4413      	add	r3, r2
 800a492:	3304      	adds	r3, #4
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d109      	bne.n	800a4b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a49e:	4a38      	ldr	r2, [pc, #224]	; (800a580 <inc_lock+0x118>)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	4413      	add	r3, r2
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d006      	beq.n	800a4c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d9dc      	bls.n	800a478 <inc_lock+0x10>
 800a4be:	e000      	b.n	800a4c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d132      	bne.n	800a52e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e002      	b.n	800a4d4 <inc_lock+0x6c>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d806      	bhi.n	800a4e8 <inc_lock+0x80>
 800a4da:	4a29      	ldr	r2, [pc, #164]	; (800a580 <inc_lock+0x118>)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	4413      	add	r3, r2
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f2      	bne.n	800a4ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d101      	bne.n	800a4f2 <inc_lock+0x8a>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e040      	b.n	800a574 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	4922      	ldr	r1, [pc, #136]	; (800a580 <inc_lock+0x118>)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	011b      	lsls	r3, r3, #4
 800a4fc:	440b      	add	r3, r1
 800a4fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	491e      	ldr	r1, [pc, #120]	; (800a580 <inc_lock+0x118>)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	440b      	add	r3, r1
 800a50c:	3304      	adds	r3, #4
 800a50e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	695a      	ldr	r2, [r3, #20]
 800a514:	491a      	ldr	r1, [pc, #104]	; (800a580 <inc_lock+0x118>)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	011b      	lsls	r3, r3, #4
 800a51a:	440b      	add	r3, r1
 800a51c:	3308      	adds	r3, #8
 800a51e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a520:	4a17      	ldr	r2, [pc, #92]	; (800a580 <inc_lock+0x118>)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	4413      	add	r3, r2
 800a528:	330c      	adds	r3, #12
 800a52a:	2200      	movs	r2, #0
 800a52c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d009      	beq.n	800a548 <inc_lock+0xe0>
 800a534:	4a12      	ldr	r2, [pc, #72]	; (800a580 <inc_lock+0x118>)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	011b      	lsls	r3, r3, #4
 800a53a:	4413      	add	r3, r2
 800a53c:	330c      	adds	r3, #12
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <inc_lock+0xe0>
 800a544:	2300      	movs	r3, #0
 800a546:	e015      	b.n	800a574 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d108      	bne.n	800a560 <inc_lock+0xf8>
 800a54e:	4a0c      	ldr	r2, [pc, #48]	; (800a580 <inc_lock+0x118>)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	4413      	add	r3, r2
 800a556:	330c      	adds	r3, #12
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	e001      	b.n	800a564 <inc_lock+0xfc>
 800a560:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a564:	4906      	ldr	r1, [pc, #24]	; (800a580 <inc_lock+0x118>)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	011b      	lsls	r3, r3, #4
 800a56a:	440b      	add	r3, r1
 800a56c:	330c      	adds	r3, #12
 800a56e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3301      	adds	r3, #1
}
 800a574:	4618      	mov	r0, r3
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr
 800a580:	20000218 	.word	0x20000218

0800a584 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3b01      	subs	r3, #1
 800a590:	607b      	str	r3, [r7, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d825      	bhi.n	800a5e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a598:	4a17      	ldr	r2, [pc, #92]	; (800a5f8 <dec_lock+0x74>)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	011b      	lsls	r3, r3, #4
 800a59e:	4413      	add	r3, r2
 800a5a0:	330c      	adds	r3, #12
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a5a6:	89fb      	ldrh	r3, [r7, #14]
 800a5a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ac:	d101      	bne.n	800a5b2 <dec_lock+0x2e>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a5b2:	89fb      	ldrh	r3, [r7, #14]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <dec_lock+0x3a>
 800a5b8:	89fb      	ldrh	r3, [r7, #14]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a5be:	4a0e      	ldr	r2, [pc, #56]	; (800a5f8 <dec_lock+0x74>)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	011b      	lsls	r3, r3, #4
 800a5c4:	4413      	add	r3, r2
 800a5c6:	330c      	adds	r3, #12
 800a5c8:	89fa      	ldrh	r2, [r7, #14]
 800a5ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a5cc:	89fb      	ldrh	r3, [r7, #14]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d105      	bne.n	800a5de <dec_lock+0x5a>
 800a5d2:	4a09      	ldr	r2, [pc, #36]	; (800a5f8 <dec_lock+0x74>)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	4413      	add	r3, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	737b      	strb	r3, [r7, #13]
 800a5e2:	e001      	b.n	800a5e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000218 	.word	0x20000218

0800a5fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	e010      	b.n	800a62c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a60a:	4a0d      	ldr	r2, [pc, #52]	; (800a640 <clear_lock+0x44>)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	4413      	add	r3, r2
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d105      	bne.n	800a626 <clear_lock+0x2a>
 800a61a:	4a09      	ldr	r2, [pc, #36]	; (800a640 <clear_lock+0x44>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	4413      	add	r3, r2
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d9eb      	bls.n	800a60a <clear_lock+0xe>
	}
}
 800a632:	bf00      	nop
 800a634:	bf00      	nop
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	20000218 	.word	0x20000218

0800a644 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	78db      	ldrb	r3, [r3, #3]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d034      	beq.n	800a6c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	7858      	ldrb	r0, [r3, #1]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a668:	2301      	movs	r3, #1
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	f7ff fd40 	bl	800a0f0 <disk_write>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a676:	2301      	movs	r3, #1
 800a678:	73fb      	strb	r3, [r7, #15]
 800a67a:	e022      	b.n	800a6c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	1ad2      	subs	r2, r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d217      	bcs.n	800a6c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	789b      	ldrb	r3, [r3, #2]
 800a696:	613b      	str	r3, [r7, #16]
 800a698:	e010      	b.n	800a6bc <sync_window+0x78>
					wsect += fs->fsize;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	7858      	ldrb	r0, [r3, #1]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	f7ff fd1d 	bl	800a0f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	613b      	str	r3, [r7, #16]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d8eb      	bhi.n	800a69a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d01b      	beq.n	800a71c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ffad 	bl	800a644 <sync_window>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d113      	bne.n	800a71c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	7858      	ldrb	r0, [r3, #1]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a6fe:	2301      	movs	r3, #1
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	f7ff fcd5 	bl	800a0b0 <disk_read>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d004      	beq.n	800a716 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a70c:	f04f 33ff 	mov.w	r3, #4294967295
 800a710:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a712:	2301      	movs	r3, #1
 800a714:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff ff87 	bl	800a644 <sync_window>
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d159      	bne.n	800a7f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b03      	cmp	r3, #3
 800a746:	d149      	bne.n	800a7dc <sync_fs+0xb4>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	791b      	ldrb	r3, [r3, #4]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d145      	bne.n	800a7dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	899b      	ldrh	r3, [r3, #12]
 800a75a:	461a      	mov	r2, r3
 800a75c:	2100      	movs	r1, #0
 800a75e:	f7ff fda8 	bl	800a2b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	3338      	adds	r3, #56	; 0x38
 800a766:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a76a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff fd37 	bl	800a1e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3338      	adds	r3, #56	; 0x38
 800a778:	4921      	ldr	r1, [pc, #132]	; (800a800 <sync_fs+0xd8>)
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff fd4c 	bl	800a218 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3338      	adds	r3, #56	; 0x38
 800a784:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a788:	491e      	ldr	r1, [pc, #120]	; (800a804 <sync_fs+0xdc>)
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fd44 	bl	800a218 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3338      	adds	r3, #56	; 0x38
 800a794:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7ff fd3a 	bl	800a218 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3338      	adds	r3, #56	; 0x38
 800a7a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f7ff fd30 	bl	800a218 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	7858      	ldrb	r0, [r3, #1]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	f7ff fc8d 	bl	800a0f0 <disk_write>
			fs->fsi_flag = 0;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff fca3 	bl	800a130 <disk_ioctl>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <sync_fs+0xcc>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	41615252 	.word	0x41615252
 800a804:	61417272 	.word	0x61417272

0800a808 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	3b02      	subs	r3, #2
 800a816:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	3b02      	subs	r3, #2
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d301      	bcc.n	800a828 <clust2sect+0x20>
 800a824:	2300      	movs	r3, #0
 800a826:	e008      	b.n	800a83a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	895b      	ldrh	r3, [r3, #10]
 800a82c:	461a      	mov	r2, r3
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	fb03 f202 	mul.w	r2, r3, r2
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a838:	4413      	add	r3, r2
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b086      	sub	sp, #24
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d904      	bls.n	800a866 <get_fat+0x20>
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d302      	bcc.n	800a86c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a866:	2301      	movs	r3, #1
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	e0bb      	b.n	800a9e4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a86c:	f04f 33ff 	mov.w	r3, #4294967295
 800a870:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b03      	cmp	r3, #3
 800a878:	f000 8083 	beq.w	800a982 <get_fat+0x13c>
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	f300 80a7 	bgt.w	800a9d0 <get_fat+0x18a>
 800a882:	2b01      	cmp	r3, #1
 800a884:	d002      	beq.n	800a88c <get_fat+0x46>
 800a886:	2b02      	cmp	r3, #2
 800a888:	d056      	beq.n	800a938 <get_fat+0xf2>
 800a88a:	e0a1      	b.n	800a9d0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	085b      	lsrs	r3, r3, #1
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	4413      	add	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	899b      	ldrh	r3, [r3, #12]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8aa:	4413      	add	r3, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6938      	ldr	r0, [r7, #16]
 800a8b0:	f7ff ff0c 	bl	800a6cc <move_window>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 808d 	bne.w	800a9d6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	60fa      	str	r2, [r7, #12]
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	8992      	ldrh	r2, [r2, #12]
 800a8c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ca:	fb02 f201 	mul.w	r2, r2, r1
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a8d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	899b      	ldrh	r3, [r3, #12]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8ea:	4413      	add	r3, r2
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6938      	ldr	r0, [r7, #16]
 800a8f0:	f7ff feec 	bl	800a6cc <move_window>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d16f      	bne.n	800a9da <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	899b      	ldrh	r3, [r3, #12]
 800a8fe:	461a      	mov	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	fbb3 f1f2 	udiv	r1, r3, r2
 800a906:	fb02 f201 	mul.w	r2, r2, r1
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4413      	add	r3, r2
 800a910:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a914:	021b      	lsls	r3, r3, #8
 800a916:	461a      	mov	r2, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	f003 0301 	and.w	r3, r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <get_fat+0xe8>
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	091b      	lsrs	r3, r3, #4
 800a92c:	e002      	b.n	800a934 <get_fat+0xee>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a934:	617b      	str	r3, [r7, #20]
			break;
 800a936:	e055      	b.n	800a9e4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	899b      	ldrh	r3, [r3, #12]
 800a940:	085b      	lsrs	r3, r3, #1
 800a942:	b29b      	uxth	r3, r3
 800a944:	4619      	mov	r1, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	fbb3 f3f1 	udiv	r3, r3, r1
 800a94c:	4413      	add	r3, r2
 800a94e:	4619      	mov	r1, r3
 800a950:	6938      	ldr	r0, [r7, #16]
 800a952:	f7ff febb 	bl	800a6cc <move_window>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d140      	bne.n	800a9de <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	8992      	ldrh	r2, [r2, #12]
 800a96a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a96e:	fb02 f200 	mul.w	r2, r2, r0
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	440b      	add	r3, r1
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff fbf8 	bl	800a16c <ld_word>
 800a97c:	4603      	mov	r3, r0
 800a97e:	617b      	str	r3, [r7, #20]
			break;
 800a980:	e030      	b.n	800a9e4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	899b      	ldrh	r3, [r3, #12]
 800a98a:	089b      	lsrs	r3, r3, #2
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	4619      	mov	r1, r3
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	fbb3 f3f1 	udiv	r3, r3, r1
 800a996:	4413      	add	r3, r2
 800a998:	4619      	mov	r1, r3
 800a99a:	6938      	ldr	r0, [r7, #16]
 800a99c:	f7ff fe96 	bl	800a6cc <move_window>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d11d      	bne.n	800a9e2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	8992      	ldrh	r2, [r2, #12]
 800a9b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9b8:	fb02 f200 	mul.w	r2, r2, r0
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	440b      	add	r3, r1
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff fbeb 	bl	800a19c <ld_dword>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a9cc:	617b      	str	r3, [r7, #20]
			break;
 800a9ce:	e009      	b.n	800a9e4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	e006      	b.n	800a9e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9d6:	bf00      	nop
 800a9d8:	e004      	b.n	800a9e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9da:	bf00      	nop
 800a9dc:	e002      	b.n	800a9e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a9de:	bf00      	nop
 800a9e0:	e000      	b.n	800a9e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a9e2:	bf00      	nop
		}
	}

	return val;
 800a9e4:	697b      	ldr	r3, [r7, #20]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a9ee:	b590      	push	{r4, r7, lr}
 800a9f0:	b089      	sub	sp, #36	; 0x24
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	60f8      	str	r0, [r7, #12]
 800a9f6:	60b9      	str	r1, [r7, #8]
 800a9f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	f240 8102 	bls.w	800ac0a <put_fat+0x21c>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	f080 80fc 	bcs.w	800ac0a <put_fat+0x21c>
		switch (fs->fs_type) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	f000 80b6 	beq.w	800ab88 <put_fat+0x19a>
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	f300 80fd 	bgt.w	800ac1c <put_fat+0x22e>
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d003      	beq.n	800aa2e <put_fat+0x40>
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	f000 8083 	beq.w	800ab32 <put_fat+0x144>
 800aa2c:	e0f6      	b.n	800ac1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	61bb      	str	r3, [r7, #24]
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	085b      	lsrs	r3, r3, #1
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	4413      	add	r3, r2
 800aa3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	899b      	ldrh	r3, [r3, #12]
 800aa44:	4619      	mov	r1, r3
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa4c:	4413      	add	r3, r2
 800aa4e:	4619      	mov	r1, r3
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff fe3b 	bl	800a6cc <move_window>
 800aa56:	4603      	mov	r3, r0
 800aa58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa5a:	7ffb      	ldrb	r3, [r7, #31]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f040 80d6 	bne.w	800ac0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	61ba      	str	r2, [r7, #24]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	8992      	ldrh	r2, [r2, #12]
 800aa72:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa76:	fb02 f200 	mul.w	r2, r2, r0
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00d      	beq.n	800aaa6 <put_fat+0xb8>
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b25b      	sxtb	r3, r3
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	b25a      	sxtb	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	b25b      	sxtb	r3, r3
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	e001      	b.n	800aaaa <put_fat+0xbc>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2201      	movs	r2, #1
 800aab2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	899b      	ldrh	r3, [r3, #12]
 800aabc:	4619      	mov	r1, r3
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aac4:	4413      	add	r3, r2
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fdff 	bl	800a6cc <move_window>
 800aace:	4603      	mov	r3, r0
 800aad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aad2:	7ffb      	ldrb	r3, [r7, #31]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 809c 	bne.w	800ac12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	899b      	ldrh	r3, [r3, #12]
 800aae4:	461a      	mov	r2, r3
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	fbb3 f0f2 	udiv	r0, r3, r2
 800aaec:	fb02 f200 	mul.w	r2, r2, r0
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	440b      	add	r3, r1
 800aaf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <put_fat+0x11a>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	091b      	lsrs	r3, r3, #4
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	e00e      	b.n	800ab26 <put_fat+0x138>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b25b      	sxtb	r3, r3
 800ab0e:	f023 030f 	bic.w	r3, r3, #15
 800ab12:	b25a      	sxtb	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	0a1b      	lsrs	r3, r3, #8
 800ab18:	b25b      	sxtb	r3, r3
 800ab1a:	f003 030f 	and.w	r3, r3, #15
 800ab1e:	b25b      	sxtb	r3, r3
 800ab20:	4313      	orrs	r3, r2
 800ab22:	b25b      	sxtb	r3, r3
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	70da      	strb	r2, [r3, #3]
			break;
 800ab30:	e074      	b.n	800ac1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	899b      	ldrh	r3, [r3, #12]
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4619      	mov	r1, r3
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab46:	4413      	add	r3, r2
 800ab48:	4619      	mov	r1, r3
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f7ff fdbe 	bl	800a6cc <move_window>
 800ab50:	4603      	mov	r3, r0
 800ab52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab54:	7ffb      	ldrb	r3, [r7, #31]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d15d      	bne.n	800ac16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	8992      	ldrh	r2, [r2, #12]
 800ab68:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab6c:	fb02 f200 	mul.w	r2, r2, r0
 800ab70:	1a9b      	subs	r3, r3, r2
 800ab72:	440b      	add	r3, r1
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	b292      	uxth	r2, r2
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7ff fb31 	bl	800a1e2 <st_word>
			fs->wflag = 1;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2201      	movs	r2, #1
 800ab84:	70da      	strb	r2, [r3, #3]
			break;
 800ab86:	e049      	b.n	800ac1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	899b      	ldrh	r3, [r3, #12]
 800ab90:	089b      	lsrs	r3, r3, #2
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	4619      	mov	r1, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	4619      	mov	r1, r3
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7ff fd93 	bl	800a6cc <move_window>
 800aba6:	4603      	mov	r3, r0
 800aba8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abaa:	7ffb      	ldrb	r3, [r7, #31]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d134      	bne.n	800ac1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	8992      	ldrh	r2, [r2, #12]
 800abc4:	fbb3 f0f2 	udiv	r0, r3, r2
 800abc8:	fb02 f200 	mul.w	r2, r2, r0
 800abcc:	1a9b      	subs	r3, r3, r2
 800abce:	440b      	add	r3, r1
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fae3 	bl	800a19c <ld_dword>
 800abd6:	4603      	mov	r3, r0
 800abd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800abdc:	4323      	orrs	r3, r4
 800abde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	8992      	ldrh	r2, [r2, #12]
 800abee:	fbb3 f0f2 	udiv	r0, r3, r2
 800abf2:	fb02 f200 	mul.w	r2, r2, r0
 800abf6:	1a9b      	subs	r3, r3, r2
 800abf8:	440b      	add	r3, r1
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff fb0b 	bl	800a218 <st_dword>
			fs->wflag = 1;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2201      	movs	r2, #1
 800ac06:	70da      	strb	r2, [r3, #3]
			break;
 800ac08:	e008      	b.n	800ac1c <put_fat+0x22e>
		}
	}
 800ac0a:	bf00      	nop
 800ac0c:	e006      	b.n	800ac1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ac0e:	bf00      	nop
 800ac10:	e004      	b.n	800ac1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ac12:	bf00      	nop
 800ac14:	e002      	b.n	800ac1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ac16:	bf00      	nop
 800ac18:	e000      	b.n	800ac1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800ac1a:	bf00      	nop
	return res;
 800ac1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3724      	adds	r7, #36	; 0x24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}

0800ac26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b088      	sub	sp, #32
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d904      	bls.n	800ac4c <remove_chain+0x26>
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d301      	bcc.n	800ac50 <remove_chain+0x2a>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e04b      	b.n	800ace8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00c      	beq.n	800ac70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ac56:	f04f 32ff 	mov.w	r2, #4294967295
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	69b8      	ldr	r0, [r7, #24]
 800ac5e:	f7ff fec6 	bl	800a9ee <put_fat>
 800ac62:	4603      	mov	r3, r0
 800ac64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ac66:	7ffb      	ldrb	r3, [r7, #31]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <remove_chain+0x4a>
 800ac6c:	7ffb      	ldrb	r3, [r7, #31]
 800ac6e:	e03b      	b.n	800ace8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff fde7 	bl	800a846 <get_fat>
 800ac78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d031      	beq.n	800ace4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <remove_chain+0x64>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e02e      	b.n	800ace8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac90:	d101      	bne.n	800ac96 <remove_chain+0x70>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e028      	b.n	800ace8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ac96:	2200      	movs	r2, #0
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	69b8      	ldr	r0, [r7, #24]
 800ac9c:	f7ff fea7 	bl	800a9ee <put_fat>
 800aca0:	4603      	mov	r3, r0
 800aca2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aca4:	7ffb      	ldrb	r3, [r7, #31]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <remove_chain+0x88>
 800acaa:	7ffb      	ldrb	r3, [r7, #31]
 800acac:	e01c      	b.n	800ace8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	699a      	ldr	r2, [r3, #24]
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	3b02      	subs	r3, #2
 800acb8:	429a      	cmp	r2, r3
 800acba:	d20b      	bcs.n	800acd4 <remove_chain+0xae>
			fs->free_clst++;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	791b      	ldrb	r3, [r3, #4]
 800acca:	f043 0301 	orr.w	r3, r3, #1
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	69db      	ldr	r3, [r3, #28]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d3c6      	bcc.n	800ac70 <remove_chain+0x4a>
 800ace2:	e000      	b.n	800ace6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ace4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3720      	adds	r7, #32
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10d      	bne.n	800ad22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d004      	beq.n	800ad1c <create_chain+0x2c>
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d31b      	bcc.n	800ad54 <create_chain+0x64>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	61bb      	str	r3, [r7, #24]
 800ad20:	e018      	b.n	800ad54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff fd8e 	bl	800a846 <get_fat>
 800ad2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d801      	bhi.n	800ad36 <create_chain+0x46>
 800ad32:	2301      	movs	r3, #1
 800ad34:	e070      	b.n	800ae18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3c:	d101      	bne.n	800ad42 <create_chain+0x52>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	e06a      	b.n	800ae18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d201      	bcs.n	800ad50 <create_chain+0x60>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	e063      	b.n	800ae18 <create_chain+0x128>
		scl = clst;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	69fa      	ldr	r2, [r7, #28]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d307      	bcc.n	800ad78 <create_chain+0x88>
				ncl = 2;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ad6c:	69fa      	ldr	r2, [r7, #28]
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d901      	bls.n	800ad78 <create_chain+0x88>
 800ad74:	2300      	movs	r3, #0
 800ad76:	e04f      	b.n	800ae18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ad78:	69f9      	ldr	r1, [r7, #28]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fd63 	bl	800a846 <get_fat>
 800ad80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00e      	beq.n	800ada6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d003      	beq.n	800ad96 <create_chain+0xa6>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad94:	d101      	bne.n	800ad9a <create_chain+0xaa>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	e03e      	b.n	800ae18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d1da      	bne.n	800ad58 <create_chain+0x68>
 800ada2:	2300      	movs	r3, #0
 800ada4:	e038      	b.n	800ae18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ada6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ada8:	f04f 32ff 	mov.w	r2, #4294967295
 800adac:	69f9      	ldr	r1, [r7, #28]
 800adae:	6938      	ldr	r0, [r7, #16]
 800adb0:	f7ff fe1d 	bl	800a9ee <put_fat>
 800adb4:	4603      	mov	r3, r0
 800adb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d109      	bne.n	800add2 <create_chain+0xe2>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d006      	beq.n	800add2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6938      	ldr	r0, [r7, #16]
 800adca:	f7ff fe10 	bl	800a9ee <put_fat>
 800adce:	4603      	mov	r3, r0
 800add0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d116      	bne.n	800ae06 <create_chain+0x116>
		fs->last_clst = ncl;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	69fa      	ldr	r2, [r7, #28]
 800addc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	699a      	ldr	r2, [r3, #24]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	3b02      	subs	r3, #2
 800ade8:	429a      	cmp	r2, r3
 800adea:	d804      	bhi.n	800adf6 <create_chain+0x106>
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	1e5a      	subs	r2, r3, #1
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	791b      	ldrb	r3, [r3, #4]
 800adfa:	f043 0301 	orr.w	r3, r3, #1
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	711a      	strb	r2, [r3, #4]
 800ae04:	e007      	b.n	800ae16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d102      	bne.n	800ae12 <create_chain+0x122>
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	e000      	b.n	800ae14 <create_chain+0x124>
 800ae12:	2301      	movs	r3, #1
 800ae14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ae16:	69fb      	ldr	r3, [r7, #28]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3720      	adds	r7, #32
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	3304      	adds	r3, #4
 800ae36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	899b      	ldrh	r3, [r3, #12]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	8952      	ldrh	r2, [r2, #10]
 800ae48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	1d1a      	adds	r2, r3, #4
 800ae52:	613a      	str	r2, [r7, #16]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <clmt_clust+0x42>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e010      	b.n	800ae84 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d307      	bcc.n	800ae7a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	3304      	adds	r3, #4
 800ae76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ae78:	e7e9      	b.n	800ae4e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ae7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	4413      	add	r3, r2
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	371c      	adds	r7, #28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aea6:	d204      	bcs.n	800aeb2 <dir_sdi+0x22>
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	f003 031f 	and.w	r3, r3, #31
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	e071      	b.n	800af9a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d106      	bne.n	800aed6 <dir_sdi+0x46>
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d902      	bls.n	800aed6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10c      	bne.n	800aef6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	095b      	lsrs	r3, r3, #5
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	8912      	ldrh	r2, [r2, #8]
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d301      	bcc.n	800aeec <dir_sdi+0x5c>
 800aee8:	2302      	movs	r3, #2
 800aeea:	e056      	b.n	800af9a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	61da      	str	r2, [r3, #28]
 800aef4:	e02d      	b.n	800af52 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	895b      	ldrh	r3, [r3, #10]
 800aefa:	461a      	mov	r2, r3
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	899b      	ldrh	r3, [r3, #12]
 800af00:	fb03 f302 	mul.w	r3, r3, r2
 800af04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af06:	e019      	b.n	800af3c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6979      	ldr	r1, [r7, #20]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff fc9a 	bl	800a846 <get_fat>
 800af12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1a:	d101      	bne.n	800af20 <dir_sdi+0x90>
 800af1c:	2301      	movs	r3, #1
 800af1e:	e03c      	b.n	800af9a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d904      	bls.n	800af30 <dir_sdi+0xa0>
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	69db      	ldr	r3, [r3, #28]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d301      	bcc.n	800af34 <dir_sdi+0xa4>
 800af30:	2302      	movs	r3, #2
 800af32:	e032      	b.n	800af9a <dir_sdi+0x10a>
			ofs -= csz;
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	429a      	cmp	r2, r3
 800af42:	d2e1      	bcs.n	800af08 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800af44:	6979      	ldr	r1, [r7, #20]
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	f7ff fc5e 	bl	800a808 <clust2sect>
 800af4c:	4602      	mov	r2, r0
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <dir_sdi+0xd4>
 800af60:	2302      	movs	r3, #2
 800af62:	e01a      	b.n	800af9a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	69da      	ldr	r2, [r3, #28]
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	899b      	ldrh	r3, [r3, #12]
 800af6c:	4619      	mov	r1, r3
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	fbb3 f3f1 	udiv	r3, r3, r1
 800af74:	441a      	add	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	899b      	ldrh	r3, [r3, #12]
 800af84:	461a      	mov	r2, r3
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	fbb3 f0f2 	udiv	r0, r3, r2
 800af8c:	fb02 f200 	mul.w	r2, r2, r0
 800af90:	1a9b      	subs	r3, r3, r2
 800af92:	18ca      	adds	r2, r1, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b086      	sub	sp, #24
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	3320      	adds	r3, #32
 800afb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <dir_next+0x28>
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afc8:	d301      	bcc.n	800afce <dir_next+0x2c>
 800afca:	2304      	movs	r3, #4
 800afcc:	e0bb      	b.n	800b146 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	899b      	ldrh	r3, [r3, #12]
 800afd2:	461a      	mov	r2, r3
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800afda:	fb02 f201 	mul.w	r2, r2, r1
 800afde:	1a9b      	subs	r3, r3, r2
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f040 809d 	bne.w	800b120 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10b      	bne.n	800b010 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	095b      	lsrs	r3, r3, #5
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	8912      	ldrh	r2, [r2, #8]
 800b000:	4293      	cmp	r3, r2
 800b002:	f0c0 808d 	bcc.w	800b120 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	61da      	str	r2, [r3, #28]
 800b00c:	2304      	movs	r3, #4
 800b00e:	e09a      	b.n	800b146 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	899b      	ldrh	r3, [r3, #12]
 800b014:	461a      	mov	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	fbb3 f3f2 	udiv	r3, r3, r2
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	8952      	ldrh	r2, [r2, #10]
 800b020:	3a01      	subs	r2, #1
 800b022:	4013      	ands	r3, r2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d17b      	bne.n	800b120 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7ff fc08 	bl	800a846 <get_fat>
 800b036:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d801      	bhi.n	800b042 <dir_next+0xa0>
 800b03e:	2302      	movs	r3, #2
 800b040:	e081      	b.n	800b146 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b048:	d101      	bne.n	800b04e <dir_next+0xac>
 800b04a:	2301      	movs	r3, #1
 800b04c:	e07b      	b.n	800b146 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	429a      	cmp	r2, r3
 800b056:	d359      	bcc.n	800b10c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d104      	bne.n	800b068 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	61da      	str	r2, [r3, #28]
 800b064:	2304      	movs	r3, #4
 800b066:	e06e      	b.n	800b146 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7ff fe3d 	bl	800acf0 <create_chain>
 800b076:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <dir_next+0xe0>
 800b07e:	2307      	movs	r3, #7
 800b080:	e061      	b.n	800b146 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d101      	bne.n	800b08c <dir_next+0xea>
 800b088:	2302      	movs	r3, #2
 800b08a:	e05c      	b.n	800b146 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d101      	bne.n	800b098 <dir_next+0xf6>
 800b094:	2301      	movs	r3, #1
 800b096:	e056      	b.n	800b146 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff fad3 	bl	800a644 <sync_window>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <dir_next+0x106>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e04e      	b.n	800b146 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	899b      	ldrh	r3, [r3, #12]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f7ff f8fc 	bl	800a2b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	613b      	str	r3, [r7, #16]
 800b0be:	6979      	ldr	r1, [r7, #20]
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff fba1 	bl	800a808 <clust2sect>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	635a      	str	r2, [r3, #52]	; 0x34
 800b0cc:	e012      	b.n	800b0f4 <dir_next+0x152>
						fs->wflag = 1;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fab5 	bl	800a644 <sync_window>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <dir_next+0x142>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e030      	b.n	800b146 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	613b      	str	r3, [r7, #16]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	635a      	str	r2, [r3, #52]	; 0x34
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	895b      	ldrh	r3, [r3, #10]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d3e6      	bcc.n	800b0ce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	1ad2      	subs	r2, r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b112:	6979      	ldr	r1, [r7, #20]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7ff fb77 	bl	800a808 <clust2sect>
 800b11a:	4602      	mov	r2, r0
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	899b      	ldrh	r3, [r3, #12]
 800b130:	461a      	mov	r2, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	fbb3 f0f2 	udiv	r0, r3, r2
 800b138:	fb02 f200 	mul.w	r2, r2, r0
 800b13c:	1a9b      	subs	r3, r3, r2
 800b13e:	18ca      	adds	r2, r1, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b086      	sub	sp, #24
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b15e:	2100      	movs	r1, #0
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff fe95 	bl	800ae90 <dir_sdi>
 800b166:	4603      	mov	r3, r0
 800b168:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d12b      	bne.n	800b1c8 <dir_alloc+0x7a>
		n = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	4619      	mov	r1, r3
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7ff faa6 	bl	800a6cc <move_window>
 800b180:	4603      	mov	r3, r0
 800b182:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b184:	7dfb      	ldrb	r3, [r7, #23]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d11d      	bne.n	800b1c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2be5      	cmp	r3, #229	; 0xe5
 800b192:	d004      	beq.n	800b19e <dir_alloc+0x50>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d107      	bne.n	800b1ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	613b      	str	r3, [r7, #16]
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d102      	bne.n	800b1b2 <dir_alloc+0x64>
 800b1ac:	e00c      	b.n	800b1c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff fef4 	bl	800afa2 <dir_next>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0d7      	beq.n	800b174 <dir_alloc+0x26>
 800b1c4:	e000      	b.n	800b1c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b1c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	d101      	bne.n	800b1d2 <dir_alloc+0x84>
 800b1ce:	2307      	movs	r3, #7
 800b1d0:	75fb      	strb	r3, [r7, #23]
	return res;
 800b1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	331a      	adds	r3, #26
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe ffbe 	bl	800a16c <ld_word>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d109      	bne.n	800b210 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	3314      	adds	r3, #20
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe ffb3 	bl	800a16c <ld_word>
 800b206:	4603      	mov	r3, r0
 800b208:	041b      	lsls	r3, r3, #16
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b210:	68fb      	ldr	r3, [r7, #12]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	331a      	adds	r3, #26
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	b292      	uxth	r2, r2
 800b22e:	4611      	mov	r1, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f7fe ffd6 	bl	800a1e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d109      	bne.n	800b252 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f103 0214 	add.w	r2, r3, #20
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	0c1b      	lsrs	r3, r3, #16
 800b248:	b29b      	uxth	r3, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	4610      	mov	r0, r2
 800b24e:	f7fe ffc8 	bl	800a1e2 <st_word>
	}
}
 800b252:	bf00      	nop
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b25c:	b590      	push	{r4, r7, lr}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	331a      	adds	r3, #26
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe ff7e 	bl	800a16c <ld_word>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <cmp_lfn+0x1e>
 800b276:	2300      	movs	r3, #0
 800b278:	e059      	b.n	800b32e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b282:	1e5a      	subs	r2, r3, #1
 800b284:	4613      	mov	r3, r2
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	4413      	add	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b290:	2301      	movs	r3, #1
 800b292:	81fb      	strh	r3, [r7, #14]
 800b294:	2300      	movs	r3, #0
 800b296:	613b      	str	r3, [r7, #16]
 800b298:	e033      	b.n	800b302 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b29a:	4a27      	ldr	r2, [pc, #156]	; (800b338 <cmp_lfn+0xdc>)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	4413      	add	r3, r2
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe ff5f 	bl	800a16c <ld_word>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b2b2:	89fb      	ldrh	r3, [r7, #14]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01a      	beq.n	800b2ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2bfe      	cmp	r3, #254	; 0xfe
 800b2bc:	d812      	bhi.n	800b2e4 <cmp_lfn+0x88>
 800b2be:	89bb      	ldrh	r3, [r7, #12]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f001 fed9 	bl	800d078 <ff_wtoupper>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	461c      	mov	r4, r3
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	617a      	str	r2, [r7, #20]
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f001 fecd 	bl	800d078 <ff_wtoupper>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	429c      	cmp	r4, r3
 800b2e2:	d001      	beq.n	800b2e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	e022      	b.n	800b32e <cmp_lfn+0xd2>
			}
			wc = uc;
 800b2e8:	89bb      	ldrh	r3, [r7, #12]
 800b2ea:	81fb      	strh	r3, [r7, #14]
 800b2ec:	e006      	b.n	800b2fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b2ee:	89bb      	ldrh	r3, [r7, #12]
 800b2f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d001      	beq.n	800b2fc <cmp_lfn+0xa0>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	e018      	b.n	800b32e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	3301      	adds	r3, #1
 800b300:	613b      	str	r3, [r7, #16]
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b0c      	cmp	r3, #12
 800b306:	d9c8      	bls.n	800b29a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00b      	beq.n	800b32c <cmp_lfn+0xd0>
 800b314:	89fb      	ldrh	r3, [r7, #14]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d008      	beq.n	800b32c <cmp_lfn+0xd0>
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	4413      	add	r3, r2
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <cmp_lfn+0xd0>
 800b328:	2300      	movs	r3, #0
 800b32a:	e000      	b.n	800b32e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b32c:	2301      	movs	r3, #1
}
 800b32e:	4618      	mov	r0, r3
 800b330:	371c      	adds	r7, #28
 800b332:	46bd      	mov	sp, r7
 800b334:	bd90      	pop	{r4, r7, pc}
 800b336:	bf00      	nop
 800b338:	0800ed6c 	.word	0x0800ed6c

0800b33c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	4611      	mov	r1, r2
 800b348:	461a      	mov	r2, r3
 800b34a:	460b      	mov	r3, r1
 800b34c:	71fb      	strb	r3, [r7, #7]
 800b34e:	4613      	mov	r3, r2
 800b350:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	330d      	adds	r3, #13
 800b356:	79ba      	ldrb	r2, [r7, #6]
 800b358:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	330b      	adds	r3, #11
 800b35e:	220f      	movs	r2, #15
 800b360:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	330c      	adds	r3, #12
 800b366:	2200      	movs	r2, #0
 800b368:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	331a      	adds	r3, #26
 800b36e:	2100      	movs	r1, #0
 800b370:	4618      	mov	r0, r3
 800b372:	f7fe ff36 	bl	800a1e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	1e5a      	subs	r2, r3, #1
 800b37a:	4613      	mov	r3, r2
 800b37c:	005b      	lsls	r3, r3, #1
 800b37e:	4413      	add	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	82fb      	strh	r3, [r7, #22]
 800b38a:	2300      	movs	r3, #0
 800b38c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b38e:	8afb      	ldrh	r3, [r7, #22]
 800b390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b394:	4293      	cmp	r3, r2
 800b396:	d007      	beq.n	800b3a8 <put_lfn+0x6c>
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	61fa      	str	r2, [r7, #28]
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b3a8:	4a17      	ldr	r2, [pc, #92]	; (800b408 <put_lfn+0xcc>)
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	8afa      	ldrh	r2, [r7, #22]
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe ff11 	bl	800a1e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b3c0:	8afb      	ldrh	r3, [r7, #22]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d102      	bne.n	800b3cc <put_lfn+0x90>
 800b3c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	2b0c      	cmp	r3, #12
 800b3d6:	d9da      	bls.n	800b38e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b3d8:	8afb      	ldrh	r3, [r7, #22]
 800b3da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d006      	beq.n	800b3f0 <put_lfn+0xb4>
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d103      	bne.n	800b3f8 <put_lfn+0xbc>
 800b3f0:	79fb      	ldrb	r3, [r7, #7]
 800b3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	79fa      	ldrb	r2, [r7, #7]
 800b3fc:	701a      	strb	r2, [r3, #0]
}
 800b3fe:	bf00      	nop
 800b400:	3720      	adds	r7, #32
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	0800ed6c 	.word	0x0800ed6c

0800b40c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08c      	sub	sp, #48	; 0x30
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b41a:	220b      	movs	r2, #11
 800b41c:	68b9      	ldr	r1, [r7, #8]
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7fe ff26 	bl	800a270 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b05      	cmp	r3, #5
 800b428:	d92b      	bls.n	800b482 <gen_numname+0x76>
		sr = seq;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b42e:	e022      	b.n	800b476 <gen_numname+0x6a>
			wc = *lfn++;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	1c9a      	adds	r2, r3, #2
 800b434:	607a      	str	r2, [r7, #4]
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b43a:	2300      	movs	r3, #0
 800b43c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b43e:	e017      	b.n	800b470 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	005a      	lsls	r2, r3, #1
 800b444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	4413      	add	r3, r2
 800b44c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b44e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b450:	085b      	lsrs	r3, r3, #1
 800b452:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d005      	beq.n	800b46a <gen_numname+0x5e>
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b464:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b468:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46c:	3301      	adds	r3, #1
 800b46e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b472:	2b0f      	cmp	r3, #15
 800b474:	d9e4      	bls.n	800b440 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1d8      	bne.n	800b430 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b482:	2307      	movs	r3, #7
 800b484:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	f003 030f 	and.w	r3, r3, #15
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	3330      	adds	r3, #48	; 0x30
 800b492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b49a:	2b39      	cmp	r3, #57	; 0x39
 800b49c:	d904      	bls.n	800b4a8 <gen_numname+0x9c>
 800b49e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4a2:	3307      	adds	r3, #7
 800b4a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4aa:	1e5a      	subs	r2, r3, #1
 800b4ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800b4ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b4b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	091b      	lsrs	r3, r3, #4
 800b4c0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1de      	bne.n	800b486 <gen_numname+0x7a>
	ns[i] = '~';
 800b4c8:	f107 0214 	add.w	r2, r7, #20
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	4413      	add	r3, r2
 800b4d0:	227e      	movs	r2, #126	; 0x7e
 800b4d2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d8:	e002      	b.n	800b4e0 <gen_numname+0xd4>
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	3301      	adds	r3, #1
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d205      	bcs.n	800b4f4 <gen_numname+0xe8>
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	4413      	add	r3, r2
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b20      	cmp	r3, #32
 800b4f2:	d1f2      	bne.n	800b4da <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	2b07      	cmp	r3, #7
 800b4f8:	d808      	bhi.n	800b50c <gen_numname+0x100>
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	62ba      	str	r2, [r7, #40]	; 0x28
 800b500:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b504:	4413      	add	r3, r2
 800b506:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b50a:	e000      	b.n	800b50e <gen_numname+0x102>
 800b50c:	2120      	movs	r1, #32
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	627a      	str	r2, [r7, #36]	; 0x24
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	460a      	mov	r2, r1
 800b51a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51e:	2b07      	cmp	r3, #7
 800b520:	d9e8      	bls.n	800b4f4 <gen_numname+0xe8>
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	3730      	adds	r7, #48	; 0x30
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b538:	230b      	movs	r3, #11
 800b53a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	0852      	lsrs	r2, r2, #1
 800b542:	01db      	lsls	r3, r3, #7
 800b544:	4313      	orrs	r3, r2
 800b546:	b2da      	uxtb	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	1c59      	adds	r1, r3, #1
 800b54c:	6079      	str	r1, [r7, #4]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	4413      	add	r3, r2
 800b552:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	3b01      	subs	r3, #1
 800b558:	60bb      	str	r3, [r7, #8]
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1ed      	bne.n	800b53c <sum_sfn+0x10>
	return sum;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b086      	sub	sp, #24
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b57c:	2100      	movs	r1, #0
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff fc86 	bl	800ae90 <dir_sdi>
 800b584:	4603      	mov	r3, r0
 800b586:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <dir_find+0x24>
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	e0a9      	b.n	800b6e6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b592:	23ff      	movs	r3, #255	; 0xff
 800b594:	753b      	strb	r3, [r7, #20]
 800b596:	7d3b      	ldrb	r3, [r7, #20]
 800b598:	757b      	strb	r3, [r7, #21]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6938      	ldr	r0, [r7, #16]
 800b5aa:	f7ff f88f 	bl	800a6cc <move_window>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f040 8090 	bne.w	800b6da <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b5c2:	7dbb      	ldrb	r3, [r7, #22]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d102      	bne.n	800b5ce <dir_find+0x60>
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	75fb      	strb	r3, [r7, #23]
 800b5cc:	e08a      	b.n	800b6e4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	330b      	adds	r3, #11
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5da:	73fb      	strb	r3, [r7, #15]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	7bfa      	ldrb	r2, [r7, #15]
 800b5e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b5e2:	7dbb      	ldrb	r3, [r7, #22]
 800b5e4:	2be5      	cmp	r3, #229	; 0xe5
 800b5e6:	d007      	beq.n	800b5f8 <dir_find+0x8a>
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d009      	beq.n	800b606 <dir_find+0x98>
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b0f      	cmp	r3, #15
 800b5f6:	d006      	beq.n	800b606 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5f8:	23ff      	movs	r3, #255	; 0xff
 800b5fa:	757b      	strb	r3, [r7, #21]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b602:	631a      	str	r2, [r3, #48]	; 0x30
 800b604:	e05e      	b.n	800b6c4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b606:	7bfb      	ldrb	r3, [r7, #15]
 800b608:	2b0f      	cmp	r3, #15
 800b60a:	d136      	bne.n	800b67a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b616:	2b00      	cmp	r3, #0
 800b618:	d154      	bne.n	800b6c4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b61a:	7dbb      	ldrb	r3, [r7, #22]
 800b61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00d      	beq.n	800b640 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	7b5b      	ldrb	r3, [r3, #13]
 800b62a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b62c:	7dbb      	ldrb	r3, [r7, #22]
 800b62e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b632:	75bb      	strb	r3, [r7, #22]
 800b634:	7dbb      	ldrb	r3, [r7, #22]
 800b636:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	695a      	ldr	r2, [r3, #20]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b640:	7dba      	ldrb	r2, [r7, #22]
 800b642:	7d7b      	ldrb	r3, [r7, #21]
 800b644:	429a      	cmp	r2, r3
 800b646:	d115      	bne.n	800b674 <dir_find+0x106>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	330d      	adds	r3, #13
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	7d3a      	ldrb	r2, [r7, #20]
 800b652:	429a      	cmp	r2, r3
 800b654:	d10e      	bne.n	800b674 <dir_find+0x106>
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	691a      	ldr	r2, [r3, #16]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	4619      	mov	r1, r3
 800b660:	4610      	mov	r0, r2
 800b662:	f7ff fdfb 	bl	800b25c <cmp_lfn>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <dir_find+0x106>
 800b66c:	7d7b      	ldrb	r3, [r7, #21]
 800b66e:	3b01      	subs	r3, #1
 800b670:	b2db      	uxtb	r3, r3
 800b672:	e000      	b.n	800b676 <dir_find+0x108>
 800b674:	23ff      	movs	r3, #255	; 0xff
 800b676:	757b      	strb	r3, [r7, #21]
 800b678:	e024      	b.n	800b6c4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b67a:	7d7b      	ldrb	r3, [r7, #21]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d109      	bne.n	800b694 <dir_find+0x126>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff ff51 	bl	800b52c <sum_sfn>
 800b68a:	4603      	mov	r3, r0
 800b68c:	461a      	mov	r2, r3
 800b68e:	7d3b      	ldrb	r3, [r7, #20]
 800b690:	4293      	cmp	r3, r2
 800b692:	d024      	beq.n	800b6de <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10a      	bne.n	800b6b8 <dir_find+0x14a>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a18      	ldr	r0, [r3, #32]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	3324      	adds	r3, #36	; 0x24
 800b6aa:	220b      	movs	r2, #11
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f7fe fe1b 	bl	800a2e8 <mem_cmp>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d014      	beq.n	800b6e2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b6b8:	23ff      	movs	r3, #255	; 0xff
 800b6ba:	757b      	strb	r3, [r7, #21]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff fc6b 	bl	800afa2 <dir_next>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f43f af65 	beq.w	800b5a2 <dir_find+0x34>
 800b6d8:	e004      	b.n	800b6e4 <dir_find+0x176>
		if (res != FR_OK) break;
 800b6da:	bf00      	nop
 800b6dc:	e002      	b.n	800b6e4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b6de:	bf00      	nop
 800b6e0:	e000      	b.n	800b6e4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b6e2:	bf00      	nop

	return res;
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08c      	sub	sp, #48	; 0x30
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b704:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <dir_register+0x20>
 800b70c:	2306      	movs	r3, #6
 800b70e:	e0e0      	b.n	800b8d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b710:	2300      	movs	r3, #0
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
 800b714:	e002      	b.n	800b71c <dir_register+0x2c>
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	3301      	adds	r3, #1
 800b71a:	627b      	str	r3, [r7, #36]	; 0x24
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	691a      	ldr	r2, [r3, #16]
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	4413      	add	r3, r2
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1f4      	bne.n	800b716 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b732:	f107 030c 	add.w	r3, r7, #12
 800b736:	220c      	movs	r2, #12
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fd99 	bl	800a270 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b73e:	7dfb      	ldrb	r3, [r7, #23]
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d032      	beq.n	800b7ae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2240      	movs	r2, #64	; 0x40
 800b74c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b750:	2301      	movs	r3, #1
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28
 800b754:	e016      	b.n	800b784 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	691a      	ldr	r2, [r3, #16]
 800b760:	f107 010c 	add.w	r1, r7, #12
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	f7ff fe51 	bl	800b40c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff feff 	bl	800b56e <dir_find>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	3301      	adds	r3, #1
 800b782:	62bb      	str	r3, [r7, #40]	; 0x28
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	2b63      	cmp	r3, #99	; 0x63
 800b788:	d9e5      	bls.n	800b756 <dir_register+0x66>
 800b78a:	e000      	b.n	800b78e <dir_register+0x9e>
			if (res != FR_OK) break;
 800b78c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	2b64      	cmp	r3, #100	; 0x64
 800b792:	d101      	bne.n	800b798 <dir_register+0xa8>
 800b794:	2307      	movs	r3, #7
 800b796:	e09c      	b.n	800b8d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d002      	beq.n	800b7a6 <dir_register+0xb6>
 800b7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7a4:	e095      	b.n	800b8d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b7a6:	7dfa      	ldrb	r2, [r7, #23]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d007      	beq.n	800b7c8 <dir_register+0xd8>
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	330c      	adds	r3, #12
 800b7bc:	4a47      	ldr	r2, [pc, #284]	; (800b8dc <dir_register+0x1ec>)
 800b7be:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c2:	089b      	lsrs	r3, r3, #2
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	e000      	b.n	800b7ca <dir_register+0xda>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b7cc:	6a39      	ldr	r1, [r7, #32]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fcbd 	bl	800b14e <dir_alloc>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b7da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d148      	bne.n	800b874 <dir_register+0x184>
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	623b      	str	r3, [r7, #32]
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d042      	beq.n	800b874 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	695a      	ldr	r2, [r3, #20]
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	015b      	lsls	r3, r3, #5
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fb48 	bl	800ae90 <dir_sdi>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d132      	bne.n	800b874 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3324      	adds	r3, #36	; 0x24
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fe8a 	bl	800b52c <sum_sfn>
 800b818:	4603      	mov	r3, r0
 800b81a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	69db      	ldr	r3, [r3, #28]
 800b820:	4619      	mov	r1, r3
 800b822:	69f8      	ldr	r0, [r7, #28]
 800b824:	f7fe ff52 	bl	800a6cc <move_window>
 800b828:	4603      	mov	r3, r0
 800b82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b832:	2b00      	cmp	r3, #0
 800b834:	d11d      	bne.n	800b872 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	6918      	ldr	r0, [r3, #16]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a19      	ldr	r1, [r3, #32]
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	b2da      	uxtb	r2, r3
 800b842:	7efb      	ldrb	r3, [r7, #27]
 800b844:	f7ff fd7a 	bl	800b33c <put_lfn>
				fs->wflag = 1;
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	2201      	movs	r2, #1
 800b84c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b84e:	2100      	movs	r1, #0
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7ff fba6 	bl	800afa2 <dir_next>
 800b856:	4603      	mov	r3, r0
 800b858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b85c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b860:	2b00      	cmp	r3, #0
 800b862:	d107      	bne.n	800b874 <dir_register+0x184>
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	3b01      	subs	r3, #1
 800b868:	623b      	str	r3, [r7, #32]
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1d5      	bne.n	800b81c <dir_register+0x12c>
 800b870:	e000      	b.n	800b874 <dir_register+0x184>
				if (res != FR_OK) break;
 800b872:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d128      	bne.n	800b8ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	69db      	ldr	r3, [r3, #28]
 800b880:	4619      	mov	r1, r3
 800b882:	69f8      	ldr	r0, [r7, #28]
 800b884:	f7fe ff22 	bl	800a6cc <move_window>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b88e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b892:	2b00      	cmp	r3, #0
 800b894:	d11b      	bne.n	800b8ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	2220      	movs	r2, #32
 800b89c:	2100      	movs	r1, #0
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fe fd07 	bl	800a2b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a18      	ldr	r0, [r3, #32]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3324      	adds	r3, #36	; 0x24
 800b8ac:	220b      	movs	r2, #11
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	f7fe fcde 	bl	800a270 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	330c      	adds	r3, #12
 800b8c0:	f002 0218 	and.w	r2, r2, #24
 800b8c4:	b2d2      	uxtb	r2, r2
 800b8c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3730      	adds	r7, #48	; 0x30
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	4ec4ec4f 	.word	0x4ec4ec4f

0800b8e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08a      	sub	sp, #40	; 0x28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	613b      	str	r3, [r7, #16]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	617b      	str	r3, [r7, #20]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	61ba      	str	r2, [r7, #24]
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	4413      	add	r3, r2
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b90e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b910:	2b1f      	cmp	r3, #31
 800b912:	d940      	bls.n	800b996 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b916:	2b2f      	cmp	r3, #47	; 0x2f
 800b918:	d006      	beq.n	800b928 <create_name+0x48>
 800b91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b91c:	2b5c      	cmp	r3, #92	; 0x5c
 800b91e:	d110      	bne.n	800b942 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b920:	e002      	b.n	800b928 <create_name+0x48>
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	3301      	adds	r3, #1
 800b926:	61bb      	str	r3, [r7, #24]
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	4413      	add	r3, r2
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b2f      	cmp	r3, #47	; 0x2f
 800b932:	d0f6      	beq.n	800b922 <create_name+0x42>
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	4413      	add	r3, r2
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b5c      	cmp	r3, #92	; 0x5c
 800b93e:	d0f0      	beq.n	800b922 <create_name+0x42>
			break;
 800b940:	e02a      	b.n	800b998 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2bfe      	cmp	r3, #254	; 0xfe
 800b946:	d901      	bls.n	800b94c <create_name+0x6c>
 800b948:	2306      	movs	r3, #6
 800b94a:	e177      	b.n	800bc3c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b94c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b954:	2101      	movs	r1, #1
 800b956:	4618      	mov	r0, r3
 800b958:	f001 fb52 	bl	800d000 <ff_convert>
 800b95c:	4603      	mov	r3, r0
 800b95e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <create_name+0x8a>
 800b966:	2306      	movs	r3, #6
 800b968:	e168      	b.n	800bc3c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b96a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b96c:	2b7f      	cmp	r3, #127	; 0x7f
 800b96e:	d809      	bhi.n	800b984 <create_name+0xa4>
 800b970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b972:	4619      	mov	r1, r3
 800b974:	48b3      	ldr	r0, [pc, #716]	; (800bc44 <create_name+0x364>)
 800b976:	f7fe fcde 	bl	800a336 <chk_chr>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <create_name+0xa4>
 800b980:	2306      	movs	r3, #6
 800b982:	e15b      	b.n	800bc3c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	617a      	str	r2, [r7, #20]
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4413      	add	r3, r2
 800b990:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b992:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b994:	e7b4      	b.n	800b900 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b996:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	441a      	add	r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a4:	2b1f      	cmp	r3, #31
 800b9a6:	d801      	bhi.n	800b9ac <create_name+0xcc>
 800b9a8:	2304      	movs	r3, #4
 800b9aa:	e000      	b.n	800b9ae <create_name+0xce>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b9b2:	e011      	b.n	800b9d8 <create_name+0xf8>
		w = lfn[di - 1];
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b9c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9c8:	2b20      	cmp	r3, #32
 800b9ca:	d002      	beq.n	800b9d2 <create_name+0xf2>
 800b9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d0:	d106      	bne.n	800b9e0 <create_name+0x100>
		di--;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1ea      	bne.n	800b9b4 <create_name+0xd4>
 800b9de:	e000      	b.n	800b9e2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b9e0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <create_name+0x118>
 800b9f4:	2306      	movs	r3, #6
 800b9f6:	e121      	b.n	800bc3c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3324      	adds	r3, #36	; 0x24
 800b9fc:	220b      	movs	r2, #11
 800b9fe:	2120      	movs	r1, #32
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe fc56 	bl	800a2b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ba06:	2300      	movs	r3, #0
 800ba08:	61bb      	str	r3, [r7, #24]
 800ba0a:	e002      	b.n	800ba12 <create_name+0x132>
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	61bb      	str	r3, [r7, #24]
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	2b20      	cmp	r3, #32
 800ba1e:	d0f5      	beq.n	800ba0c <create_name+0x12c>
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	005b      	lsls	r3, r3, #1
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	4413      	add	r3, r2
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba2c:	d0ee      	beq.n	800ba0c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d009      	beq.n	800ba48 <create_name+0x168>
 800ba34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba38:	f043 0303 	orr.w	r3, r3, #3
 800ba3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ba40:	e002      	b.n	800ba48 <create_name+0x168>
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d009      	beq.n	800ba62 <create_name+0x182>
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba54:	3b01      	subs	r3, #1
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba60:	d1ef      	bne.n	800ba42 <create_name+0x162>

	i = b = 0; ni = 8;
 800ba62:	2300      	movs	r3, #0
 800ba64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba68:	2300      	movs	r3, #0
 800ba6a:	623b      	str	r3, [r7, #32]
 800ba6c:	2308      	movs	r3, #8
 800ba6e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	61ba      	str	r2, [r7, #24]
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ba80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 8090 	beq.w	800bba8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ba88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	d006      	beq.n	800ba9c <create_name+0x1bc>
 800ba8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba90:	2b2e      	cmp	r3, #46	; 0x2e
 800ba92:	d10a      	bne.n	800baaa <create_name+0x1ca>
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d006      	beq.n	800baaa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ba9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa0:	f043 0303 	orr.w	r3, r3, #3
 800baa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800baa8:	e07d      	b.n	800bba6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800baaa:	6a3a      	ldr	r2, [r7, #32]
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d203      	bcs.n	800baba <create_name+0x1da>
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d123      	bne.n	800bb02 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	2b0b      	cmp	r3, #11
 800babe:	d106      	bne.n	800bace <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac4:	f043 0303 	orr.w	r3, r3, #3
 800bac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bacc:	e06f      	b.n	800bbae <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bace:	69ba      	ldr	r2, [r7, #24]
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d005      	beq.n	800bae2 <create_name+0x202>
 800bad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bada:	f043 0303 	orr.w	r3, r3, #3
 800bade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d860      	bhi.n	800bbac <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	61bb      	str	r3, [r7, #24]
 800baee:	2308      	movs	r3, #8
 800baf0:	623b      	str	r3, [r7, #32]
 800baf2:	230b      	movs	r3, #11
 800baf4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800baf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb00:	e051      	b.n	800bba6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bb02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb04:	2b7f      	cmp	r3, #127	; 0x7f
 800bb06:	d914      	bls.n	800bb32 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f001 fa77 	bl	800d000 <ff_convert>
 800bb12:	4603      	mov	r3, r0
 800bb14:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bb16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <create_name+0x246>
 800bb1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb1e:	3b80      	subs	r3, #128	; 0x80
 800bb20:	4a49      	ldr	r2, [pc, #292]	; (800bc48 <create_name+0x368>)
 800bb22:	5cd3      	ldrb	r3, [r2, r3]
 800bb24:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bb26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb2a:	f043 0302 	orr.w	r3, r3, #2
 800bb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bb32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d007      	beq.n	800bb48 <create_name+0x268>
 800bb38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4843      	ldr	r0, [pc, #268]	; (800bc4c <create_name+0x36c>)
 800bb3e:	f7fe fbfa 	bl	800a336 <chk_chr>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d008      	beq.n	800bb5a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bb48:	235f      	movs	r3, #95	; 0x5f
 800bb4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb50:	f043 0303 	orr.w	r3, r3, #3
 800bb54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb58:	e01b      	b.n	800bb92 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bb5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb5c:	2b40      	cmp	r3, #64	; 0x40
 800bb5e:	d909      	bls.n	800bb74 <create_name+0x294>
 800bb60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb62:	2b5a      	cmp	r3, #90	; 0x5a
 800bb64:	d806      	bhi.n	800bb74 <create_name+0x294>
					b |= 2;
 800bb66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb6a:	f043 0302 	orr.w	r3, r3, #2
 800bb6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb72:	e00e      	b.n	800bb92 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bb74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb76:	2b60      	cmp	r3, #96	; 0x60
 800bb78:	d90b      	bls.n	800bb92 <create_name+0x2b2>
 800bb7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb7c:	2b7a      	cmp	r3, #122	; 0x7a
 800bb7e:	d808      	bhi.n	800bb92 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bb80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb84:	f043 0301 	orr.w	r3, r3, #1
 800bb88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb8e:	3b20      	subs	r3, #32
 800bb90:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bb92:	6a3b      	ldr	r3, [r7, #32]
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	623a      	str	r2, [r7, #32]
 800bb98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb9a:	b2d1      	uxtb	r1, r2
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4413      	add	r3, r2
 800bba0:	460a      	mov	r2, r1
 800bba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bba6:	e763      	b.n	800ba70 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bba8:	bf00      	nop
 800bbaa:	e000      	b.n	800bbae <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800bbac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbb4:	2be5      	cmp	r3, #229	; 0xe5
 800bbb6:	d103      	bne.n	800bbc0 <create_name+0x2e0>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2205      	movs	r2, #5
 800bbbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	2b08      	cmp	r3, #8
 800bbc4:	d104      	bne.n	800bbd0 <create_name+0x2f0>
 800bbc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bbd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbd4:	f003 030c 	and.w	r3, r3, #12
 800bbd8:	2b0c      	cmp	r3, #12
 800bbda:	d005      	beq.n	800bbe8 <create_name+0x308>
 800bbdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d105      	bne.n	800bbf4 <create_name+0x314>
 800bbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbec:	f043 0302 	orr.w	r3, r3, #2
 800bbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d117      	bne.n	800bc30 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bc00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc04:	f003 0303 	and.w	r3, r3, #3
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d105      	bne.n	800bc18 <create_name+0x338>
 800bc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc10:	f043 0310 	orr.w	r3, r3, #16
 800bc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bc18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc1c:	f003 030c 	and.w	r3, r3, #12
 800bc20:	2b04      	cmp	r3, #4
 800bc22:	d105      	bne.n	800bc30 <create_name+0x350>
 800bc24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc28:	f043 0308 	orr.w	r3, r3, #8
 800bc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bc3a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3728      	adds	r7, #40	; 0x28
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	0800ec34 	.word	0x0800ec34
 800bc48:	0800ecec 	.word	0x0800ecec
 800bc4c:	0800ec40 	.word	0x0800ec40

0800bc50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc64:	e002      	b.n	800bc6c <follow_path+0x1c>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	603b      	str	r3, [r7, #0]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b2f      	cmp	r3, #47	; 0x2f
 800bc72:	d0f8      	beq.n	800bc66 <follow_path+0x16>
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b5c      	cmp	r3, #92	; 0x5c
 800bc7a:	d0f4      	beq.n	800bc66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b1f      	cmp	r3, #31
 800bc88:	d80a      	bhi.n	800bca0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2280      	movs	r2, #128	; 0x80
 800bc8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bc92:	2100      	movs	r1, #0
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff f8fb 	bl	800ae90 <dir_sdi>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	75fb      	strb	r3, [r7, #23]
 800bc9e:	e048      	b.n	800bd32 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bca0:	463b      	mov	r3, r7
 800bca2:	4619      	mov	r1, r3
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff fe1b 	bl	800b8e0 <create_name>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d139      	bne.n	800bd28 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff fc5a 	bl	800b56e <dir_find>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bcc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bcc6:	7dfb      	ldrb	r3, [r7, #23]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00a      	beq.n	800bce2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d12c      	bne.n	800bd2c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bcd2:	7afb      	ldrb	r3, [r7, #11]
 800bcd4:	f003 0304 	and.w	r3, r3, #4
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d127      	bne.n	800bd2c <follow_path+0xdc>
 800bcdc:	2305      	movs	r3, #5
 800bcde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bce0:	e024      	b.n	800bd2c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bce2:	7afb      	ldrb	r3, [r7, #11]
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d121      	bne.n	800bd30 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	799b      	ldrb	r3, [r3, #6]
 800bcf0:	f003 0310 	and.w	r3, r3, #16
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d102      	bne.n	800bcfe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bcf8:	2305      	movs	r3, #5
 800bcfa:	75fb      	strb	r3, [r7, #23]
 800bcfc:	e019      	b.n	800bd32 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	8992      	ldrh	r2, [r2, #12]
 800bd0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd10:	fb02 f200 	mul.w	r2, r2, r0
 800bd14:	1a9b      	subs	r3, r3, r2
 800bd16:	440b      	add	r3, r1
 800bd18:	4619      	mov	r1, r3
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff fa5e 	bl	800b1dc <ld_clust>
 800bd20:	4602      	mov	r2, r0
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd26:	e7bb      	b.n	800bca0 <follow_path+0x50>
			if (res != FR_OK) break;
 800bd28:	bf00      	nop
 800bd2a:	e002      	b.n	800bd32 <follow_path+0xe2>
				break;
 800bd2c:	bf00      	nop
 800bd2e:	e000      	b.n	800bd32 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd30:	bf00      	nop
			}
		}
	}

	return res;
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d031      	beq.n	800bdb6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	617b      	str	r3, [r7, #20]
 800bd58:	e002      	b.n	800bd60 <get_ldnumber+0x24>
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b1f      	cmp	r3, #31
 800bd66:	d903      	bls.n	800bd70 <get_ldnumber+0x34>
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b3a      	cmp	r3, #58	; 0x3a
 800bd6e:	d1f4      	bne.n	800bd5a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b3a      	cmp	r3, #58	; 0x3a
 800bd76:	d11c      	bne.n	800bdb2 <get_ldnumber+0x76>
			tp = *path;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	60fa      	str	r2, [r7, #12]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	3b30      	subs	r3, #48	; 0x30
 800bd88:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b09      	cmp	r3, #9
 800bd8e:	d80e      	bhi.n	800bdae <get_ldnumber+0x72>
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d10a      	bne.n	800bdae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d107      	bne.n	800bdae <get_ldnumber+0x72>
					vol = (int)i;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	3301      	adds	r3, #1
 800bda6:	617b      	str	r3, [r7, #20]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	e002      	b.n	800bdb8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bdb6:	693b      	ldr	r3, [r7, #16]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	371c      	adds	r7, #28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	70da      	strb	r2, [r3, #3]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdda:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7fe fc74 	bl	800a6cc <move_window>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <check_fs+0x2a>
 800bdea:	2304      	movs	r3, #4
 800bdec:	e038      	b.n	800be60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3338      	adds	r3, #56	; 0x38
 800bdf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe f9b8 	bl	800a16c <ld_word>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	461a      	mov	r2, r3
 800be00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be04:	429a      	cmp	r2, r3
 800be06:	d001      	beq.n	800be0c <check_fs+0x48>
 800be08:	2303      	movs	r3, #3
 800be0a:	e029      	b.n	800be60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800be12:	2be9      	cmp	r3, #233	; 0xe9
 800be14:	d009      	beq.n	800be2a <check_fs+0x66>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800be1c:	2beb      	cmp	r3, #235	; 0xeb
 800be1e:	d11e      	bne.n	800be5e <check_fs+0x9a>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800be26:	2b90      	cmp	r3, #144	; 0x90
 800be28:	d119      	bne.n	800be5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	3338      	adds	r3, #56	; 0x38
 800be2e:	3336      	adds	r3, #54	; 0x36
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe f9b3 	bl	800a19c <ld_dword>
 800be36:	4603      	mov	r3, r0
 800be38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be3c:	4a0a      	ldr	r2, [pc, #40]	; (800be68 <check_fs+0xa4>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d101      	bne.n	800be46 <check_fs+0x82>
 800be42:	2300      	movs	r3, #0
 800be44:	e00c      	b.n	800be60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	3338      	adds	r3, #56	; 0x38
 800be4a:	3352      	adds	r3, #82	; 0x52
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe f9a5 	bl	800a19c <ld_dword>
 800be52:	4603      	mov	r3, r0
 800be54:	4a05      	ldr	r2, [pc, #20]	; (800be6c <check_fs+0xa8>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d101      	bne.n	800be5e <check_fs+0x9a>
 800be5a:	2300      	movs	r3, #0
 800be5c:	e000      	b.n	800be60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be5e:	2302      	movs	r3, #2
}
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	00544146 	.word	0x00544146
 800be6c:	33544146 	.word	0x33544146

0800be70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b096      	sub	sp, #88	; 0x58
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	4613      	mov	r3, r2
 800be7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f7ff ff59 	bl	800bd3c <get_ldnumber>
 800be8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800be8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8e:	2b00      	cmp	r3, #0
 800be90:	da01      	bge.n	800be96 <find_volume+0x26>
 800be92:	230b      	movs	r3, #11
 800be94:	e268      	b.n	800c368 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be96:	4ab0      	ldr	r2, [pc, #704]	; (800c158 <find_volume+0x2e8>)
 800be98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <find_volume+0x3a>
 800bea6:	230c      	movs	r3, #12
 800bea8:	e25e      	b.n	800c368 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800beb0:	79fb      	ldrb	r3, [r7, #7]
 800beb2:	f023 0301 	bic.w	r3, r3, #1
 800beb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d01a      	beq.n	800bef6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec2:	785b      	ldrb	r3, [r3, #1]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe f8b3 	bl	800a030 <disk_status>
 800beca:	4603      	mov	r3, r0
 800becc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10c      	bne.n	800bef6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d007      	beq.n	800bef2 <find_volume+0x82>
 800bee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bee6:	f003 0304 	and.w	r3, r3, #4
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800beee:	230a      	movs	r3, #10
 800bef0:	e23a      	b.n	800c368 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800bef2:	2300      	movs	r3, #0
 800bef4:	e238      	b.n	800c368 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	2200      	movs	r2, #0
 800befa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800befc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fe f8ab 	bl	800a064 <disk_initialize>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf20:	2303      	movs	r3, #3
 800bf22:	e221      	b.n	800c368 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d007      	beq.n	800bf3a <find_volume+0xca>
 800bf2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf2e:	f003 0304 	and.w	r3, r3, #4
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bf36:	230a      	movs	r3, #10
 800bf38:	e216      	b.n	800c368 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	7858      	ldrb	r0, [r3, #1]
 800bf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf40:	330c      	adds	r3, #12
 800bf42:	461a      	mov	r2, r3
 800bf44:	2102      	movs	r1, #2
 800bf46:	f7fe f8f3 	bl	800a130 <disk_ioctl>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <find_volume+0xe4>
 800bf50:	2301      	movs	r3, #1
 800bf52:	e209      	b.n	800c368 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	899b      	ldrh	r3, [r3, #12]
 800bf58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf5c:	d80d      	bhi.n	800bf7a <find_volume+0x10a>
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	899b      	ldrh	r3, [r3, #12]
 800bf62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf66:	d308      	bcc.n	800bf7a <find_volume+0x10a>
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	899b      	ldrh	r3, [r3, #12]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	899b      	ldrh	r3, [r3, #12]
 800bf72:	3b01      	subs	r3, #1
 800bf74:	4013      	ands	r3, r2
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <find_volume+0x10e>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e1f4      	b.n	800c368 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bf82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf86:	f7ff ff1d 	bl	800bdc4 <check_fs>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d14b      	bne.n	800c030 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf98:	2300      	movs	r3, #0
 800bf9a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf9c:	e01f      	b.n	800bfde <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bfa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bfac:	4413      	add	r3, r2
 800bfae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	3304      	adds	r3, #4
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d006      	beq.n	800bfc8 <find_volume+0x158>
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe f8ec 	bl	800a19c <ld_dword>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	e000      	b.n	800bfca <find_volume+0x15a>
 800bfc8:	2200      	movs	r2, #0
 800bfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bfd2:	440b      	add	r3, r1
 800bfd4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfda:	3301      	adds	r3, #1
 800bfdc:	643b      	str	r3, [r7, #64]	; 0x40
 800bfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d9dc      	bls.n	800bf9e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <find_volume+0x184>
 800bfee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff0:	3b01      	subs	r3, #1
 800bff2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bffc:	4413      	add	r3, r2
 800bffe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c002:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c006:	2b00      	cmp	r3, #0
 800c008:	d005      	beq.n	800c016 <find_volume+0x1a6>
 800c00a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c00e:	f7ff fed9 	bl	800bdc4 <check_fs>
 800c012:	4603      	mov	r3, r0
 800c014:	e000      	b.n	800c018 <find_volume+0x1a8>
 800c016:	2303      	movs	r3, #3
 800c018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c01c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c020:	2b01      	cmp	r3, #1
 800c022:	d905      	bls.n	800c030 <find_volume+0x1c0>
 800c024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c026:	3301      	adds	r3, #1
 800c028:	643b      	str	r3, [r7, #64]	; 0x40
 800c02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d9e1      	bls.n	800bff4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c034:	2b04      	cmp	r3, #4
 800c036:	d101      	bne.n	800c03c <find_volume+0x1cc>
 800c038:	2301      	movs	r3, #1
 800c03a:	e195      	b.n	800c368 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c040:	2b01      	cmp	r3, #1
 800c042:	d901      	bls.n	800c048 <find_volume+0x1d8>
 800c044:	230d      	movs	r3, #13
 800c046:	e18f      	b.n	800c368 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04a:	3338      	adds	r3, #56	; 0x38
 800c04c:	330b      	adds	r3, #11
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe f88c 	bl	800a16c <ld_word>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05a:	899b      	ldrh	r3, [r3, #12]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d001      	beq.n	800c064 <find_volume+0x1f4>
 800c060:	230d      	movs	r3, #13
 800c062:	e181      	b.n	800c368 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	3338      	adds	r3, #56	; 0x38
 800c068:	3316      	adds	r3, #22
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe f87e 	bl	800a16c <ld_word>
 800c070:	4603      	mov	r3, r0
 800c072:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c076:	2b00      	cmp	r3, #0
 800c078:	d106      	bne.n	800c088 <find_volume+0x218>
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	3338      	adds	r3, #56	; 0x38
 800c07e:	3324      	adds	r3, #36	; 0x24
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe f88b 	bl	800a19c <ld_dword>
 800c086:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c08c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	789b      	ldrb	r3, [r3, #2]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d005      	beq.n	800c0ac <find_volume+0x23c>
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	789b      	ldrb	r3, [r3, #2]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d001      	beq.n	800c0ac <find_volume+0x23c>
 800c0a8:	230d      	movs	r3, #13
 800c0aa:	e15d      	b.n	800c368 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	789b      	ldrb	r3, [r3, #2]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0b4:	fb02 f303 	mul.w	r3, r2, r3
 800c0b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	895b      	ldrh	r3, [r3, #10]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d008      	beq.n	800c0e0 <find_volume+0x270>
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	895b      	ldrh	r3, [r3, #10]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	895b      	ldrh	r3, [r3, #10]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	4013      	ands	r3, r2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <find_volume+0x274>
 800c0e0:	230d      	movs	r3, #13
 800c0e2:	e141      	b.n	800c368 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	3338      	adds	r3, #56	; 0x38
 800c0e8:	3311      	adds	r3, #17
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fe f83e 	bl	800a16c <ld_word>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	891b      	ldrh	r3, [r3, #8]
 800c0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0fe:	8992      	ldrh	r2, [r2, #12]
 800c100:	0952      	lsrs	r2, r2, #5
 800c102:	b292      	uxth	r2, r2
 800c104:	fbb3 f1f2 	udiv	r1, r3, r2
 800c108:	fb02 f201 	mul.w	r2, r2, r1
 800c10c:	1a9b      	subs	r3, r3, r2
 800c10e:	b29b      	uxth	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <find_volume+0x2a8>
 800c114:	230d      	movs	r3, #13
 800c116:	e127      	b.n	800c368 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	3338      	adds	r3, #56	; 0x38
 800c11c:	3313      	adds	r3, #19
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe f824 	bl	800a16c <ld_word>
 800c124:	4603      	mov	r3, r0
 800c126:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <find_volume+0x2cc>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	3338      	adds	r3, #56	; 0x38
 800c132:	3320      	adds	r3, #32
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe f831 	bl	800a19c <ld_dword>
 800c13a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13e:	3338      	adds	r3, #56	; 0x38
 800c140:	330e      	adds	r3, #14
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe f812 	bl	800a16c <ld_word>
 800c148:	4603      	mov	r3, r0
 800c14a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c14c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d104      	bne.n	800c15c <find_volume+0x2ec>
 800c152:	230d      	movs	r3, #13
 800c154:	e108      	b.n	800c368 <find_volume+0x4f8>
 800c156:	bf00      	nop
 800c158:	20000210 	.word	0x20000210

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c15c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c160:	4413      	add	r3, r2
 800c162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c164:	8911      	ldrh	r1, [r2, #8]
 800c166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c168:	8992      	ldrh	r2, [r2, #12]
 800c16a:	0952      	lsrs	r2, r2, #5
 800c16c:	b292      	uxth	r2, r2
 800c16e:	fbb1 f2f2 	udiv	r2, r1, r2
 800c172:	b292      	uxth	r2, r2
 800c174:	4413      	add	r3, r2
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d201      	bcs.n	800c184 <find_volume+0x314>
 800c180:	230d      	movs	r3, #13
 800c182:	e0f1      	b.n	800c368 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c18c:	8952      	ldrh	r2, [r2, #10]
 800c18e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c192:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <find_volume+0x32e>
 800c19a:	230d      	movs	r3, #13
 800c19c:	e0e4      	b.n	800c368 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d802      	bhi.n	800c1b4 <find_volume+0x344>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d802      	bhi.n	800c1c4 <find_volume+0x354>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	1c9a      	adds	r2, r3, #2
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1d0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1d6:	441a      	add	r2, r3
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c1dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	441a      	add	r2, r3
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c1e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d11e      	bne.n	800c22c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	3338      	adds	r3, #56	; 0x38
 800c1f2:	332a      	adds	r3, #42	; 0x2a
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fd ffb9 	bl	800a16c <ld_word>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <find_volume+0x394>
 800c200:	230d      	movs	r3, #13
 800c202:	e0b1      	b.n	800c368 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	891b      	ldrh	r3, [r3, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <find_volume+0x3a0>
 800c20c:	230d      	movs	r3, #13
 800c20e:	e0ab      	b.n	800c368 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	3338      	adds	r3, #56	; 0x38
 800c214:	332c      	adds	r3, #44	; 0x2c
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd ffc0 	bl	800a19c <ld_dword>
 800c21c:	4602      	mov	r2, r0
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	647b      	str	r3, [r7, #68]	; 0x44
 800c22a:	e01f      	b.n	800c26c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	891b      	ldrh	r3, [r3, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <find_volume+0x3c8>
 800c234:	230d      	movs	r3, #13
 800c236:	e097      	b.n	800c368 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c23e:	441a      	add	r2, r3
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d103      	bne.n	800c254 <find_volume+0x3e4>
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	69db      	ldr	r3, [r3, #28]
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	e00a      	b.n	800c26a <find_volume+0x3fa>
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	69da      	ldr	r2, [r3, #28]
 800c258:	4613      	mov	r3, r2
 800c25a:	005b      	lsls	r3, r3, #1
 800c25c:	4413      	add	r3, r2
 800c25e:	085a      	lsrs	r2, r3, #1
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	69db      	ldr	r3, [r3, #28]
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c26a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	6a1a      	ldr	r2, [r3, #32]
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	899b      	ldrh	r3, [r3, #12]
 800c274:	4619      	mov	r1, r3
 800c276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c278:	440b      	add	r3, r1
 800c27a:	3b01      	subs	r3, #1
 800c27c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c27e:	8989      	ldrh	r1, [r1, #12]
 800c280:	fbb3 f3f1 	udiv	r3, r3, r1
 800c284:	429a      	cmp	r2, r3
 800c286:	d201      	bcs.n	800c28c <find_volume+0x41c>
 800c288:	230d      	movs	r3, #13
 800c28a:	e06d      	b.n	800c368 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	f04f 32ff 	mov.w	r2, #4294967295
 800c292:	619a      	str	r2, [r3, #24]
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	699a      	ldr	r2, [r3, #24]
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	2280      	movs	r2, #128	; 0x80
 800c2a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c2a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d149      	bne.n	800c33e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ac:	3338      	adds	r3, #56	; 0x38
 800c2ae:	3330      	adds	r3, #48	; 0x30
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fd ff5b 	bl	800a16c <ld_word>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d140      	bne.n	800c33e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2be:	3301      	adds	r3, #1
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2c4:	f7fe fa02 	bl	800a6cc <move_window>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d137      	bne.n	800c33e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	3338      	adds	r3, #56	; 0x38
 800c2d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fd ff45 	bl	800a16c <ld_word>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d127      	bne.n	800c33e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	3338      	adds	r3, #56	; 0x38
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fd ff52 	bl	800a19c <ld_dword>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	4a1d      	ldr	r2, [pc, #116]	; (800c370 <find_volume+0x500>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d11e      	bne.n	800c33e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	3338      	adds	r3, #56	; 0x38
 800c304:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fd ff47 	bl	800a19c <ld_dword>
 800c30e:	4603      	mov	r3, r0
 800c310:	4a18      	ldr	r2, [pc, #96]	; (800c374 <find_volume+0x504>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d113      	bne.n	800c33e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	3338      	adds	r3, #56	; 0x38
 800c31a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fd ff3c 	bl	800a19c <ld_dword>
 800c324:	4602      	mov	r2, r0
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32c:	3338      	adds	r3, #56	; 0x38
 800c32e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c332:	4618      	mov	r0, r3
 800c334:	f7fd ff32 	bl	800a19c <ld_dword>
 800c338:	4602      	mov	r2, r0
 800c33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c344:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c346:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <find_volume+0x508>)
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	3301      	adds	r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <find_volume+0x508>)
 800c350:	801a      	strh	r2, [r3, #0]
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <find_volume+0x508>)
 800c354:	881a      	ldrh	r2, [r3, #0]
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35c:	4a07      	ldr	r2, [pc, #28]	; (800c37c <find_volume+0x50c>)
 800c35e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c362:	f7fe f94b 	bl	800a5fc <clear_lock>
#endif
	return FR_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3758      	adds	r7, #88	; 0x58
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	41615252 	.word	0x41615252
 800c374:	61417272 	.word	0x61417272
 800c378:	20000214 	.word	0x20000214
 800c37c:	20000238 	.word	0x20000238

0800c380 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c38a:	2309      	movs	r3, #9
 800c38c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d01c      	beq.n	800c3ce <validate+0x4e>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d018      	beq.n	800c3ce <validate+0x4e>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d013      	beq.n	800c3ce <validate+0x4e>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	889a      	ldrh	r2, [r3, #4]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	88db      	ldrh	r3, [r3, #6]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d10c      	bne.n	800c3ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	785b      	ldrb	r3, [r3, #1]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fd fe38 	bl	800a030 <disk_status>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <validate+0x4e>
			res = FR_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <validate+0x5a>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	e000      	b.n	800c3dc <validate+0x5c>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	6013      	str	r3, [r2, #0]
	return res;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b088      	sub	sp, #32
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3fe:	f107 0310 	add.w	r3, r7, #16
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff fc9a 	bl	800bd3c <get_ldnumber>
 800c408:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	da01      	bge.n	800c414 <f_mount+0x28>
 800c410:	230b      	movs	r3, #11
 800c412:	e02b      	b.n	800c46c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c414:	4a17      	ldr	r2, [pc, #92]	; (800c474 <f_mount+0x88>)
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c41c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c424:	69b8      	ldr	r0, [r7, #24]
 800c426:	f7fe f8e9 	bl	800a5fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	2200      	movs	r2, #0
 800c42e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d002      	beq.n	800c43c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2200      	movs	r2, #0
 800c43a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	490d      	ldr	r1, [pc, #52]	; (800c474 <f_mount+0x88>)
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <f_mount+0x66>
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d001      	beq.n	800c456 <f_mount+0x6a>
 800c452:	2300      	movs	r3, #0
 800c454:	e00a      	b.n	800c46c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c456:	f107 010c 	add.w	r1, r7, #12
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	2200      	movs	r2, #0
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff fd05 	bl	800be70 <find_volume>
 800c466:	4603      	mov	r3, r0
 800c468:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3720      	adds	r7, #32
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	20000210 	.word	0x20000210

0800c478 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b09a      	sub	sp, #104	; 0x68
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	4613      	mov	r3, r2
 800c484:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <f_open+0x18>
 800c48c:	2309      	movs	r3, #9
 800c48e:	e1bb      	b.n	800c808 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c496:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c498:	79fa      	ldrb	r2, [r7, #7]
 800c49a:	f107 0114 	add.w	r1, r7, #20
 800c49e:	f107 0308 	add.w	r3, r7, #8
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff fce4 	bl	800be70 <find_volume>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c4ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f040 819f 	bne.w	800c7f6 <f_open+0x37e>
		dj.obj.fs = fs;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	f107 0318 	add.w	r3, r7, #24
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7ff fbc3 	bl	800bc50 <follow_path>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d11a      	bne.n	800c50e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c4d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c4dc:	b25b      	sxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	da03      	bge.n	800c4ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800c4e2:	2306      	movs	r3, #6
 800c4e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4e8:	e011      	b.n	800c50e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf14      	ite	ne
 800c4f4:	2301      	movne	r3, #1
 800c4f6:	2300      	moveq	r3, #0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f107 0318 	add.w	r3, r7, #24
 800c500:	4611      	mov	r1, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7fd ff32 	bl	800a36c <chk_lock>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c50e:	79fb      	ldrb	r3, [r7, #7]
 800c510:	f003 031c 	and.w	r3, r3, #28
 800c514:	2b00      	cmp	r3, #0
 800c516:	d07f      	beq.n	800c618 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c518:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d017      	beq.n	800c550 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c520:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c524:	2b04      	cmp	r3, #4
 800c526:	d10e      	bne.n	800c546 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c528:	f7fd ff7c 	bl	800a424 <enq_lock>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d006      	beq.n	800c540 <f_open+0xc8>
 800c532:	f107 0318 	add.w	r3, r7, #24
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff f8da 	bl	800b6f0 <dir_register>
 800c53c:	4603      	mov	r3, r0
 800c53e:	e000      	b.n	800c542 <f_open+0xca>
 800c540:	2312      	movs	r3, #18
 800c542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c546:	79fb      	ldrb	r3, [r7, #7]
 800c548:	f043 0308 	orr.w	r3, r3, #8
 800c54c:	71fb      	strb	r3, [r7, #7]
 800c54e:	e010      	b.n	800c572 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c550:	7fbb      	ldrb	r3, [r7, #30]
 800c552:	f003 0311 	and.w	r3, r3, #17
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <f_open+0xea>
					res = FR_DENIED;
 800c55a:	2307      	movs	r3, #7
 800c55c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c560:	e007      	b.n	800c572 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	f003 0304 	and.w	r3, r3, #4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <f_open+0xfa>
 800c56c:	2308      	movs	r3, #8
 800c56e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c572:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c576:	2b00      	cmp	r3, #0
 800c578:	d168      	bne.n	800c64c <f_open+0x1d4>
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	f003 0308 	and.w	r3, r3, #8
 800c580:	2b00      	cmp	r3, #0
 800c582:	d063      	beq.n	800c64c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c584:	f7fa fd1e 	bl	8006fc4 <get_fattime>
 800c588:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	330e      	adds	r3, #14
 800c58e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c590:	4618      	mov	r0, r3
 800c592:	f7fd fe41 	bl	800a218 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	3316      	adds	r3, #22
 800c59a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fd fe3b 	bl	800a218 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	330b      	adds	r3, #11
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe fe13 	bl	800b1dc <ld_clust>
 800c5b6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fe2b 	bl	800b21a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	331c      	adds	r3, #28
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fd fe24 	bl	800a218 <st_dword>
					fs->wflag = 1;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d037      	beq.n	800c64c <f_open+0x1d4>
						dw = fs->winsect;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c5e2:	f107 0318 	add.w	r3, r7, #24
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fb1b 	bl	800ac26 <remove_chain>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c5f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d126      	bne.n	800c64c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe f862 	bl	800a6cc <move_window>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c612:	3a01      	subs	r2, #1
 800c614:	615a      	str	r2, [r3, #20]
 800c616:	e019      	b.n	800c64c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c618:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d115      	bne.n	800c64c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c620:	7fbb      	ldrb	r3, [r7, #30]
 800c622:	f003 0310 	and.w	r3, r3, #16
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c62a:	2304      	movs	r3, #4
 800c62c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c630:	e00c      	b.n	800c64c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c632:	79fb      	ldrb	r3, [r7, #7]
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d007      	beq.n	800c64c <f_open+0x1d4>
 800c63c:	7fbb      	ldrb	r3, [r7, #30]
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <f_open+0x1d4>
						res = FR_DENIED;
 800c646:	2307      	movs	r3, #7
 800c648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c64c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c650:	2b00      	cmp	r3, #0
 800c652:	d128      	bne.n	800c6a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	f003 0308 	and.w	r3, r3, #8
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c664:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c66e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c674:	79fb      	ldrb	r3, [r7, #7]
 800c676:	f023 0301 	bic.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bf14      	ite	ne
 800c67e:	2301      	movne	r3, #1
 800c680:	2300      	moveq	r3, #0
 800c682:	b2db      	uxtb	r3, r3
 800c684:	461a      	mov	r2, r3
 800c686:	f107 0318 	add.w	r3, r7, #24
 800c68a:	4611      	mov	r1, r2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fd feeb 	bl	800a468 <inc_lock>
 800c692:	4602      	mov	r2, r0
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <f_open+0x22e>
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c6a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f040 80a3 	bne.w	800c7f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fe fd90 	bl	800b1dc <ld_clust>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c4:	331c      	adds	r3, #28
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fd fd68 	bl	800a19c <ld_dword>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	88da      	ldrh	r2, [r3, #6]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	79fa      	ldrb	r2, [r7, #7]
 800c6ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3330      	adds	r3, #48	; 0x30
 800c702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c706:	2100      	movs	r1, #0
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fd fdd2 	bl	800a2b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	f003 0320 	and.w	r3, r3, #32
 800c714:	2b00      	cmp	r3, #0
 800c716:	d06e      	beq.n	800c7f6 <f_open+0x37e>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d06a      	beq.n	800c7f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	895b      	ldrh	r3, [r3, #10]
 800c72c:	461a      	mov	r2, r3
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	899b      	ldrh	r3, [r3, #12]
 800c732:	fb03 f302 	mul.w	r3, r3, r2
 800c736:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c744:	e016      	b.n	800c774 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe f87b 	bl	800a846 <get_fat>
 800c750:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c754:	2b01      	cmp	r3, #1
 800c756:	d802      	bhi.n	800c75e <f_open+0x2e6>
 800c758:	2302      	movs	r3, #2
 800c75a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c75e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c764:	d102      	bne.n	800c76c <f_open+0x2f4>
 800c766:	2301      	movs	r3, #1
 800c768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c76c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <f_open+0x30c>
 800c77c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c780:	429a      	cmp	r2, r3
 800c782:	d8e0      	bhi.n	800c746 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c788:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c78a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d131      	bne.n	800c7f6 <f_open+0x37e>
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	899b      	ldrh	r3, [r3, #12]
 800c796:	461a      	mov	r2, r3
 800c798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c79a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c79e:	fb02 f201 	mul.w	r2, r2, r1
 800c7a2:	1a9b      	subs	r3, r3, r2
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d026      	beq.n	800c7f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fe f82b 	bl	800a808 <clust2sect>
 800c7b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d103      	bne.n	800c7c2 <f_open+0x34a>
						res = FR_INT_ERR;
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c7c0:	e019      	b.n	800c7f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	899b      	ldrh	r3, [r3, #12]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7d0:	441a      	add	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	7858      	ldrb	r0, [r3, #1]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6a1a      	ldr	r2, [r3, #32]
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f7fd fc63 	bl	800a0b0 <disk_read>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <f_open+0x37e>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c7f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d002      	beq.n	800c804 <f_open+0x38c>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c804:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3768      	adds	r7, #104	; 0x68
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08e      	sub	sp, #56	; 0x38
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f107 0214 	add.w	r2, r7, #20
 800c82e:	4611      	mov	r1, r2
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff fda5 	bl	800c380 <validate>
 800c836:	4603      	mov	r3, r0
 800c838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c83c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c840:	2b00      	cmp	r3, #0
 800c842:	d107      	bne.n	800c854 <f_read+0x44>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	7d5b      	ldrb	r3, [r3, #21]
 800c848:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c84c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <f_read+0x4a>
 800c854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c858:	e135      	b.n	800cac6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	7d1b      	ldrb	r3, [r3, #20]
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <f_read+0x5a>
 800c866:	2307      	movs	r3, #7
 800c868:	e12d      	b.n	800cac6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	68da      	ldr	r2, [r3, #12]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	f240 811e 	bls.w	800cabc <f_read+0x2ac>
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c884:	e11a      	b.n	800cabc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	8992      	ldrh	r2, [r2, #12]
 800c88e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c892:	fb02 f201 	mul.w	r2, r2, r1
 800c896:	1a9b      	subs	r3, r3, r2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f040 80d5 	bne.w	800ca48 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	699b      	ldr	r3, [r3, #24]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	8992      	ldrh	r2, [r2, #12]
 800c8a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	8952      	ldrh	r2, [r2, #10]
 800c8ae:	3a01      	subs	r2, #1
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d12f      	bne.n	800c91a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d103      	bne.n	800c8ca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	633b      	str	r3, [r7, #48]	; 0x30
 800c8c8:	e013      	b.n	800c8f2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f7fe faa1 	bl	800ae20 <clmt_clust>
 800c8de:	6338      	str	r0, [r7, #48]	; 0x30
 800c8e0:	e007      	b.n	800c8f2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	f7fd ffab 	bl	800a846 <get_fat>
 800c8f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d804      	bhi.n	800c902 <f_read+0xf2>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2202      	movs	r2, #2
 800c8fc:	755a      	strb	r2, [r3, #21]
 800c8fe:	2302      	movs	r3, #2
 800c900:	e0e1      	b.n	800cac6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c908:	d104      	bne.n	800c914 <f_read+0x104>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2201      	movs	r2, #1
 800c90e:	755a      	strb	r2, [r3, #21]
 800c910:	2301      	movs	r3, #1
 800c912:	e0d8      	b.n	800cac6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c918:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	69db      	ldr	r3, [r3, #28]
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f7fd ff70 	bl	800a808 <clust2sect>
 800c928:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d104      	bne.n	800c93a <f_read+0x12a>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2202      	movs	r2, #2
 800c934:	755a      	strb	r2, [r3, #21]
 800c936:	2302      	movs	r3, #2
 800c938:	e0c5      	b.n	800cac6 <f_read+0x2b6>
			sect += csect;
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	4413      	add	r3, r2
 800c940:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	899b      	ldrh	r3, [r3, #12]
 800c946:	461a      	mov	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c94e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d041      	beq.n	800c9da <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	4413      	add	r3, r2
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	8952      	ldrh	r2, [r2, #10]
 800c960:	4293      	cmp	r3, r2
 800c962:	d905      	bls.n	800c970 <f_read+0x160>
					cc = fs->csize - csect;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	895b      	ldrh	r3, [r3, #10]
 800c968:	461a      	mov	r2, r3
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	7858      	ldrb	r0, [r3, #1]
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	69ba      	ldr	r2, [r7, #24]
 800c978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c97a:	f7fd fb99 	bl	800a0b0 <disk_read>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d004      	beq.n	800c98e <f_read+0x17e>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2201      	movs	r2, #1
 800c988:	755a      	strb	r2, [r3, #21]
 800c98a:	2301      	movs	r3, #1
 800c98c:	e09b      	b.n	800cac6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	7d1b      	ldrb	r3, [r3, #20]
 800c992:	b25b      	sxtb	r3, r3
 800c994:	2b00      	cmp	r3, #0
 800c996:	da18      	bge.n	800c9ca <f_read+0x1ba>
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	6a1a      	ldr	r2, [r3, #32]
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d911      	bls.n	800c9ca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6a1a      	ldr	r2, [r3, #32]
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	8992      	ldrh	r2, [r2, #12]
 800c9b2:	fb02 f303 	mul.w	r3, r2, r3
 800c9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b8:	18d0      	adds	r0, r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	899b      	ldrh	r3, [r3, #12]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	f7fd fc53 	bl	800a270 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	899b      	ldrh	r3, [r3, #12]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	fb02 f303 	mul.w	r3, r2, r3
 800c9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c9d8:	e05c      	b.n	800ca94 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	69ba      	ldr	r2, [r7, #24]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d02e      	beq.n	800ca42 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	7d1b      	ldrb	r3, [r3, #20]
 800c9e8:	b25b      	sxtb	r3, r3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	da18      	bge.n	800ca20 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	7858      	ldrb	r0, [r3, #1]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6a1a      	ldr	r2, [r3, #32]
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f7fd fb77 	bl	800a0f0 <disk_write>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d004      	beq.n	800ca12 <f_read+0x202>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	755a      	strb	r2, [r3, #21]
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e059      	b.n	800cac6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	7d1b      	ldrb	r3, [r3, #20]
 800ca16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	7858      	ldrb	r0, [r3, #1]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	f7fd fb3f 	bl	800a0b0 <disk_read>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d004      	beq.n	800ca42 <f_read+0x232>
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	755a      	strb	r2, [r3, #21]
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e041      	b.n	800cac6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	69ba      	ldr	r2, [r7, #24]
 800ca46:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	899b      	ldrh	r3, [r3, #12]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	8992      	ldrh	r2, [r2, #12]
 800ca56:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca5a:	fb02 f201 	mul.w	r2, r2, r1
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	1ac3      	subs	r3, r0, r3
 800ca62:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d901      	bls.n	800ca70 <f_read+0x260>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	8992      	ldrh	r2, [r2, #12]
 800ca7e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca82:	fb02 f200 	mul.w	r2, r2, r0
 800ca86:	1a9b      	subs	r3, r3, r2
 800ca88:	440b      	add	r3, r1
 800ca8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca90:	f7fd fbee 	bl	800a270 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ca94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	4413      	add	r3, r2
 800ca9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	699a      	ldr	r2, [r3, #24]
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	441a      	add	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	619a      	str	r2, [r3, #24]
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	441a      	add	r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f47f aee1 	bne.w	800c886 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3738      	adds	r7, #56	; 0x38
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b08c      	sub	sp, #48	; 0x30
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	60f8      	str	r0, [r7, #12]
 800cad6:	60b9      	str	r1, [r7, #8]
 800cad8:	607a      	str	r2, [r7, #4]
 800cada:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f107 0210 	add.w	r2, r7, #16
 800caec:	4611      	mov	r1, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff fc46 	bl	800c380 <validate>
 800caf4:	4603      	mov	r3, r0
 800caf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cafa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d107      	bne.n	800cb12 <f_write+0x44>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	7d5b      	ldrb	r3, [r3, #21]
 800cb06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cb0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <f_write+0x4a>
 800cb12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb16:	e16a      	b.n	800cdee <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	7d1b      	ldrb	r3, [r3, #20]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d101      	bne.n	800cb28 <f_write+0x5a>
 800cb24:	2307      	movs	r3, #7
 800cb26:	e162      	b.n	800cdee <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	699a      	ldr	r2, [r3, #24]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	441a      	add	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	f080 814c 	bcs.w	800cdd2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	43db      	mvns	r3, r3
 800cb40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cb42:	e146      	b.n	800cdd2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	8992      	ldrh	r2, [r2, #12]
 800cb4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb50:	fb02 f201 	mul.w	r2, r2, r1
 800cb54:	1a9b      	subs	r3, r3, r2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f040 80f1 	bne.w	800cd3e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	8992      	ldrh	r2, [r2, #12]
 800cb64:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb68:	693a      	ldr	r2, [r7, #16]
 800cb6a:	8952      	ldrh	r2, [r2, #10]
 800cb6c:	3a01      	subs	r2, #1
 800cb6e:	4013      	ands	r3, r2
 800cb70:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d143      	bne.n	800cc00 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10c      	bne.n	800cb9a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d11a      	bne.n	800cbc2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2100      	movs	r1, #0
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe f8ad 	bl	800acf0 <create_chain>
 800cb96:	62b8      	str	r0, [r7, #40]	; 0x28
 800cb98:	e013      	b.n	800cbc2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d007      	beq.n	800cbb2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	699b      	ldr	r3, [r3, #24]
 800cba6:	4619      	mov	r1, r3
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f7fe f939 	bl	800ae20 <clmt_clust>
 800cbae:	62b8      	str	r0, [r7, #40]	; 0x28
 800cbb0:	e007      	b.n	800cbc2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	69db      	ldr	r3, [r3, #28]
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4610      	mov	r0, r2
 800cbbc:	f7fe f898 	bl	800acf0 <create_chain>
 800cbc0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 8109 	beq.w	800cddc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d104      	bne.n	800cbda <f_write+0x10c>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	755a      	strb	r2, [r3, #21]
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	e109      	b.n	800cdee <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe0:	d104      	bne.n	800cbec <f_write+0x11e>
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	755a      	strb	r2, [r3, #21]
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e100      	b.n	800cdee <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <f_write+0x132>
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbfe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	7d1b      	ldrb	r3, [r3, #20]
 800cc04:	b25b      	sxtb	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	da18      	bge.n	800cc3c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	7858      	ldrb	r0, [r3, #1]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6a1a      	ldr	r2, [r3, #32]
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f7fd fa69 	bl	800a0f0 <disk_write>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <f_write+0x160>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2201      	movs	r2, #1
 800cc28:	755a      	strb	r2, [r3, #21]
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e0df      	b.n	800cdee <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	7d1b      	ldrb	r3, [r3, #20]
 800cc32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f7fd fddf 	bl	800a808 <clust2sect>
 800cc4a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d104      	bne.n	800cc5c <f_write+0x18e>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2202      	movs	r2, #2
 800cc56:	755a      	strb	r2, [r3, #21]
 800cc58:	2302      	movs	r3, #2
 800cc5a:	e0c8      	b.n	800cdee <f_write+0x320>
			sect += csect;
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	4413      	add	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	899b      	ldrh	r3, [r3, #12]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d043      	beq.n	800cd00 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cc78:	69ba      	ldr	r2, [r7, #24]
 800cc7a:	6a3b      	ldr	r3, [r7, #32]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	8952      	ldrh	r2, [r2, #10]
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d905      	bls.n	800cc92 <f_write+0x1c4>
					cc = fs->csize - csect;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	895b      	ldrh	r3, [r3, #10]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	7858      	ldrb	r0, [r3, #1]
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	69f9      	ldr	r1, [r7, #28]
 800cc9c:	f7fd fa28 	bl	800a0f0 <disk_write>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d004      	beq.n	800ccb0 <f_write+0x1e2>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	755a      	strb	r2, [r3, #21]
 800ccac:	2301      	movs	r3, #1
 800ccae:	e09e      	b.n	800cdee <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a1a      	ldr	r2, [r3, #32]
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	6a3a      	ldr	r2, [r7, #32]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d918      	bls.n	800ccf0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6a1a      	ldr	r2, [r3, #32]
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	8992      	ldrh	r2, [r2, #12]
 800ccd0:	fb02 f303 	mul.w	r3, r2, r3
 800ccd4:	69fa      	ldr	r2, [r7, #28]
 800ccd6:	18d1      	adds	r1, r2, r3
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	899b      	ldrh	r3, [r3, #12]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f7fd fac7 	bl	800a270 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	7d1b      	ldrb	r3, [r3, #20]
 800cce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	899b      	ldrh	r3, [r3, #12]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	6a3b      	ldr	r3, [r7, #32]
 800ccf8:	fb02 f303 	mul.w	r3, r2, r3
 800ccfc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ccfe:	e04b      	b.n	800cd98 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d016      	beq.n	800cd38 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	699a      	ldr	r2, [r3, #24]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d210      	bcs.n	800cd38 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	7858      	ldrb	r0, [r3, #1]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd20:	2301      	movs	r3, #1
 800cd22:	697a      	ldr	r2, [r7, #20]
 800cd24:	f7fd f9c4 	bl	800a0b0 <disk_read>
 800cd28:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d004      	beq.n	800cd38 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2201      	movs	r2, #1
 800cd32:	755a      	strb	r2, [r3, #21]
 800cd34:	2301      	movs	r3, #1
 800cd36:	e05a      	b.n	800cdee <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	899b      	ldrh	r3, [r3, #12]
 800cd42:	4618      	mov	r0, r3
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	699b      	ldr	r3, [r3, #24]
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	8992      	ldrh	r2, [r2, #12]
 800cd4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd50:	fb02 f201 	mul.w	r2, r2, r1
 800cd54:	1a9b      	subs	r3, r3, r2
 800cd56:	1ac3      	subs	r3, r0, r3
 800cd58:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cd5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d901      	bls.n	800cd66 <f_write+0x298>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	699b      	ldr	r3, [r3, #24]
 800cd70:	693a      	ldr	r2, [r7, #16]
 800cd72:	8992      	ldrh	r2, [r2, #12]
 800cd74:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd78:	fb02 f200 	mul.w	r2, r2, r0
 800cd7c:	1a9b      	subs	r3, r3, r2
 800cd7e:	440b      	add	r3, r1
 800cd80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd82:	69f9      	ldr	r1, [r7, #28]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fd fa73 	bl	800a270 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	7d1b      	ldrb	r3, [r3, #20]
 800cd8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cd98:	69fa      	ldr	r2, [r7, #28]
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	4413      	add	r3, r2
 800cd9e:	61fb      	str	r3, [r7, #28]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	699a      	ldr	r2, [r3, #24]
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	441a      	add	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	619a      	str	r2, [r3, #24]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	68da      	ldr	r2, [r3, #12]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	bf38      	it	cc
 800cdb8:	461a      	movcc	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	60da      	str	r2, [r3, #12]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	441a      	add	r2, r3
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	601a      	str	r2, [r3, #0]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f47f aeb5 	bne.w	800cb44 <f_write+0x76>
 800cdda:	e000      	b.n	800cdde <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cddc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	7d1b      	ldrb	r3, [r3, #20]
 800cde2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3730      	adds	r7, #48	; 0x30
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b086      	sub	sp, #24
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f107 0208 	add.w	r2, r7, #8
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7ff faba 	bl	800c380 <validate>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce10:	7dfb      	ldrb	r3, [r7, #23]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d168      	bne.n	800cee8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	7d1b      	ldrb	r3, [r3, #20]
 800ce1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d062      	beq.n	800cee8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	7d1b      	ldrb	r3, [r3, #20]
 800ce26:	b25b      	sxtb	r3, r3
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da15      	bge.n	800ce58 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	7858      	ldrb	r0, [r3, #1]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1a      	ldr	r2, [r3, #32]
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	f7fd f958 	bl	800a0f0 <disk_write>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <f_sync+0x54>
 800ce46:	2301      	movs	r3, #1
 800ce48:	e04f      	b.n	800ceea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	7d1b      	ldrb	r3, [r3, #20]
 800ce4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ce58:	f7fa f8b4 	bl	8006fc4 <get_fattime>
 800ce5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce64:	4619      	mov	r1, r3
 800ce66:	4610      	mov	r0, r2
 800ce68:	f7fd fc30 	bl	800a6cc <move_window>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ce70:	7dfb      	ldrb	r3, [r7, #23]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d138      	bne.n	800cee8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	330b      	adds	r3, #11
 800ce80:	781a      	ldrb	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	330b      	adds	r3, #11
 800ce86:	f042 0220 	orr.w	r2, r2, #32
 800ce8a:	b2d2      	uxtb	r2, r2
 800ce8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	461a      	mov	r2, r3
 800ce98:	68f9      	ldr	r1, [r7, #12]
 800ce9a:	f7fe f9be 	bl	800b21a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f103 021c 	add.w	r2, r3, #28
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4610      	mov	r0, r2
 800ceac:	f7fd f9b4 	bl	800a218 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3316      	adds	r3, #22
 800ceb4:	6939      	ldr	r1, [r7, #16]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fd f9ae 	bl	800a218 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3312      	adds	r3, #18
 800cec0:	2100      	movs	r1, #0
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fd f98d 	bl	800a1e2 <st_word>
					fs->wflag = 1;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2201      	movs	r2, #1
 800cecc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fd fc29 	bl	800a728 <sync_fs>
 800ced6:	4603      	mov	r3, r0
 800ced8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	7d1b      	ldrb	r3, [r3, #20]
 800cede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b084      	sub	sp, #16
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7ff ff7b 	bl	800cdf6 <f_sync>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d118      	bne.n	800cf3c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f107 0208 	add.w	r2, r7, #8
 800cf10:	4611      	mov	r1, r2
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff fa34 	bl	800c380 <validate>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d10c      	bne.n	800cf3c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	691b      	ldr	r3, [r3, #16]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fd fb2c 	bl	800a584 <dec_lock>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cf30:	7bfb      	ldrb	r3, [r7, #15]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf56:	2301      	movs	r3, #1
 800cf58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf5e:	4b1f      	ldr	r3, [pc, #124]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf60:	7a5b      	ldrb	r3, [r3, #9]
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d131      	bne.n	800cfcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf68:	4b1c      	ldr	r3, [pc, #112]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf6a:	7a5b      	ldrb	r3, [r3, #9]
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	461a      	mov	r2, r3
 800cf70:	4b1a      	ldr	r3, [pc, #104]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf72:	2100      	movs	r1, #0
 800cf74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cf76:	4b19      	ldr	r3, [pc, #100]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf78:	7a5b      	ldrb	r3, [r3, #9]
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	4a17      	ldr	r2, [pc, #92]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cf86:	4b15      	ldr	r3, [pc, #84]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf88:	7a5b      	ldrb	r3, [r3, #9]
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	4b13      	ldr	r3, [pc, #76]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf90:	4413      	add	r3, r2
 800cf92:	79fa      	ldrb	r2, [r7, #7]
 800cf94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf96:	4b11      	ldr	r3, [pc, #68]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cf98:	7a5b      	ldrb	r3, [r3, #9]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	b2d1      	uxtb	r1, r2
 800cfa0:	4a0e      	ldr	r2, [pc, #56]	; (800cfdc <FATFS_LinkDriverEx+0x94>)
 800cfa2:	7251      	strb	r1, [r2, #9]
 800cfa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cfa6:	7dbb      	ldrb	r3, [r7, #22]
 800cfa8:	3330      	adds	r3, #48	; 0x30
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	223a      	movs	r2, #58	; 0x3a
 800cfb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	3302      	adds	r3, #2
 800cfbc:	222f      	movs	r2, #47	; 0x2f
 800cfbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	3303      	adds	r3, #3
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cfcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	371c      	adds	r7, #28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	20000438 	.word	0x20000438

0800cfe0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cfea:	2200      	movs	r2, #0
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff ffaa 	bl	800cf48 <FATFS_LinkDriverEx>
 800cff4:	4603      	mov	r3, r0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
	...

0800d000 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	6039      	str	r1, [r7, #0]
 800d00a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d00c:	88fb      	ldrh	r3, [r7, #6]
 800d00e:	2b7f      	cmp	r3, #127	; 0x7f
 800d010:	d802      	bhi.n	800d018 <ff_convert+0x18>
		c = chr;
 800d012:	88fb      	ldrh	r3, [r7, #6]
 800d014:	81fb      	strh	r3, [r7, #14]
 800d016:	e025      	b.n	800d064 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00b      	beq.n	800d036 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d01e:	88fb      	ldrh	r3, [r7, #6]
 800d020:	2bff      	cmp	r3, #255	; 0xff
 800d022:	d805      	bhi.n	800d030 <ff_convert+0x30>
 800d024:	88fb      	ldrh	r3, [r7, #6]
 800d026:	3b80      	subs	r3, #128	; 0x80
 800d028:	4a12      	ldr	r2, [pc, #72]	; (800d074 <ff_convert+0x74>)
 800d02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d02e:	e000      	b.n	800d032 <ff_convert+0x32>
 800d030:	2300      	movs	r3, #0
 800d032:	81fb      	strh	r3, [r7, #14]
 800d034:	e016      	b.n	800d064 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d036:	2300      	movs	r3, #0
 800d038:	81fb      	strh	r3, [r7, #14]
 800d03a:	e009      	b.n	800d050 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d03c:	89fb      	ldrh	r3, [r7, #14]
 800d03e:	4a0d      	ldr	r2, [pc, #52]	; (800d074 <ff_convert+0x74>)
 800d040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d044:	88fa      	ldrh	r2, [r7, #6]
 800d046:	429a      	cmp	r2, r3
 800d048:	d006      	beq.n	800d058 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d04a:	89fb      	ldrh	r3, [r7, #14]
 800d04c:	3301      	adds	r3, #1
 800d04e:	81fb      	strh	r3, [r7, #14]
 800d050:	89fb      	ldrh	r3, [r7, #14]
 800d052:	2b7f      	cmp	r3, #127	; 0x7f
 800d054:	d9f2      	bls.n	800d03c <ff_convert+0x3c>
 800d056:	e000      	b.n	800d05a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d058:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d05a:	89fb      	ldrh	r3, [r7, #14]
 800d05c:	3380      	adds	r3, #128	; 0x80
 800d05e:	b29b      	uxth	r3, r3
 800d060:	b2db      	uxtb	r3, r3
 800d062:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d064:	89fb      	ldrh	r3, [r7, #14]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	0800ed7c 	.word	0x0800ed7c

0800d078 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	4603      	mov	r3, r0
 800d080:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d082:	88fb      	ldrh	r3, [r7, #6]
 800d084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d088:	d201      	bcs.n	800d08e <ff_wtoupper+0x16>
 800d08a:	4b3e      	ldr	r3, [pc, #248]	; (800d184 <ff_wtoupper+0x10c>)
 800d08c:	e000      	b.n	800d090 <ff_wtoupper+0x18>
 800d08e:	4b3e      	ldr	r3, [pc, #248]	; (800d188 <ff_wtoupper+0x110>)
 800d090:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	1c9a      	adds	r2, r3, #2
 800d096:	617a      	str	r2, [r7, #20]
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d09c:	8a7b      	ldrh	r3, [r7, #18]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d068      	beq.n	800d174 <ff_wtoupper+0xfc>
 800d0a2:	88fa      	ldrh	r2, [r7, #6]
 800d0a4:	8a7b      	ldrh	r3, [r7, #18]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d364      	bcc.n	800d174 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	1c9a      	adds	r2, r3, #2
 800d0ae:	617a      	str	r2, [r7, #20]
 800d0b0:	881b      	ldrh	r3, [r3, #0]
 800d0b2:	823b      	strh	r3, [r7, #16]
 800d0b4:	8a3b      	ldrh	r3, [r7, #16]
 800d0b6:	0a1b      	lsrs	r3, r3, #8
 800d0b8:	81fb      	strh	r3, [r7, #14]
 800d0ba:	8a3b      	ldrh	r3, [r7, #16]
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d0c0:	88fa      	ldrh	r2, [r7, #6]
 800d0c2:	8a79      	ldrh	r1, [r7, #18]
 800d0c4:	8a3b      	ldrh	r3, [r7, #16]
 800d0c6:	440b      	add	r3, r1
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	da49      	bge.n	800d160 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d0cc:	89fb      	ldrh	r3, [r7, #14]
 800d0ce:	2b08      	cmp	r3, #8
 800d0d0:	d84f      	bhi.n	800d172 <ff_wtoupper+0xfa>
 800d0d2:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <ff_wtoupper+0x60>)
 800d0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d8:	0800d0fd 	.word	0x0800d0fd
 800d0dc:	0800d10f 	.word	0x0800d10f
 800d0e0:	0800d125 	.word	0x0800d125
 800d0e4:	0800d12d 	.word	0x0800d12d
 800d0e8:	0800d135 	.word	0x0800d135
 800d0ec:	0800d13d 	.word	0x0800d13d
 800d0f0:	0800d145 	.word	0x0800d145
 800d0f4:	0800d14d 	.word	0x0800d14d
 800d0f8:	0800d155 	.word	0x0800d155
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d0fc:	88fa      	ldrh	r2, [r7, #6]
 800d0fe:	8a7b      	ldrh	r3, [r7, #18]
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	4413      	add	r3, r2
 800d108:	881b      	ldrh	r3, [r3, #0]
 800d10a:	80fb      	strh	r3, [r7, #6]
 800d10c:	e027      	b.n	800d15e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d10e:	88fa      	ldrh	r2, [r7, #6]
 800d110:	8a7b      	ldrh	r3, [r7, #18]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	b29b      	uxth	r3, r3
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	88fa      	ldrh	r2, [r7, #6]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	80fb      	strh	r3, [r7, #6]
 800d122:	e01c      	b.n	800d15e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d124:	88fb      	ldrh	r3, [r7, #6]
 800d126:	3b10      	subs	r3, #16
 800d128:	80fb      	strh	r3, [r7, #6]
 800d12a:	e018      	b.n	800d15e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d12c:	88fb      	ldrh	r3, [r7, #6]
 800d12e:	3b20      	subs	r3, #32
 800d130:	80fb      	strh	r3, [r7, #6]
 800d132:	e014      	b.n	800d15e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	3b30      	subs	r3, #48	; 0x30
 800d138:	80fb      	strh	r3, [r7, #6]
 800d13a:	e010      	b.n	800d15e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d13c:	88fb      	ldrh	r3, [r7, #6]
 800d13e:	3b1a      	subs	r3, #26
 800d140:	80fb      	strh	r3, [r7, #6]
 800d142:	e00c      	b.n	800d15e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d144:	88fb      	ldrh	r3, [r7, #6]
 800d146:	3308      	adds	r3, #8
 800d148:	80fb      	strh	r3, [r7, #6]
 800d14a:	e008      	b.n	800d15e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d14c:	88fb      	ldrh	r3, [r7, #6]
 800d14e:	3b50      	subs	r3, #80	; 0x50
 800d150:	80fb      	strh	r3, [r7, #6]
 800d152:	e004      	b.n	800d15e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d154:	88fb      	ldrh	r3, [r7, #6]
 800d156:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d15a:	80fb      	strh	r3, [r7, #6]
 800d15c:	bf00      	nop
			}
			break;
 800d15e:	e008      	b.n	800d172 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d160:	89fb      	ldrh	r3, [r7, #14]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d195      	bne.n	800d092 <ff_wtoupper+0x1a>
 800d166:	8a3b      	ldrh	r3, [r7, #16]
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	697a      	ldr	r2, [r7, #20]
 800d16c:	4413      	add	r3, r2
 800d16e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d170:	e78f      	b.n	800d092 <ff_wtoupper+0x1a>
			break;
 800d172:	bf00      	nop
	}

	return chr;
 800d174:	88fb      	ldrh	r3, [r7, #6]
}
 800d176:	4618      	mov	r0, r3
 800d178:	371c      	adds	r7, #28
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	0800ee7c 	.word	0x0800ee7c
 800d188:	0800f070 	.word	0x0800f070

0800d18c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d190:	2200      	movs	r2, #0
 800d192:	4912      	ldr	r1, [pc, #72]	; (800d1dc <MX_USB_DEVICE_Init+0x50>)
 800d194:	4812      	ldr	r0, [pc, #72]	; (800d1e0 <MX_USB_DEVICE_Init+0x54>)
 800d196:	f7fb fe54 	bl	8008e42 <USBD_Init>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1a0:	f7f3 fb7b 	bl	800089a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800d1a4:	490f      	ldr	r1, [pc, #60]	; (800d1e4 <MX_USB_DEVICE_Init+0x58>)
 800d1a6:	480e      	ldr	r0, [pc, #56]	; (800d1e0 <MX_USB_DEVICE_Init+0x54>)
 800d1a8:	f7fb fe81 	bl	8008eae <USBD_RegisterClass>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d1b2:	f7f3 fb72 	bl	800089a <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800d1b6:	490c      	ldr	r1, [pc, #48]	; (800d1e8 <MX_USB_DEVICE_Init+0x5c>)
 800d1b8:	4809      	ldr	r0, [pc, #36]	; (800d1e0 <MX_USB_DEVICE_Init+0x54>)
 800d1ba:	f7fa fad3 	bl	8007764 <USBD_MSC_RegisterStorage>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d1c4:	f7f3 fb69 	bl	800089a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1c8:	4805      	ldr	r0, [pc, #20]	; (800d1e0 <MX_USB_DEVICE_Init+0x54>)
 800d1ca:	f7fb fe91 	bl	8008ef0 <USBD_Start>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d1d4:	f7f3 fb61 	bl	800089a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1d8:	bf00      	nop
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20000110 	.word	0x20000110
 800d1e0:	20002674 	.word	0x20002674
 800d1e4:	20000028 	.word	0x20000028
 800d1e8:	20000160 	.word	0x20000160

0800d1ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	6039      	str	r1, [r7, #0]
 800d1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2212      	movs	r2, #18
 800d1fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d1fe:	4b03      	ldr	r3, [pc, #12]	; (800d20c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	2000012c 	.word	0x2000012c

0800d210 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	6039      	str	r1, [r7, #0]
 800d21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	2204      	movs	r2, #4
 800d220:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d222:	4b03      	ldr	r3, [pc, #12]	; (800d230 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	20000140 	.word	0x20000140

0800d234 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	4603      	mov	r3, r0
 800d23c:	6039      	str	r1, [r7, #0]
 800d23e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d105      	bne.n	800d252 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	4907      	ldr	r1, [pc, #28]	; (800d268 <USBD_FS_ProductStrDescriptor+0x34>)
 800d24a:	4808      	ldr	r0, [pc, #32]	; (800d26c <USBD_FS_ProductStrDescriptor+0x38>)
 800d24c:	f7fc fe2c 	bl	8009ea8 <USBD_GetString>
 800d250:	e004      	b.n	800d25c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	4904      	ldr	r1, [pc, #16]	; (800d268 <USBD_FS_ProductStrDescriptor+0x34>)
 800d256:	4805      	ldr	r0, [pc, #20]	; (800d26c <USBD_FS_ProductStrDescriptor+0x38>)
 800d258:	f7fc fe26 	bl	8009ea8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d25c:	4b02      	ldr	r3, [pc, #8]	; (800d268 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	20002944 	.word	0x20002944
 800d26c:	0800ec7c 	.word	0x0800ec7c

0800d270 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	6039      	str	r1, [r7, #0]
 800d27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	4904      	ldr	r1, [pc, #16]	; (800d290 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d280:	4804      	ldr	r0, [pc, #16]	; (800d294 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d282:	f7fc fe11 	bl	8009ea8 <USBD_GetString>
  return USBD_StrDesc;
 800d286:	4b02      	ldr	r3, [pc, #8]	; (800d290 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	20002944 	.word	0x20002944
 800d294:	0800ec90 	.word	0x0800ec90

0800d298 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	6039      	str	r1, [r7, #0]
 800d2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	221a      	movs	r2, #26
 800d2a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2aa:	f000 f843 	bl	800d334 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2ae:	4b02      	ldr	r3, [pc, #8]	; (800d2b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20000144 	.word	0x20000144

0800d2bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	6039      	str	r1, [r7, #0]
 800d2c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2c8:	79fb      	ldrb	r3, [r7, #7]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d105      	bne.n	800d2da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2ce:	683a      	ldr	r2, [r7, #0]
 800d2d0:	4907      	ldr	r1, [pc, #28]	; (800d2f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2d2:	4808      	ldr	r0, [pc, #32]	; (800d2f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2d4:	f7fc fde8 	bl	8009ea8 <USBD_GetString>
 800d2d8:	e004      	b.n	800d2e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2da:	683a      	ldr	r2, [r7, #0]
 800d2dc:	4904      	ldr	r1, [pc, #16]	; (800d2f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2de:	4805      	ldr	r0, [pc, #20]	; (800d2f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2e0:	f7fc fde2 	bl	8009ea8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2e4:	4b02      	ldr	r3, [pc, #8]	; (800d2f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20002944 	.word	0x20002944
 800d2f4:	0800eca4 	.word	0x0800eca4

0800d2f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d30a:	683a      	ldr	r2, [r7, #0]
 800d30c:	4907      	ldr	r1, [pc, #28]	; (800d32c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d30e:	4808      	ldr	r0, [pc, #32]	; (800d330 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d310:	f7fc fdca 	bl	8009ea8 <USBD_GetString>
 800d314:	e004      	b.n	800d320 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	4904      	ldr	r1, [pc, #16]	; (800d32c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d31a:	4805      	ldr	r0, [pc, #20]	; (800d330 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d31c:	f7fc fdc4 	bl	8009ea8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d320:	4b02      	ldr	r3, [pc, #8]	; (800d32c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d322:	4618      	mov	r0, r3
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20002944 	.word	0x20002944
 800d330:	0800ecb0 	.word	0x0800ecb0

0800d334 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d33a:	4b0f      	ldr	r3, [pc, #60]	; (800d378 <Get_SerialNum+0x44>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d340:	4b0e      	ldr	r3, [pc, #56]	; (800d37c <Get_SerialNum+0x48>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d346:	4b0e      	ldr	r3, [pc, #56]	; (800d380 <Get_SerialNum+0x4c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4413      	add	r3, r2
 800d352:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d009      	beq.n	800d36e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d35a:	2208      	movs	r2, #8
 800d35c:	4909      	ldr	r1, [pc, #36]	; (800d384 <Get_SerialNum+0x50>)
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f000 f814 	bl	800d38c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d364:	2204      	movs	r2, #4
 800d366:	4908      	ldr	r1, [pc, #32]	; (800d388 <Get_SerialNum+0x54>)
 800d368:	68b8      	ldr	r0, [r7, #8]
 800d36a:	f000 f80f 	bl	800d38c <IntToUnicode>
  }
}
 800d36e:	bf00      	nop
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	1fff7a10 	.word	0x1fff7a10
 800d37c:	1fff7a14 	.word	0x1fff7a14
 800d380:	1fff7a18 	.word	0x1fff7a18
 800d384:	20000146 	.word	0x20000146
 800d388:	20000156 	.word	0x20000156

0800d38c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d39e:	2300      	movs	r3, #0
 800d3a0:	75fb      	strb	r3, [r7, #23]
 800d3a2:	e027      	b.n	800d3f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	0f1b      	lsrs	r3, r3, #28
 800d3a8:	2b09      	cmp	r3, #9
 800d3aa:	d80b      	bhi.n	800d3c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	0f1b      	lsrs	r3, r3, #28
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	005b      	lsls	r3, r3, #1
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3230      	adds	r2, #48	; 0x30
 800d3be:	b2d2      	uxtb	r2, r2
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	e00a      	b.n	800d3da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	0f1b      	lsrs	r3, r3, #28
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	005b      	lsls	r3, r3, #1
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	3237      	adds	r2, #55	; 0x37
 800d3d6:	b2d2      	uxtb	r2, r2
 800d3d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	005b      	lsls	r3, r3, #1
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d3ee:	7dfb      	ldrb	r3, [r7, #23]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	75fb      	strb	r3, [r7, #23]
 800d3f4:	7dfa      	ldrb	r2, [r7, #23]
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d3d3      	bcc.n	800d3a4 <IntToUnicode+0x18>
  }
}
 800d3fc:	bf00      	nop
 800d3fe:	bf00      	nop
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	4603      	mov	r3, r0
 800d412:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800d414:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
	...

0800d424 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08e      	sub	sp, #56	; 0x38
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;
 800d432:	23ff      	movs	r3, #255	; 0xff
 800d434:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  HAL_SD_GetCardInfo(&hsd, &info);
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	4619      	mov	r1, r3
 800d43e:	480a      	ldr	r0, [pc, #40]	; (800d468 <STORAGE_GetCapacity_FS+0x44>)
 800d440:	f7f7 f8da 	bl	80045f8 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr  - 1;
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	1e5a      	subs	r2, r3, #1
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	b29a      	uxth	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	801a      	strh	r2, [r3, #0]
  ret = 0;
 800d454:	2300      	movs	r3, #0
 800d456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  return ret;
 800d45a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3738      	adds	r7, #56	; 0x38
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20000578 	.word	0x20000578

0800d46c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d476:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d478:	4618      	mov	r0, r3
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4603      	mov	r3, r0
 800d48c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d48e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d490:	4618      	mov	r0, r3
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af02      	add	r7, sp, #8
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73fb      	strb	r3, [r7, #15]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

   int8_t ret = -1;
 800d4b0:	23ff      	movs	r3, #255	; 0xff
 800d4b2:	75fb      	strb	r3, [r7, #23]

  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800d4b4:	89bb      	ldrh	r3, [r7, #12]
 800d4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ba:	9200      	str	r2, [sp, #0]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	68b9      	ldr	r1, [r7, #8]
 800d4c0:	4808      	ldr	r0, [pc, #32]	; (800d4e4 <STORAGE_Read_FS+0x48>)
 800d4c2:	f7f6 f975 	bl	80037b0 <HAL_SD_ReadBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 800d4c6:	bf00      	nop
 800d4c8:	4806      	ldr	r0, [pc, #24]	; (800d4e4 <STORAGE_Read_FS+0x48>)
 800d4ca:	f7f7 f93d 	bl	8004748 <HAL_SD_GetCardState>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b04      	cmp	r3, #4
 800d4d2:	d1f9      	bne.n	800d4c8 <STORAGE_Read_FS+0x2c>
  ret = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	75fb      	strb	r3, [r7, #23]
  return ret;
 800d4d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	20000578 	.word	0x20000578

0800d4e8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af02      	add	r7, sp, #8
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	73fb      	strb	r3, [r7, #15]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  int8_t ret = -1;
 800d4fc:	23ff      	movs	r3, #255	; 0xff
 800d4fe:	75fb      	strb	r3, [r7, #23]

   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800d500:	89bb      	ldrh	r3, [r7, #12]
 800d502:	f04f 32ff 	mov.w	r2, #4294967295
 800d506:	9200      	str	r2, [sp, #0]
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	4808      	ldr	r0, [pc, #32]	; (800d530 <STORAGE_Write_FS+0x48>)
 800d50e:	f7f6 fb49 	bl	8003ba4 <HAL_SD_WriteBlocks>


  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 800d512:	bf00      	nop
 800d514:	4806      	ldr	r0, [pc, #24]	; (800d530 <STORAGE_Write_FS+0x48>)
 800d516:	f7f7 f917 	bl	8004748 <HAL_SD_GetCardState>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b04      	cmp	r3, #4
 800d51e:	d1f9      	bne.n	800d514 <STORAGE_Write_FS+0x2c>
  ret = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	75fb      	strb	r3, [r7, #23]
  return ret;
 800d524:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3718      	adds	r7, #24
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	20000578 	.word	0x20000578

0800d534 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800d538:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	; 0x28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d54c:	f107 0314 	add.w	r3, r7, #20
 800d550:	2200      	movs	r2, #0
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	605a      	str	r2, [r3, #4]
 800d556:	609a      	str	r2, [r3, #8]
 800d558:	60da      	str	r2, [r3, #12]
 800d55a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d564:	d13a      	bne.n	800d5dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d566:	2300      	movs	r3, #0
 800d568:	613b      	str	r3, [r7, #16]
 800d56a:	4b1e      	ldr	r3, [pc, #120]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56e:	4a1d      	ldr	r2, [pc, #116]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d570:	f043 0301 	orr.w	r3, r3, #1
 800d574:	6313      	str	r3, [r2, #48]	; 0x30
 800d576:	4b1b      	ldr	r3, [pc, #108]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	613b      	str	r3, [r7, #16]
 800d580:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d582:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d588:	2302      	movs	r3, #2
 800d58a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d58c:	2300      	movs	r3, #0
 800d58e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d590:	2303      	movs	r3, #3
 800d592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d594:	230a      	movs	r3, #10
 800d596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d598:	f107 0314 	add.w	r3, r7, #20
 800d59c:	4619      	mov	r1, r3
 800d59e:	4812      	ldr	r0, [pc, #72]	; (800d5e8 <HAL_PCD_MspInit+0xa4>)
 800d5a0:	f7f4 f8e6 	bl	8001770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d5a4:	4b0f      	ldr	r3, [pc, #60]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a8:	4a0e      	ldr	r2, [pc, #56]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d5aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ae:	6353      	str	r3, [r2, #52]	; 0x34
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	4b0b      	ldr	r3, [pc, #44]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5b8:	4a0a      	ldr	r2, [pc, #40]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d5ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5be:	6453      	str	r3, [r2, #68]	; 0x44
 800d5c0:	4b08      	ldr	r3, [pc, #32]	; (800d5e4 <HAL_PCD_MspInit+0xa0>)
 800d5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	2043      	movs	r0, #67	; 0x43
 800d5d2:	f7f3 fd1a 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5d6:	2043      	movs	r0, #67	; 0x43
 800d5d8:	f7f3 fd33 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5dc:	bf00      	nop
 800d5de:	3728      	adds	r7, #40	; 0x28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	40023800 	.word	0x40023800
 800d5e8:	40020000 	.word	0x40020000

0800d5ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d600:	4619      	mov	r1, r3
 800d602:	4610      	mov	r0, r2
 800d604:	f7fb fcbf 	bl	8008f86 <USBD_LL_SetupStage>
}
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	460b      	mov	r3, r1
 800d61a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d622:	78fa      	ldrb	r2, [r7, #3]
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	4613      	mov	r3, r2
 800d628:	00db      	lsls	r3, r3, #3
 800d62a:	1a9b      	subs	r3, r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	440b      	add	r3, r1
 800d630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	78fb      	ldrb	r3, [r7, #3]
 800d638:	4619      	mov	r1, r3
 800d63a:	f7fb fcf9 	bl	8009030 <USBD_LL_DataOutStage>
}
 800d63e:	bf00      	nop
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b082      	sub	sp, #8
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	460b      	mov	r3, r1
 800d650:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d658:	78fa      	ldrb	r2, [r7, #3]
 800d65a:	6879      	ldr	r1, [r7, #4]
 800d65c:	4613      	mov	r3, r2
 800d65e:	00db      	lsls	r3, r3, #3
 800d660:	1a9b      	subs	r3, r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	440b      	add	r3, r1
 800d666:	3348      	adds	r3, #72	; 0x48
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	78fb      	ldrb	r3, [r7, #3]
 800d66c:	4619      	mov	r1, r3
 800d66e:	f7fb fd42 	bl	80090f6 <USBD_LL_DataInStage>
}
 800d672:	bf00      	nop
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d688:	4618      	mov	r0, r3
 800d68a:	f7fb fe46 	bl	800931a <USBD_LL_SOF>
}
 800d68e:	bf00      	nop
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b084      	sub	sp, #16
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d102      	bne.n	800d6b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	73fb      	strb	r3, [r7, #15]
 800d6ae:	e008      	b.n	800d6c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d102      	bne.n	800d6be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	73fb      	strb	r3, [r7, #15]
 800d6bc:	e001      	b.n	800d6c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d6be:	f7f3 f8ec 	bl	800089a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6c8:	7bfa      	ldrb	r2, [r7, #15]
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fb fde9 	bl	80092a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fb fda2 	bl	8009222 <USBD_LL_Reset>
}
 800d6de:	bf00      	nop
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fb fde4 	bl	80092c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	6812      	ldr	r2, [r2, #0]
 800d70a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d70e:	f043 0301 	orr.w	r3, r3, #1
 800d712:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a1b      	ldr	r3, [r3, #32]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d005      	beq.n	800d728 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d71c:	4b04      	ldr	r3, [pc, #16]	; (800d730 <HAL_PCD_SuspendCallback+0x48>)
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	4a03      	ldr	r2, [pc, #12]	; (800d730 <HAL_PCD_SuspendCallback+0x48>)
 800d722:	f043 0306 	orr.w	r3, r3, #6
 800d726:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d728:	bf00      	nop
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	e000ed00 	.word	0xe000ed00

0800d734 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d742:	4618      	mov	r0, r3
 800d744:	f7fb fdd3 	bl	80092ee <USBD_LL_Resume>
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	460b      	mov	r3, r1
 800d75a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d762:	78fa      	ldrb	r2, [r7, #3]
 800d764:	4611      	mov	r1, r2
 800d766:	4618      	mov	r0, r3
 800d768:	f7fb fdfe 	bl	8009368 <USBD_LL_IsoOUTIncomplete>
}
 800d76c:	bf00      	nop
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	460b      	mov	r3, r1
 800d77e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d786:	78fa      	ldrb	r2, [r7, #3]
 800d788:	4611      	mov	r1, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fb fddf 	bl	800934e <USBD_LL_IsoINIncomplete>
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fb fdeb 	bl	8009382 <USBD_LL_DevConnected>
}
 800d7ac:	bf00      	nop
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fb fde8 	bl	8009398 <USBD_LL_DevDisconnected>
}
 800d7c8:	bf00      	nop
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d13c      	bne.n	800d85a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d7e0:	4a20      	ldr	r2, [pc, #128]	; (800d864 <USBD_LL_Init+0x94>)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a1e      	ldr	r2, [pc, #120]	; (800d864 <USBD_LL_Init+0x94>)
 800d7ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7f0:	4b1c      	ldr	r3, [pc, #112]	; (800d864 <USBD_LL_Init+0x94>)
 800d7f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d7f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d7f8:	4b1a      	ldr	r3, [pc, #104]	; (800d864 <USBD_LL_Init+0x94>)
 800d7fa:	2204      	movs	r2, #4
 800d7fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d7fe:	4b19      	ldr	r3, [pc, #100]	; (800d864 <USBD_LL_Init+0x94>)
 800d800:	2202      	movs	r2, #2
 800d802:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d804:	4b17      	ldr	r3, [pc, #92]	; (800d864 <USBD_LL_Init+0x94>)
 800d806:	2200      	movs	r2, #0
 800d808:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d80a:	4b16      	ldr	r3, [pc, #88]	; (800d864 <USBD_LL_Init+0x94>)
 800d80c:	2202      	movs	r2, #2
 800d80e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d810:	4b14      	ldr	r3, [pc, #80]	; (800d864 <USBD_LL_Init+0x94>)
 800d812:	2200      	movs	r2, #0
 800d814:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d816:	4b13      	ldr	r3, [pc, #76]	; (800d864 <USBD_LL_Init+0x94>)
 800d818:	2200      	movs	r2, #0
 800d81a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d81c:	4b11      	ldr	r3, [pc, #68]	; (800d864 <USBD_LL_Init+0x94>)
 800d81e:	2200      	movs	r2, #0
 800d820:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d822:	4b10      	ldr	r3, [pc, #64]	; (800d864 <USBD_LL_Init+0x94>)
 800d824:	2200      	movs	r2, #0
 800d826:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d828:	4b0e      	ldr	r3, [pc, #56]	; (800d864 <USBD_LL_Init+0x94>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d82e:	480d      	ldr	r0, [pc, #52]	; (800d864 <USBD_LL_Init+0x94>)
 800d830:	f7f4 f93a 	bl	8001aa8 <HAL_PCD_Init>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d83a:	f7f3 f82e 	bl	800089a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d83e:	2180      	movs	r1, #128	; 0x80
 800d840:	4808      	ldr	r0, [pc, #32]	; (800d864 <USBD_LL_Init+0x94>)
 800d842:	f7f5 fac4 	bl	8002dce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d846:	2240      	movs	r2, #64	; 0x40
 800d848:	2100      	movs	r1, #0
 800d84a:	4806      	ldr	r0, [pc, #24]	; (800d864 <USBD_LL_Init+0x94>)
 800d84c:	f7f5 fa78 	bl	8002d40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d850:	2280      	movs	r2, #128	; 0x80
 800d852:	2101      	movs	r1, #1
 800d854:	4803      	ldr	r0, [pc, #12]	; (800d864 <USBD_LL_Init+0x94>)
 800d856:	f7f5 fa73 	bl	8002d40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20002b44 	.word	0x20002b44

0800d868 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d87e:	4618      	mov	r0, r3
 800d880:	f7f4 fa2f 	bl	8001ce2 <HAL_PCD_Start>
 800d884:	4603      	mov	r3, r0
 800d886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 f94a 	bl	800db24 <USBD_Get_USB_Status>
 800d890:	4603      	mov	r3, r0
 800d892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d894:	7bbb      	ldrb	r3, [r7, #14]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b084      	sub	sp, #16
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
 800d8a6:	4608      	mov	r0, r1
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	70fb      	strb	r3, [r7, #3]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70bb      	strb	r3, [r7, #2]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8c6:	78bb      	ldrb	r3, [r7, #2]
 800d8c8:	883a      	ldrh	r2, [r7, #0]
 800d8ca:	78f9      	ldrb	r1, [r7, #3]
 800d8cc:	f7f4 fe13 	bl	80024f6 <HAL_PCD_EP_Open>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 f924 	bl	800db24 <USBD_Get_USB_Status>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b084      	sub	sp, #16
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d904:	78fa      	ldrb	r2, [r7, #3]
 800d906:	4611      	mov	r1, r2
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f4 fe5c 	bl	80025c6 <HAL_PCD_EP_Close>
 800d90e:	4603      	mov	r3, r0
 800d910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d912:	7bfb      	ldrb	r3, [r7, #15]
 800d914:	4618      	mov	r0, r3
 800d916:	f000 f905 	bl	800db24 <USBD_Get_USB_Status>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d938:	2300      	movs	r3, #0
 800d93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d942:	78fa      	ldrb	r2, [r7, #3]
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7f4 ffee 	bl	8002928 <HAL_PCD_EP_Flush>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	4618      	mov	r0, r3
 800d954:	f000 f8e6 	bl	800db24 <USBD_Get_USB_Status>
 800d958:	4603      	mov	r3, r0
 800d95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b084      	sub	sp, #16
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	460b      	mov	r3, r1
 800d970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d980:	78fa      	ldrb	r2, [r7, #3]
 800d982:	4611      	mov	r1, r2
 800d984:	4618      	mov	r0, r3
 800d986:	f7f4 ff15 	bl	80027b4 <HAL_PCD_EP_SetStall>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
 800d990:	4618      	mov	r0, r3
 800d992:	f000 f8c7 	bl	800db24 <USBD_Get_USB_Status>
 800d996:	4603      	mov	r3, r0
 800d998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9be:	78fa      	ldrb	r2, [r7, #3]
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7f4 ff5a 	bl	800287c <HAL_PCD_EP_ClrStall>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 f8a8 	bl	800db24 <USBD_Get_USB_Status>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9e2:	b480      	push	{r7}
 800d9e4:	b085      	sub	sp, #20
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9f4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	da0b      	bge.n	800da16 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9fe:	78fb      	ldrb	r3, [r7, #3]
 800da00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da04:	68f9      	ldr	r1, [r7, #12]
 800da06:	4613      	mov	r3, r2
 800da08:	00db      	lsls	r3, r3, #3
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	440b      	add	r3, r1
 800da10:	333e      	adds	r3, #62	; 0x3e
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	e00b      	b.n	800da2e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da16:	78fb      	ldrb	r3, [r7, #3]
 800da18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da1c:	68f9      	ldr	r1, [r7, #12]
 800da1e:	4613      	mov	r3, r2
 800da20:	00db      	lsls	r3, r3, #3
 800da22:	1a9b      	subs	r3, r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	440b      	add	r3, r1
 800da28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b084      	sub	sp, #16
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	460b      	mov	r3, r1
 800da44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da54:	78fa      	ldrb	r2, [r7, #3]
 800da56:	4611      	mov	r1, r2
 800da58:	4618      	mov	r0, r3
 800da5a:	f7f4 fd27 	bl	80024ac <HAL_PCD_SetAddress>
 800da5e:	4603      	mov	r3, r0
 800da60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	4618      	mov	r0, r3
 800da66:	f000 f85d 	bl	800db24 <USBD_Get_USB_Status>
 800da6a:	4603      	mov	r3, r0
 800da6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	607a      	str	r2, [r7, #4]
 800da82:	603b      	str	r3, [r7, #0]
 800da84:	460b      	mov	r3, r1
 800da86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da8c:	2300      	movs	r3, #0
 800da8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da96:	7af9      	ldrb	r1, [r7, #11]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	f7f4 fe40 	bl	8002720 <HAL_PCD_EP_Transmit>
 800daa0:	4603      	mov	r3, r0
 800daa2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daa4:	7dfb      	ldrb	r3, [r7, #23]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 f83c 	bl	800db24 <USBD_Get_USB_Status>
 800daac:	4603      	mov	r3, r0
 800daae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dab0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b086      	sub	sp, #24
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
 800dac6:	460b      	mov	r3, r1
 800dac8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daca:	2300      	movs	r3, #0
 800dacc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dad8:	7af9      	ldrb	r1, [r7, #11]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	f7f4 fdbc 	bl	800265a <HAL_PCD_EP_Receive>
 800dae2:	4603      	mov	r3, r0
 800dae4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 f81b 	bl	800db24 <USBD_Get_USB_Status>
 800daee:	4603      	mov	r3, r0
 800daf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3718      	adds	r7, #24
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db0e:	78fa      	ldrb	r2, [r7, #3]
 800db10:	4611      	mov	r1, r2
 800db12:	4618      	mov	r0, r3
 800db14:	f7f4 fdec 	bl	80026f0 <HAL_PCD_EP_GetRxCount>
 800db18:	4603      	mov	r3, r0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db32:	79fb      	ldrb	r3, [r7, #7]
 800db34:	2b03      	cmp	r3, #3
 800db36:	d817      	bhi.n	800db68 <USBD_Get_USB_Status+0x44>
 800db38:	a201      	add	r2, pc, #4	; (adr r2, 800db40 <USBD_Get_USB_Status+0x1c>)
 800db3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3e:	bf00      	nop
 800db40:	0800db51 	.word	0x0800db51
 800db44:	0800db57 	.word	0x0800db57
 800db48:	0800db5d 	.word	0x0800db5d
 800db4c:	0800db63 	.word	0x0800db63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	73fb      	strb	r3, [r7, #15]
    break;
 800db54:	e00b      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db56:	2303      	movs	r3, #3
 800db58:	73fb      	strb	r3, [r7, #15]
    break;
 800db5a:	e008      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db5c:	2301      	movs	r3, #1
 800db5e:	73fb      	strb	r3, [r7, #15]
    break;
 800db60:	e005      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db62:	2303      	movs	r3, #3
 800db64:	73fb      	strb	r3, [r7, #15]
    break;
 800db66:	e002      	b.n	800db6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db68:	2303      	movs	r3, #3
 800db6a:	73fb      	strb	r3, [r7, #15]
    break;
 800db6c:	bf00      	nop
  }
  return usb_status;
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3714      	adds	r7, #20
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <__errno>:
 800db7c:	4b01      	ldr	r3, [pc, #4]	; (800db84 <__errno+0x8>)
 800db7e:	6818      	ldr	r0, [r3, #0]
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	20000180 	.word	0x20000180

0800db88 <__libc_init_array>:
 800db88:	b570      	push	{r4, r5, r6, lr}
 800db8a:	4d0d      	ldr	r5, [pc, #52]	; (800dbc0 <__libc_init_array+0x38>)
 800db8c:	4c0d      	ldr	r4, [pc, #52]	; (800dbc4 <__libc_init_array+0x3c>)
 800db8e:	1b64      	subs	r4, r4, r5
 800db90:	10a4      	asrs	r4, r4, #2
 800db92:	2600      	movs	r6, #0
 800db94:	42a6      	cmp	r6, r4
 800db96:	d109      	bne.n	800dbac <__libc_init_array+0x24>
 800db98:	4d0b      	ldr	r5, [pc, #44]	; (800dbc8 <__libc_init_array+0x40>)
 800db9a:	4c0c      	ldr	r4, [pc, #48]	; (800dbcc <__libc_init_array+0x44>)
 800db9c:	f000 fffc 	bl	800eb98 <_init>
 800dba0:	1b64      	subs	r4, r4, r5
 800dba2:	10a4      	asrs	r4, r4, #2
 800dba4:	2600      	movs	r6, #0
 800dba6:	42a6      	cmp	r6, r4
 800dba8:	d105      	bne.n	800dbb6 <__libc_init_array+0x2e>
 800dbaa:	bd70      	pop	{r4, r5, r6, pc}
 800dbac:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbb0:	4798      	blx	r3
 800dbb2:	3601      	adds	r6, #1
 800dbb4:	e7ee      	b.n	800db94 <__libc_init_array+0xc>
 800dbb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbba:	4798      	blx	r3
 800dbbc:	3601      	adds	r6, #1
 800dbbe:	e7f2      	b.n	800dba6 <__libc_init_array+0x1e>
 800dbc0:	0800f1f0 	.word	0x0800f1f0
 800dbc4:	0800f1f0 	.word	0x0800f1f0
 800dbc8:	0800f1f0 	.word	0x0800f1f0
 800dbcc:	0800f1f4 	.word	0x0800f1f4

0800dbd0 <malloc>:
 800dbd0:	4b02      	ldr	r3, [pc, #8]	; (800dbdc <malloc+0xc>)
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	f000 b863 	b.w	800dca0 <_malloc_r>
 800dbda:	bf00      	nop
 800dbdc:	20000180 	.word	0x20000180

0800dbe0 <free>:
 800dbe0:	4b02      	ldr	r3, [pc, #8]	; (800dbec <free+0xc>)
 800dbe2:	4601      	mov	r1, r0
 800dbe4:	6818      	ldr	r0, [r3, #0]
 800dbe6:	f000 b80b 	b.w	800dc00 <_free_r>
 800dbea:	bf00      	nop
 800dbec:	20000180 	.word	0x20000180

0800dbf0 <memset>:
 800dbf0:	4402      	add	r2, r0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d100      	bne.n	800dbfa <memset+0xa>
 800dbf8:	4770      	bx	lr
 800dbfa:	f803 1b01 	strb.w	r1, [r3], #1
 800dbfe:	e7f9      	b.n	800dbf4 <memset+0x4>

0800dc00 <_free_r>:
 800dc00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d048      	beq.n	800dc98 <_free_r+0x98>
 800dc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc0a:	9001      	str	r0, [sp, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f1a1 0404 	sub.w	r4, r1, #4
 800dc12:	bfb8      	it	lt
 800dc14:	18e4      	addlt	r4, r4, r3
 800dc16:	f000 fc19 	bl	800e44c <__malloc_lock>
 800dc1a:	4a20      	ldr	r2, [pc, #128]	; (800dc9c <_free_r+0x9c>)
 800dc1c:	9801      	ldr	r0, [sp, #4]
 800dc1e:	6813      	ldr	r3, [r2, #0]
 800dc20:	4615      	mov	r5, r2
 800dc22:	b933      	cbnz	r3, 800dc32 <_free_r+0x32>
 800dc24:	6063      	str	r3, [r4, #4]
 800dc26:	6014      	str	r4, [r2, #0]
 800dc28:	b003      	add	sp, #12
 800dc2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc2e:	f000 bc13 	b.w	800e458 <__malloc_unlock>
 800dc32:	42a3      	cmp	r3, r4
 800dc34:	d90b      	bls.n	800dc4e <_free_r+0x4e>
 800dc36:	6821      	ldr	r1, [r4, #0]
 800dc38:	1862      	adds	r2, r4, r1
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	bf04      	itt	eq
 800dc3e:	681a      	ldreq	r2, [r3, #0]
 800dc40:	685b      	ldreq	r3, [r3, #4]
 800dc42:	6063      	str	r3, [r4, #4]
 800dc44:	bf04      	itt	eq
 800dc46:	1852      	addeq	r2, r2, r1
 800dc48:	6022      	streq	r2, [r4, #0]
 800dc4a:	602c      	str	r4, [r5, #0]
 800dc4c:	e7ec      	b.n	800dc28 <_free_r+0x28>
 800dc4e:	461a      	mov	r2, r3
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	b10b      	cbz	r3, 800dc58 <_free_r+0x58>
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	d9fa      	bls.n	800dc4e <_free_r+0x4e>
 800dc58:	6811      	ldr	r1, [r2, #0]
 800dc5a:	1855      	adds	r5, r2, r1
 800dc5c:	42a5      	cmp	r5, r4
 800dc5e:	d10b      	bne.n	800dc78 <_free_r+0x78>
 800dc60:	6824      	ldr	r4, [r4, #0]
 800dc62:	4421      	add	r1, r4
 800dc64:	1854      	adds	r4, r2, r1
 800dc66:	42a3      	cmp	r3, r4
 800dc68:	6011      	str	r1, [r2, #0]
 800dc6a:	d1dd      	bne.n	800dc28 <_free_r+0x28>
 800dc6c:	681c      	ldr	r4, [r3, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	6053      	str	r3, [r2, #4]
 800dc72:	4421      	add	r1, r4
 800dc74:	6011      	str	r1, [r2, #0]
 800dc76:	e7d7      	b.n	800dc28 <_free_r+0x28>
 800dc78:	d902      	bls.n	800dc80 <_free_r+0x80>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	e7d3      	b.n	800dc28 <_free_r+0x28>
 800dc80:	6825      	ldr	r5, [r4, #0]
 800dc82:	1961      	adds	r1, r4, r5
 800dc84:	428b      	cmp	r3, r1
 800dc86:	bf04      	itt	eq
 800dc88:	6819      	ldreq	r1, [r3, #0]
 800dc8a:	685b      	ldreq	r3, [r3, #4]
 800dc8c:	6063      	str	r3, [r4, #4]
 800dc8e:	bf04      	itt	eq
 800dc90:	1949      	addeq	r1, r1, r5
 800dc92:	6021      	streq	r1, [r4, #0]
 800dc94:	6054      	str	r4, [r2, #4]
 800dc96:	e7c7      	b.n	800dc28 <_free_r+0x28>
 800dc98:	b003      	add	sp, #12
 800dc9a:	bd30      	pop	{r4, r5, pc}
 800dc9c:	20000444 	.word	0x20000444

0800dca0 <_malloc_r>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	1ccd      	adds	r5, r1, #3
 800dca4:	f025 0503 	bic.w	r5, r5, #3
 800dca8:	3508      	adds	r5, #8
 800dcaa:	2d0c      	cmp	r5, #12
 800dcac:	bf38      	it	cc
 800dcae:	250c      	movcc	r5, #12
 800dcb0:	2d00      	cmp	r5, #0
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	db01      	blt.n	800dcba <_malloc_r+0x1a>
 800dcb6:	42a9      	cmp	r1, r5
 800dcb8:	d903      	bls.n	800dcc2 <_malloc_r+0x22>
 800dcba:	230c      	movs	r3, #12
 800dcbc:	6033      	str	r3, [r6, #0]
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcc2:	f000 fbc3 	bl	800e44c <__malloc_lock>
 800dcc6:	4921      	ldr	r1, [pc, #132]	; (800dd4c <_malloc_r+0xac>)
 800dcc8:	680a      	ldr	r2, [r1, #0]
 800dcca:	4614      	mov	r4, r2
 800dccc:	b99c      	cbnz	r4, 800dcf6 <_malloc_r+0x56>
 800dcce:	4f20      	ldr	r7, [pc, #128]	; (800dd50 <_malloc_r+0xb0>)
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	b923      	cbnz	r3, 800dcde <_malloc_r+0x3e>
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f000 f8ca 	bl	800de70 <_sbrk_r>
 800dcdc:	6038      	str	r0, [r7, #0]
 800dcde:	4629      	mov	r1, r5
 800dce0:	4630      	mov	r0, r6
 800dce2:	f000 f8c5 	bl	800de70 <_sbrk_r>
 800dce6:	1c43      	adds	r3, r0, #1
 800dce8:	d123      	bne.n	800dd32 <_malloc_r+0x92>
 800dcea:	230c      	movs	r3, #12
 800dcec:	6033      	str	r3, [r6, #0]
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f000 fbb2 	bl	800e458 <__malloc_unlock>
 800dcf4:	e7e3      	b.n	800dcbe <_malloc_r+0x1e>
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	1b5b      	subs	r3, r3, r5
 800dcfa:	d417      	bmi.n	800dd2c <_malloc_r+0x8c>
 800dcfc:	2b0b      	cmp	r3, #11
 800dcfe:	d903      	bls.n	800dd08 <_malloc_r+0x68>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	441c      	add	r4, r3
 800dd04:	6025      	str	r5, [r4, #0]
 800dd06:	e004      	b.n	800dd12 <_malloc_r+0x72>
 800dd08:	6863      	ldr	r3, [r4, #4]
 800dd0a:	42a2      	cmp	r2, r4
 800dd0c:	bf0c      	ite	eq
 800dd0e:	600b      	streq	r3, [r1, #0]
 800dd10:	6053      	strne	r3, [r2, #4]
 800dd12:	4630      	mov	r0, r6
 800dd14:	f000 fba0 	bl	800e458 <__malloc_unlock>
 800dd18:	f104 000b 	add.w	r0, r4, #11
 800dd1c:	1d23      	adds	r3, r4, #4
 800dd1e:	f020 0007 	bic.w	r0, r0, #7
 800dd22:	1ac2      	subs	r2, r0, r3
 800dd24:	d0cc      	beq.n	800dcc0 <_malloc_r+0x20>
 800dd26:	1a1b      	subs	r3, r3, r0
 800dd28:	50a3      	str	r3, [r4, r2]
 800dd2a:	e7c9      	b.n	800dcc0 <_malloc_r+0x20>
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	6864      	ldr	r4, [r4, #4]
 800dd30:	e7cc      	b.n	800dccc <_malloc_r+0x2c>
 800dd32:	1cc4      	adds	r4, r0, #3
 800dd34:	f024 0403 	bic.w	r4, r4, #3
 800dd38:	42a0      	cmp	r0, r4
 800dd3a:	d0e3      	beq.n	800dd04 <_malloc_r+0x64>
 800dd3c:	1a21      	subs	r1, r4, r0
 800dd3e:	4630      	mov	r0, r6
 800dd40:	f000 f896 	bl	800de70 <_sbrk_r>
 800dd44:	3001      	adds	r0, #1
 800dd46:	d1dd      	bne.n	800dd04 <_malloc_r+0x64>
 800dd48:	e7cf      	b.n	800dcea <_malloc_r+0x4a>
 800dd4a:	bf00      	nop
 800dd4c:	20000444 	.word	0x20000444
 800dd50:	20000448 	.word	0x20000448

0800dd54 <iprintf>:
 800dd54:	b40f      	push	{r0, r1, r2, r3}
 800dd56:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <iprintf+0x2c>)
 800dd58:	b513      	push	{r0, r1, r4, lr}
 800dd5a:	681c      	ldr	r4, [r3, #0]
 800dd5c:	b124      	cbz	r4, 800dd68 <iprintf+0x14>
 800dd5e:	69a3      	ldr	r3, [r4, #24]
 800dd60:	b913      	cbnz	r3, 800dd68 <iprintf+0x14>
 800dd62:	4620      	mov	r0, r4
 800dd64:	f000 fa6e 	bl	800e244 <__sinit>
 800dd68:	ab05      	add	r3, sp, #20
 800dd6a:	9a04      	ldr	r2, [sp, #16]
 800dd6c:	68a1      	ldr	r1, [r4, #8]
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	4620      	mov	r0, r4
 800dd72:	f000 fba1 	bl	800e4b8 <_vfiprintf_r>
 800dd76:	b002      	add	sp, #8
 800dd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd7c:	b004      	add	sp, #16
 800dd7e:	4770      	bx	lr
 800dd80:	20000180 	.word	0x20000180

0800dd84 <_puts_r>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	460e      	mov	r6, r1
 800dd88:	4605      	mov	r5, r0
 800dd8a:	b118      	cbz	r0, 800dd94 <_puts_r+0x10>
 800dd8c:	6983      	ldr	r3, [r0, #24]
 800dd8e:	b90b      	cbnz	r3, 800dd94 <_puts_r+0x10>
 800dd90:	f000 fa58 	bl	800e244 <__sinit>
 800dd94:	69ab      	ldr	r3, [r5, #24]
 800dd96:	68ac      	ldr	r4, [r5, #8]
 800dd98:	b913      	cbnz	r3, 800dda0 <_puts_r+0x1c>
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	f000 fa52 	bl	800e244 <__sinit>
 800dda0:	4b2c      	ldr	r3, [pc, #176]	; (800de54 <_puts_r+0xd0>)
 800dda2:	429c      	cmp	r4, r3
 800dda4:	d120      	bne.n	800dde8 <_puts_r+0x64>
 800dda6:	686c      	ldr	r4, [r5, #4]
 800dda8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddaa:	07db      	lsls	r3, r3, #31
 800ddac:	d405      	bmi.n	800ddba <_puts_r+0x36>
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	0598      	lsls	r0, r3, #22
 800ddb2:	d402      	bmi.n	800ddba <_puts_r+0x36>
 800ddb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddb6:	f000 fae3 	bl	800e380 <__retarget_lock_acquire_recursive>
 800ddba:	89a3      	ldrh	r3, [r4, #12]
 800ddbc:	0719      	lsls	r1, r3, #28
 800ddbe:	d51d      	bpl.n	800ddfc <_puts_r+0x78>
 800ddc0:	6923      	ldr	r3, [r4, #16]
 800ddc2:	b1db      	cbz	r3, 800ddfc <_puts_r+0x78>
 800ddc4:	3e01      	subs	r6, #1
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	60a3      	str	r3, [r4, #8]
 800ddd0:	bb39      	cbnz	r1, 800de22 <_puts_r+0x9e>
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	da38      	bge.n	800de48 <_puts_r+0xc4>
 800ddd6:	4622      	mov	r2, r4
 800ddd8:	210a      	movs	r1, #10
 800ddda:	4628      	mov	r0, r5
 800dddc:	f000 f858 	bl	800de90 <__swbuf_r>
 800dde0:	3001      	adds	r0, #1
 800dde2:	d011      	beq.n	800de08 <_puts_r+0x84>
 800dde4:	250a      	movs	r5, #10
 800dde6:	e011      	b.n	800de0c <_puts_r+0x88>
 800dde8:	4b1b      	ldr	r3, [pc, #108]	; (800de58 <_puts_r+0xd4>)
 800ddea:	429c      	cmp	r4, r3
 800ddec:	d101      	bne.n	800ddf2 <_puts_r+0x6e>
 800ddee:	68ac      	ldr	r4, [r5, #8]
 800ddf0:	e7da      	b.n	800dda8 <_puts_r+0x24>
 800ddf2:	4b1a      	ldr	r3, [pc, #104]	; (800de5c <_puts_r+0xd8>)
 800ddf4:	429c      	cmp	r4, r3
 800ddf6:	bf08      	it	eq
 800ddf8:	68ec      	ldreq	r4, [r5, #12]
 800ddfa:	e7d5      	b.n	800dda8 <_puts_r+0x24>
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	4628      	mov	r0, r5
 800de00:	f000 f898 	bl	800df34 <__swsetup_r>
 800de04:	2800      	cmp	r0, #0
 800de06:	d0dd      	beq.n	800ddc4 <_puts_r+0x40>
 800de08:	f04f 35ff 	mov.w	r5, #4294967295
 800de0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de0e:	07da      	lsls	r2, r3, #31
 800de10:	d405      	bmi.n	800de1e <_puts_r+0x9a>
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	059b      	lsls	r3, r3, #22
 800de16:	d402      	bmi.n	800de1e <_puts_r+0x9a>
 800de18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de1a:	f000 fab2 	bl	800e382 <__retarget_lock_release_recursive>
 800de1e:	4628      	mov	r0, r5
 800de20:	bd70      	pop	{r4, r5, r6, pc}
 800de22:	2b00      	cmp	r3, #0
 800de24:	da04      	bge.n	800de30 <_puts_r+0xac>
 800de26:	69a2      	ldr	r2, [r4, #24]
 800de28:	429a      	cmp	r2, r3
 800de2a:	dc06      	bgt.n	800de3a <_puts_r+0xb6>
 800de2c:	290a      	cmp	r1, #10
 800de2e:	d004      	beq.n	800de3a <_puts_r+0xb6>
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	6022      	str	r2, [r4, #0]
 800de36:	7019      	strb	r1, [r3, #0]
 800de38:	e7c5      	b.n	800ddc6 <_puts_r+0x42>
 800de3a:	4622      	mov	r2, r4
 800de3c:	4628      	mov	r0, r5
 800de3e:	f000 f827 	bl	800de90 <__swbuf_r>
 800de42:	3001      	adds	r0, #1
 800de44:	d1bf      	bne.n	800ddc6 <_puts_r+0x42>
 800de46:	e7df      	b.n	800de08 <_puts_r+0x84>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	250a      	movs	r5, #10
 800de4c:	1c5a      	adds	r2, r3, #1
 800de4e:	6022      	str	r2, [r4, #0]
 800de50:	701d      	strb	r5, [r3, #0]
 800de52:	e7db      	b.n	800de0c <_puts_r+0x88>
 800de54:	0800f174 	.word	0x0800f174
 800de58:	0800f194 	.word	0x0800f194
 800de5c:	0800f154 	.word	0x0800f154

0800de60 <puts>:
 800de60:	4b02      	ldr	r3, [pc, #8]	; (800de6c <puts+0xc>)
 800de62:	4601      	mov	r1, r0
 800de64:	6818      	ldr	r0, [r3, #0]
 800de66:	f7ff bf8d 	b.w	800dd84 <_puts_r>
 800de6a:	bf00      	nop
 800de6c:	20000180 	.word	0x20000180

0800de70 <_sbrk_r>:
 800de70:	b538      	push	{r3, r4, r5, lr}
 800de72:	4d06      	ldr	r5, [pc, #24]	; (800de8c <_sbrk_r+0x1c>)
 800de74:	2300      	movs	r3, #0
 800de76:	4604      	mov	r4, r0
 800de78:	4608      	mov	r0, r1
 800de7a:	602b      	str	r3, [r5, #0]
 800de7c:	f7f2 fede 	bl	8000c3c <_sbrk>
 800de80:	1c43      	adds	r3, r0, #1
 800de82:	d102      	bne.n	800de8a <_sbrk_r+0x1a>
 800de84:	682b      	ldr	r3, [r5, #0]
 800de86:	b103      	cbz	r3, 800de8a <_sbrk_r+0x1a>
 800de88:	6023      	str	r3, [r4, #0]
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	20002f58 	.word	0x20002f58

0800de90 <__swbuf_r>:
 800de90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de92:	460e      	mov	r6, r1
 800de94:	4614      	mov	r4, r2
 800de96:	4605      	mov	r5, r0
 800de98:	b118      	cbz	r0, 800dea2 <__swbuf_r+0x12>
 800de9a:	6983      	ldr	r3, [r0, #24]
 800de9c:	b90b      	cbnz	r3, 800dea2 <__swbuf_r+0x12>
 800de9e:	f000 f9d1 	bl	800e244 <__sinit>
 800dea2:	4b21      	ldr	r3, [pc, #132]	; (800df28 <__swbuf_r+0x98>)
 800dea4:	429c      	cmp	r4, r3
 800dea6:	d12b      	bne.n	800df00 <__swbuf_r+0x70>
 800dea8:	686c      	ldr	r4, [r5, #4]
 800deaa:	69a3      	ldr	r3, [r4, #24]
 800deac:	60a3      	str	r3, [r4, #8]
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	071a      	lsls	r2, r3, #28
 800deb2:	d52f      	bpl.n	800df14 <__swbuf_r+0x84>
 800deb4:	6923      	ldr	r3, [r4, #16]
 800deb6:	b36b      	cbz	r3, 800df14 <__swbuf_r+0x84>
 800deb8:	6923      	ldr	r3, [r4, #16]
 800deba:	6820      	ldr	r0, [r4, #0]
 800debc:	1ac0      	subs	r0, r0, r3
 800debe:	6963      	ldr	r3, [r4, #20]
 800dec0:	b2f6      	uxtb	r6, r6
 800dec2:	4283      	cmp	r3, r0
 800dec4:	4637      	mov	r7, r6
 800dec6:	dc04      	bgt.n	800ded2 <__swbuf_r+0x42>
 800dec8:	4621      	mov	r1, r4
 800deca:	4628      	mov	r0, r5
 800decc:	f000 f926 	bl	800e11c <_fflush_r>
 800ded0:	bb30      	cbnz	r0, 800df20 <__swbuf_r+0x90>
 800ded2:	68a3      	ldr	r3, [r4, #8]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	60a3      	str	r3, [r4, #8]
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	6022      	str	r2, [r4, #0]
 800dede:	701e      	strb	r6, [r3, #0]
 800dee0:	6963      	ldr	r3, [r4, #20]
 800dee2:	3001      	adds	r0, #1
 800dee4:	4283      	cmp	r3, r0
 800dee6:	d004      	beq.n	800def2 <__swbuf_r+0x62>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	07db      	lsls	r3, r3, #31
 800deec:	d506      	bpl.n	800defc <__swbuf_r+0x6c>
 800deee:	2e0a      	cmp	r6, #10
 800def0:	d104      	bne.n	800defc <__swbuf_r+0x6c>
 800def2:	4621      	mov	r1, r4
 800def4:	4628      	mov	r0, r5
 800def6:	f000 f911 	bl	800e11c <_fflush_r>
 800defa:	b988      	cbnz	r0, 800df20 <__swbuf_r+0x90>
 800defc:	4638      	mov	r0, r7
 800defe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df00:	4b0a      	ldr	r3, [pc, #40]	; (800df2c <__swbuf_r+0x9c>)
 800df02:	429c      	cmp	r4, r3
 800df04:	d101      	bne.n	800df0a <__swbuf_r+0x7a>
 800df06:	68ac      	ldr	r4, [r5, #8]
 800df08:	e7cf      	b.n	800deaa <__swbuf_r+0x1a>
 800df0a:	4b09      	ldr	r3, [pc, #36]	; (800df30 <__swbuf_r+0xa0>)
 800df0c:	429c      	cmp	r4, r3
 800df0e:	bf08      	it	eq
 800df10:	68ec      	ldreq	r4, [r5, #12]
 800df12:	e7ca      	b.n	800deaa <__swbuf_r+0x1a>
 800df14:	4621      	mov	r1, r4
 800df16:	4628      	mov	r0, r5
 800df18:	f000 f80c 	bl	800df34 <__swsetup_r>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d0cb      	beq.n	800deb8 <__swbuf_r+0x28>
 800df20:	f04f 37ff 	mov.w	r7, #4294967295
 800df24:	e7ea      	b.n	800defc <__swbuf_r+0x6c>
 800df26:	bf00      	nop
 800df28:	0800f174 	.word	0x0800f174
 800df2c:	0800f194 	.word	0x0800f194
 800df30:	0800f154 	.word	0x0800f154

0800df34 <__swsetup_r>:
 800df34:	4b32      	ldr	r3, [pc, #200]	; (800e000 <__swsetup_r+0xcc>)
 800df36:	b570      	push	{r4, r5, r6, lr}
 800df38:	681d      	ldr	r5, [r3, #0]
 800df3a:	4606      	mov	r6, r0
 800df3c:	460c      	mov	r4, r1
 800df3e:	b125      	cbz	r5, 800df4a <__swsetup_r+0x16>
 800df40:	69ab      	ldr	r3, [r5, #24]
 800df42:	b913      	cbnz	r3, 800df4a <__swsetup_r+0x16>
 800df44:	4628      	mov	r0, r5
 800df46:	f000 f97d 	bl	800e244 <__sinit>
 800df4a:	4b2e      	ldr	r3, [pc, #184]	; (800e004 <__swsetup_r+0xd0>)
 800df4c:	429c      	cmp	r4, r3
 800df4e:	d10f      	bne.n	800df70 <__swsetup_r+0x3c>
 800df50:	686c      	ldr	r4, [r5, #4]
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df58:	0719      	lsls	r1, r3, #28
 800df5a:	d42c      	bmi.n	800dfb6 <__swsetup_r+0x82>
 800df5c:	06dd      	lsls	r5, r3, #27
 800df5e:	d411      	bmi.n	800df84 <__swsetup_r+0x50>
 800df60:	2309      	movs	r3, #9
 800df62:	6033      	str	r3, [r6, #0]
 800df64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	f04f 30ff 	mov.w	r0, #4294967295
 800df6e:	e03e      	b.n	800dfee <__swsetup_r+0xba>
 800df70:	4b25      	ldr	r3, [pc, #148]	; (800e008 <__swsetup_r+0xd4>)
 800df72:	429c      	cmp	r4, r3
 800df74:	d101      	bne.n	800df7a <__swsetup_r+0x46>
 800df76:	68ac      	ldr	r4, [r5, #8]
 800df78:	e7eb      	b.n	800df52 <__swsetup_r+0x1e>
 800df7a:	4b24      	ldr	r3, [pc, #144]	; (800e00c <__swsetup_r+0xd8>)
 800df7c:	429c      	cmp	r4, r3
 800df7e:	bf08      	it	eq
 800df80:	68ec      	ldreq	r4, [r5, #12]
 800df82:	e7e6      	b.n	800df52 <__swsetup_r+0x1e>
 800df84:	0758      	lsls	r0, r3, #29
 800df86:	d512      	bpl.n	800dfae <__swsetup_r+0x7a>
 800df88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df8a:	b141      	cbz	r1, 800df9e <__swsetup_r+0x6a>
 800df8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df90:	4299      	cmp	r1, r3
 800df92:	d002      	beq.n	800df9a <__swsetup_r+0x66>
 800df94:	4630      	mov	r0, r6
 800df96:	f7ff fe33 	bl	800dc00 <_free_r>
 800df9a:	2300      	movs	r3, #0
 800df9c:	6363      	str	r3, [r4, #52]	; 0x34
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfa4:	81a3      	strh	r3, [r4, #12]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	6063      	str	r3, [r4, #4]
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	89a3      	ldrh	r3, [r4, #12]
 800dfb0:	f043 0308 	orr.w	r3, r3, #8
 800dfb4:	81a3      	strh	r3, [r4, #12]
 800dfb6:	6923      	ldr	r3, [r4, #16]
 800dfb8:	b94b      	cbnz	r3, 800dfce <__swsetup_r+0x9a>
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfc4:	d003      	beq.n	800dfce <__swsetup_r+0x9a>
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f000 f9ff 	bl	800e3cc <__smakebuf_r>
 800dfce:	89a0      	ldrh	r0, [r4, #12]
 800dfd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfd4:	f010 0301 	ands.w	r3, r0, #1
 800dfd8:	d00a      	beq.n	800dff0 <__swsetup_r+0xbc>
 800dfda:	2300      	movs	r3, #0
 800dfdc:	60a3      	str	r3, [r4, #8]
 800dfde:	6963      	ldr	r3, [r4, #20]
 800dfe0:	425b      	negs	r3, r3
 800dfe2:	61a3      	str	r3, [r4, #24]
 800dfe4:	6923      	ldr	r3, [r4, #16]
 800dfe6:	b943      	cbnz	r3, 800dffa <__swsetup_r+0xc6>
 800dfe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfec:	d1ba      	bne.n	800df64 <__swsetup_r+0x30>
 800dfee:	bd70      	pop	{r4, r5, r6, pc}
 800dff0:	0781      	lsls	r1, r0, #30
 800dff2:	bf58      	it	pl
 800dff4:	6963      	ldrpl	r3, [r4, #20]
 800dff6:	60a3      	str	r3, [r4, #8]
 800dff8:	e7f4      	b.n	800dfe4 <__swsetup_r+0xb0>
 800dffa:	2000      	movs	r0, #0
 800dffc:	e7f7      	b.n	800dfee <__swsetup_r+0xba>
 800dffe:	bf00      	nop
 800e000:	20000180 	.word	0x20000180
 800e004:	0800f174 	.word	0x0800f174
 800e008:	0800f194 	.word	0x0800f194
 800e00c:	0800f154 	.word	0x0800f154

0800e010 <__sflush_r>:
 800e010:	898a      	ldrh	r2, [r1, #12]
 800e012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e016:	4605      	mov	r5, r0
 800e018:	0710      	lsls	r0, r2, #28
 800e01a:	460c      	mov	r4, r1
 800e01c:	d458      	bmi.n	800e0d0 <__sflush_r+0xc0>
 800e01e:	684b      	ldr	r3, [r1, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	dc05      	bgt.n	800e030 <__sflush_r+0x20>
 800e024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e026:	2b00      	cmp	r3, #0
 800e028:	dc02      	bgt.n	800e030 <__sflush_r+0x20>
 800e02a:	2000      	movs	r0, #0
 800e02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e032:	2e00      	cmp	r6, #0
 800e034:	d0f9      	beq.n	800e02a <__sflush_r+0x1a>
 800e036:	2300      	movs	r3, #0
 800e038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e03c:	682f      	ldr	r7, [r5, #0]
 800e03e:	602b      	str	r3, [r5, #0]
 800e040:	d032      	beq.n	800e0a8 <__sflush_r+0x98>
 800e042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	075a      	lsls	r2, r3, #29
 800e048:	d505      	bpl.n	800e056 <__sflush_r+0x46>
 800e04a:	6863      	ldr	r3, [r4, #4]
 800e04c:	1ac0      	subs	r0, r0, r3
 800e04e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e050:	b10b      	cbz	r3, 800e056 <__sflush_r+0x46>
 800e052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e054:	1ac0      	subs	r0, r0, r3
 800e056:	2300      	movs	r3, #0
 800e058:	4602      	mov	r2, r0
 800e05a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e05c:	6a21      	ldr	r1, [r4, #32]
 800e05e:	4628      	mov	r0, r5
 800e060:	47b0      	blx	r6
 800e062:	1c43      	adds	r3, r0, #1
 800e064:	89a3      	ldrh	r3, [r4, #12]
 800e066:	d106      	bne.n	800e076 <__sflush_r+0x66>
 800e068:	6829      	ldr	r1, [r5, #0]
 800e06a:	291d      	cmp	r1, #29
 800e06c:	d82c      	bhi.n	800e0c8 <__sflush_r+0xb8>
 800e06e:	4a2a      	ldr	r2, [pc, #168]	; (800e118 <__sflush_r+0x108>)
 800e070:	40ca      	lsrs	r2, r1
 800e072:	07d6      	lsls	r6, r2, #31
 800e074:	d528      	bpl.n	800e0c8 <__sflush_r+0xb8>
 800e076:	2200      	movs	r2, #0
 800e078:	6062      	str	r2, [r4, #4]
 800e07a:	04d9      	lsls	r1, r3, #19
 800e07c:	6922      	ldr	r2, [r4, #16]
 800e07e:	6022      	str	r2, [r4, #0]
 800e080:	d504      	bpl.n	800e08c <__sflush_r+0x7c>
 800e082:	1c42      	adds	r2, r0, #1
 800e084:	d101      	bne.n	800e08a <__sflush_r+0x7a>
 800e086:	682b      	ldr	r3, [r5, #0]
 800e088:	b903      	cbnz	r3, 800e08c <__sflush_r+0x7c>
 800e08a:	6560      	str	r0, [r4, #84]	; 0x54
 800e08c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e08e:	602f      	str	r7, [r5, #0]
 800e090:	2900      	cmp	r1, #0
 800e092:	d0ca      	beq.n	800e02a <__sflush_r+0x1a>
 800e094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e098:	4299      	cmp	r1, r3
 800e09a:	d002      	beq.n	800e0a2 <__sflush_r+0x92>
 800e09c:	4628      	mov	r0, r5
 800e09e:	f7ff fdaf 	bl	800dc00 <_free_r>
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e0a6:	e7c1      	b.n	800e02c <__sflush_r+0x1c>
 800e0a8:	6a21      	ldr	r1, [r4, #32]
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	47b0      	blx	r6
 800e0b0:	1c41      	adds	r1, r0, #1
 800e0b2:	d1c7      	bne.n	800e044 <__sflush_r+0x34>
 800e0b4:	682b      	ldr	r3, [r5, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0c4      	beq.n	800e044 <__sflush_r+0x34>
 800e0ba:	2b1d      	cmp	r3, #29
 800e0bc:	d001      	beq.n	800e0c2 <__sflush_r+0xb2>
 800e0be:	2b16      	cmp	r3, #22
 800e0c0:	d101      	bne.n	800e0c6 <__sflush_r+0xb6>
 800e0c2:	602f      	str	r7, [r5, #0]
 800e0c4:	e7b1      	b.n	800e02a <__sflush_r+0x1a>
 800e0c6:	89a3      	ldrh	r3, [r4, #12]
 800e0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0cc:	81a3      	strh	r3, [r4, #12]
 800e0ce:	e7ad      	b.n	800e02c <__sflush_r+0x1c>
 800e0d0:	690f      	ldr	r7, [r1, #16]
 800e0d2:	2f00      	cmp	r7, #0
 800e0d4:	d0a9      	beq.n	800e02a <__sflush_r+0x1a>
 800e0d6:	0793      	lsls	r3, r2, #30
 800e0d8:	680e      	ldr	r6, [r1, #0]
 800e0da:	bf08      	it	eq
 800e0dc:	694b      	ldreq	r3, [r1, #20]
 800e0de:	600f      	str	r7, [r1, #0]
 800e0e0:	bf18      	it	ne
 800e0e2:	2300      	movne	r3, #0
 800e0e4:	eba6 0807 	sub.w	r8, r6, r7
 800e0e8:	608b      	str	r3, [r1, #8]
 800e0ea:	f1b8 0f00 	cmp.w	r8, #0
 800e0ee:	dd9c      	ble.n	800e02a <__sflush_r+0x1a>
 800e0f0:	6a21      	ldr	r1, [r4, #32]
 800e0f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0f4:	4643      	mov	r3, r8
 800e0f6:	463a      	mov	r2, r7
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	47b0      	blx	r6
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	dc06      	bgt.n	800e10e <__sflush_r+0xfe>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e106:	81a3      	strh	r3, [r4, #12]
 800e108:	f04f 30ff 	mov.w	r0, #4294967295
 800e10c:	e78e      	b.n	800e02c <__sflush_r+0x1c>
 800e10e:	4407      	add	r7, r0
 800e110:	eba8 0800 	sub.w	r8, r8, r0
 800e114:	e7e9      	b.n	800e0ea <__sflush_r+0xda>
 800e116:	bf00      	nop
 800e118:	20400001 	.word	0x20400001

0800e11c <_fflush_r>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	690b      	ldr	r3, [r1, #16]
 800e120:	4605      	mov	r5, r0
 800e122:	460c      	mov	r4, r1
 800e124:	b913      	cbnz	r3, 800e12c <_fflush_r+0x10>
 800e126:	2500      	movs	r5, #0
 800e128:	4628      	mov	r0, r5
 800e12a:	bd38      	pop	{r3, r4, r5, pc}
 800e12c:	b118      	cbz	r0, 800e136 <_fflush_r+0x1a>
 800e12e:	6983      	ldr	r3, [r0, #24]
 800e130:	b90b      	cbnz	r3, 800e136 <_fflush_r+0x1a>
 800e132:	f000 f887 	bl	800e244 <__sinit>
 800e136:	4b14      	ldr	r3, [pc, #80]	; (800e188 <_fflush_r+0x6c>)
 800e138:	429c      	cmp	r4, r3
 800e13a:	d11b      	bne.n	800e174 <_fflush_r+0x58>
 800e13c:	686c      	ldr	r4, [r5, #4]
 800e13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0ef      	beq.n	800e126 <_fflush_r+0xa>
 800e146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e148:	07d0      	lsls	r0, r2, #31
 800e14a:	d404      	bmi.n	800e156 <_fflush_r+0x3a>
 800e14c:	0599      	lsls	r1, r3, #22
 800e14e:	d402      	bmi.n	800e156 <_fflush_r+0x3a>
 800e150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e152:	f000 f915 	bl	800e380 <__retarget_lock_acquire_recursive>
 800e156:	4628      	mov	r0, r5
 800e158:	4621      	mov	r1, r4
 800e15a:	f7ff ff59 	bl	800e010 <__sflush_r>
 800e15e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e160:	07da      	lsls	r2, r3, #31
 800e162:	4605      	mov	r5, r0
 800e164:	d4e0      	bmi.n	800e128 <_fflush_r+0xc>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	059b      	lsls	r3, r3, #22
 800e16a:	d4dd      	bmi.n	800e128 <_fflush_r+0xc>
 800e16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e16e:	f000 f908 	bl	800e382 <__retarget_lock_release_recursive>
 800e172:	e7d9      	b.n	800e128 <_fflush_r+0xc>
 800e174:	4b05      	ldr	r3, [pc, #20]	; (800e18c <_fflush_r+0x70>)
 800e176:	429c      	cmp	r4, r3
 800e178:	d101      	bne.n	800e17e <_fflush_r+0x62>
 800e17a:	68ac      	ldr	r4, [r5, #8]
 800e17c:	e7df      	b.n	800e13e <_fflush_r+0x22>
 800e17e:	4b04      	ldr	r3, [pc, #16]	; (800e190 <_fflush_r+0x74>)
 800e180:	429c      	cmp	r4, r3
 800e182:	bf08      	it	eq
 800e184:	68ec      	ldreq	r4, [r5, #12]
 800e186:	e7da      	b.n	800e13e <_fflush_r+0x22>
 800e188:	0800f174 	.word	0x0800f174
 800e18c:	0800f194 	.word	0x0800f194
 800e190:	0800f154 	.word	0x0800f154

0800e194 <std>:
 800e194:	2300      	movs	r3, #0
 800e196:	b510      	push	{r4, lr}
 800e198:	4604      	mov	r4, r0
 800e19a:	e9c0 3300 	strd	r3, r3, [r0]
 800e19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1a2:	6083      	str	r3, [r0, #8]
 800e1a4:	8181      	strh	r1, [r0, #12]
 800e1a6:	6643      	str	r3, [r0, #100]	; 0x64
 800e1a8:	81c2      	strh	r2, [r0, #14]
 800e1aa:	6183      	str	r3, [r0, #24]
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	2208      	movs	r2, #8
 800e1b0:	305c      	adds	r0, #92	; 0x5c
 800e1b2:	f7ff fd1d 	bl	800dbf0 <memset>
 800e1b6:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <std+0x38>)
 800e1b8:	6263      	str	r3, [r4, #36]	; 0x24
 800e1ba:	4b05      	ldr	r3, [pc, #20]	; (800e1d0 <std+0x3c>)
 800e1bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1be:	4b05      	ldr	r3, [pc, #20]	; (800e1d4 <std+0x40>)
 800e1c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1c2:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <std+0x44>)
 800e1c4:	6224      	str	r4, [r4, #32]
 800e1c6:	6323      	str	r3, [r4, #48]	; 0x30
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	bf00      	nop
 800e1cc:	0800ea41 	.word	0x0800ea41
 800e1d0:	0800ea63 	.word	0x0800ea63
 800e1d4:	0800ea9b 	.word	0x0800ea9b
 800e1d8:	0800eabf 	.word	0x0800eabf

0800e1dc <_cleanup_r>:
 800e1dc:	4901      	ldr	r1, [pc, #4]	; (800e1e4 <_cleanup_r+0x8>)
 800e1de:	f000 b8af 	b.w	800e340 <_fwalk_reent>
 800e1e2:	bf00      	nop
 800e1e4:	0800e11d 	.word	0x0800e11d

0800e1e8 <__sfmoreglue>:
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	1e4a      	subs	r2, r1, #1
 800e1ec:	2568      	movs	r5, #104	; 0x68
 800e1ee:	4355      	muls	r5, r2
 800e1f0:	460e      	mov	r6, r1
 800e1f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1f6:	f7ff fd53 	bl	800dca0 <_malloc_r>
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	b140      	cbz	r0, 800e210 <__sfmoreglue+0x28>
 800e1fe:	2100      	movs	r1, #0
 800e200:	e9c0 1600 	strd	r1, r6, [r0]
 800e204:	300c      	adds	r0, #12
 800e206:	60a0      	str	r0, [r4, #8]
 800e208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e20c:	f7ff fcf0 	bl	800dbf0 <memset>
 800e210:	4620      	mov	r0, r4
 800e212:	bd70      	pop	{r4, r5, r6, pc}

0800e214 <__sfp_lock_acquire>:
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <__sfp_lock_acquire+0x8>)
 800e216:	f000 b8b3 	b.w	800e380 <__retarget_lock_acquire_recursive>
 800e21a:	bf00      	nop
 800e21c:	20002f54 	.word	0x20002f54

0800e220 <__sfp_lock_release>:
 800e220:	4801      	ldr	r0, [pc, #4]	; (800e228 <__sfp_lock_release+0x8>)
 800e222:	f000 b8ae 	b.w	800e382 <__retarget_lock_release_recursive>
 800e226:	bf00      	nop
 800e228:	20002f54 	.word	0x20002f54

0800e22c <__sinit_lock_acquire>:
 800e22c:	4801      	ldr	r0, [pc, #4]	; (800e234 <__sinit_lock_acquire+0x8>)
 800e22e:	f000 b8a7 	b.w	800e380 <__retarget_lock_acquire_recursive>
 800e232:	bf00      	nop
 800e234:	20002f4f 	.word	0x20002f4f

0800e238 <__sinit_lock_release>:
 800e238:	4801      	ldr	r0, [pc, #4]	; (800e240 <__sinit_lock_release+0x8>)
 800e23a:	f000 b8a2 	b.w	800e382 <__retarget_lock_release_recursive>
 800e23e:	bf00      	nop
 800e240:	20002f4f 	.word	0x20002f4f

0800e244 <__sinit>:
 800e244:	b510      	push	{r4, lr}
 800e246:	4604      	mov	r4, r0
 800e248:	f7ff fff0 	bl	800e22c <__sinit_lock_acquire>
 800e24c:	69a3      	ldr	r3, [r4, #24]
 800e24e:	b11b      	cbz	r3, 800e258 <__sinit+0x14>
 800e250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e254:	f7ff bff0 	b.w	800e238 <__sinit_lock_release>
 800e258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e25c:	6523      	str	r3, [r4, #80]	; 0x50
 800e25e:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <__sinit+0x68>)
 800e260:	4a13      	ldr	r2, [pc, #76]	; (800e2b0 <__sinit+0x6c>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	62a2      	str	r2, [r4, #40]	; 0x28
 800e266:	42a3      	cmp	r3, r4
 800e268:	bf04      	itt	eq
 800e26a:	2301      	moveq	r3, #1
 800e26c:	61a3      	streq	r3, [r4, #24]
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 f820 	bl	800e2b4 <__sfp>
 800e274:	6060      	str	r0, [r4, #4]
 800e276:	4620      	mov	r0, r4
 800e278:	f000 f81c 	bl	800e2b4 <__sfp>
 800e27c:	60a0      	str	r0, [r4, #8]
 800e27e:	4620      	mov	r0, r4
 800e280:	f000 f818 	bl	800e2b4 <__sfp>
 800e284:	2200      	movs	r2, #0
 800e286:	60e0      	str	r0, [r4, #12]
 800e288:	2104      	movs	r1, #4
 800e28a:	6860      	ldr	r0, [r4, #4]
 800e28c:	f7ff ff82 	bl	800e194 <std>
 800e290:	68a0      	ldr	r0, [r4, #8]
 800e292:	2201      	movs	r2, #1
 800e294:	2109      	movs	r1, #9
 800e296:	f7ff ff7d 	bl	800e194 <std>
 800e29a:	68e0      	ldr	r0, [r4, #12]
 800e29c:	2202      	movs	r2, #2
 800e29e:	2112      	movs	r1, #18
 800e2a0:	f7ff ff78 	bl	800e194 <std>
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	61a3      	str	r3, [r4, #24]
 800e2a8:	e7d2      	b.n	800e250 <__sinit+0xc>
 800e2aa:	bf00      	nop
 800e2ac:	0800f150 	.word	0x0800f150
 800e2b0:	0800e1dd 	.word	0x0800e1dd

0800e2b4 <__sfp>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	4607      	mov	r7, r0
 800e2b8:	f7ff ffac 	bl	800e214 <__sfp_lock_acquire>
 800e2bc:	4b1e      	ldr	r3, [pc, #120]	; (800e338 <__sfp+0x84>)
 800e2be:	681e      	ldr	r6, [r3, #0]
 800e2c0:	69b3      	ldr	r3, [r6, #24]
 800e2c2:	b913      	cbnz	r3, 800e2ca <__sfp+0x16>
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7ff ffbd 	bl	800e244 <__sinit>
 800e2ca:	3648      	adds	r6, #72	; 0x48
 800e2cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	d503      	bpl.n	800e2dc <__sfp+0x28>
 800e2d4:	6833      	ldr	r3, [r6, #0]
 800e2d6:	b30b      	cbz	r3, 800e31c <__sfp+0x68>
 800e2d8:	6836      	ldr	r6, [r6, #0]
 800e2da:	e7f7      	b.n	800e2cc <__sfp+0x18>
 800e2dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2e0:	b9d5      	cbnz	r5, 800e318 <__sfp+0x64>
 800e2e2:	4b16      	ldr	r3, [pc, #88]	; (800e33c <__sfp+0x88>)
 800e2e4:	60e3      	str	r3, [r4, #12]
 800e2e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2ea:	6665      	str	r5, [r4, #100]	; 0x64
 800e2ec:	f000 f847 	bl	800e37e <__retarget_lock_init_recursive>
 800e2f0:	f7ff ff96 	bl	800e220 <__sfp_lock_release>
 800e2f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2fc:	6025      	str	r5, [r4, #0]
 800e2fe:	61a5      	str	r5, [r4, #24]
 800e300:	2208      	movs	r2, #8
 800e302:	4629      	mov	r1, r5
 800e304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e308:	f7ff fc72 	bl	800dbf0 <memset>
 800e30c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e314:	4620      	mov	r0, r4
 800e316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e318:	3468      	adds	r4, #104	; 0x68
 800e31a:	e7d9      	b.n	800e2d0 <__sfp+0x1c>
 800e31c:	2104      	movs	r1, #4
 800e31e:	4638      	mov	r0, r7
 800e320:	f7ff ff62 	bl	800e1e8 <__sfmoreglue>
 800e324:	4604      	mov	r4, r0
 800e326:	6030      	str	r0, [r6, #0]
 800e328:	2800      	cmp	r0, #0
 800e32a:	d1d5      	bne.n	800e2d8 <__sfp+0x24>
 800e32c:	f7ff ff78 	bl	800e220 <__sfp_lock_release>
 800e330:	230c      	movs	r3, #12
 800e332:	603b      	str	r3, [r7, #0]
 800e334:	e7ee      	b.n	800e314 <__sfp+0x60>
 800e336:	bf00      	nop
 800e338:	0800f150 	.word	0x0800f150
 800e33c:	ffff0001 	.word	0xffff0001

0800e340 <_fwalk_reent>:
 800e340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e344:	4606      	mov	r6, r0
 800e346:	4688      	mov	r8, r1
 800e348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e34c:	2700      	movs	r7, #0
 800e34e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e352:	f1b9 0901 	subs.w	r9, r9, #1
 800e356:	d505      	bpl.n	800e364 <_fwalk_reent+0x24>
 800e358:	6824      	ldr	r4, [r4, #0]
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	d1f7      	bne.n	800e34e <_fwalk_reent+0xe>
 800e35e:	4638      	mov	r0, r7
 800e360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e364:	89ab      	ldrh	r3, [r5, #12]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d907      	bls.n	800e37a <_fwalk_reent+0x3a>
 800e36a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e36e:	3301      	adds	r3, #1
 800e370:	d003      	beq.n	800e37a <_fwalk_reent+0x3a>
 800e372:	4629      	mov	r1, r5
 800e374:	4630      	mov	r0, r6
 800e376:	47c0      	blx	r8
 800e378:	4307      	orrs	r7, r0
 800e37a:	3568      	adds	r5, #104	; 0x68
 800e37c:	e7e9      	b.n	800e352 <_fwalk_reent+0x12>

0800e37e <__retarget_lock_init_recursive>:
 800e37e:	4770      	bx	lr

0800e380 <__retarget_lock_acquire_recursive>:
 800e380:	4770      	bx	lr

0800e382 <__retarget_lock_release_recursive>:
 800e382:	4770      	bx	lr

0800e384 <__swhatbuf_r>:
 800e384:	b570      	push	{r4, r5, r6, lr}
 800e386:	460e      	mov	r6, r1
 800e388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e38c:	2900      	cmp	r1, #0
 800e38e:	b096      	sub	sp, #88	; 0x58
 800e390:	4614      	mov	r4, r2
 800e392:	461d      	mov	r5, r3
 800e394:	da07      	bge.n	800e3a6 <__swhatbuf_r+0x22>
 800e396:	2300      	movs	r3, #0
 800e398:	602b      	str	r3, [r5, #0]
 800e39a:	89b3      	ldrh	r3, [r6, #12]
 800e39c:	061a      	lsls	r2, r3, #24
 800e39e:	d410      	bmi.n	800e3c2 <__swhatbuf_r+0x3e>
 800e3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a4:	e00e      	b.n	800e3c4 <__swhatbuf_r+0x40>
 800e3a6:	466a      	mov	r2, sp
 800e3a8:	f000 fbb0 	bl	800eb0c <_fstat_r>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	dbf2      	blt.n	800e396 <__swhatbuf_r+0x12>
 800e3b0:	9a01      	ldr	r2, [sp, #4]
 800e3b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3ba:	425a      	negs	r2, r3
 800e3bc:	415a      	adcs	r2, r3
 800e3be:	602a      	str	r2, [r5, #0]
 800e3c0:	e7ee      	b.n	800e3a0 <__swhatbuf_r+0x1c>
 800e3c2:	2340      	movs	r3, #64	; 0x40
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	6023      	str	r3, [r4, #0]
 800e3c8:	b016      	add	sp, #88	; 0x58
 800e3ca:	bd70      	pop	{r4, r5, r6, pc}

0800e3cc <__smakebuf_r>:
 800e3cc:	898b      	ldrh	r3, [r1, #12]
 800e3ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3d0:	079d      	lsls	r5, r3, #30
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	460c      	mov	r4, r1
 800e3d6:	d507      	bpl.n	800e3e8 <__smakebuf_r+0x1c>
 800e3d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	6123      	str	r3, [r4, #16]
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	6163      	str	r3, [r4, #20]
 800e3e4:	b002      	add	sp, #8
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	ab01      	add	r3, sp, #4
 800e3ea:	466a      	mov	r2, sp
 800e3ec:	f7ff ffca 	bl	800e384 <__swhatbuf_r>
 800e3f0:	9900      	ldr	r1, [sp, #0]
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f7ff fc53 	bl	800dca0 <_malloc_r>
 800e3fa:	b948      	cbnz	r0, 800e410 <__smakebuf_r+0x44>
 800e3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e400:	059a      	lsls	r2, r3, #22
 800e402:	d4ef      	bmi.n	800e3e4 <__smakebuf_r+0x18>
 800e404:	f023 0303 	bic.w	r3, r3, #3
 800e408:	f043 0302 	orr.w	r3, r3, #2
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	e7e3      	b.n	800e3d8 <__smakebuf_r+0xc>
 800e410:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <__smakebuf_r+0x7c>)
 800e412:	62b3      	str	r3, [r6, #40]	; 0x28
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	6020      	str	r0, [r4, #0]
 800e418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e41c:	81a3      	strh	r3, [r4, #12]
 800e41e:	9b00      	ldr	r3, [sp, #0]
 800e420:	6163      	str	r3, [r4, #20]
 800e422:	9b01      	ldr	r3, [sp, #4]
 800e424:	6120      	str	r0, [r4, #16]
 800e426:	b15b      	cbz	r3, 800e440 <__smakebuf_r+0x74>
 800e428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e42c:	4630      	mov	r0, r6
 800e42e:	f000 fb7f 	bl	800eb30 <_isatty_r>
 800e432:	b128      	cbz	r0, 800e440 <__smakebuf_r+0x74>
 800e434:	89a3      	ldrh	r3, [r4, #12]
 800e436:	f023 0303 	bic.w	r3, r3, #3
 800e43a:	f043 0301 	orr.w	r3, r3, #1
 800e43e:	81a3      	strh	r3, [r4, #12]
 800e440:	89a0      	ldrh	r0, [r4, #12]
 800e442:	4305      	orrs	r5, r0
 800e444:	81a5      	strh	r5, [r4, #12]
 800e446:	e7cd      	b.n	800e3e4 <__smakebuf_r+0x18>
 800e448:	0800e1dd 	.word	0x0800e1dd

0800e44c <__malloc_lock>:
 800e44c:	4801      	ldr	r0, [pc, #4]	; (800e454 <__malloc_lock+0x8>)
 800e44e:	f7ff bf97 	b.w	800e380 <__retarget_lock_acquire_recursive>
 800e452:	bf00      	nop
 800e454:	20002f50 	.word	0x20002f50

0800e458 <__malloc_unlock>:
 800e458:	4801      	ldr	r0, [pc, #4]	; (800e460 <__malloc_unlock+0x8>)
 800e45a:	f7ff bf92 	b.w	800e382 <__retarget_lock_release_recursive>
 800e45e:	bf00      	nop
 800e460:	20002f50 	.word	0x20002f50

0800e464 <__sfputc_r>:
 800e464:	6893      	ldr	r3, [r2, #8]
 800e466:	3b01      	subs	r3, #1
 800e468:	2b00      	cmp	r3, #0
 800e46a:	b410      	push	{r4}
 800e46c:	6093      	str	r3, [r2, #8]
 800e46e:	da08      	bge.n	800e482 <__sfputc_r+0x1e>
 800e470:	6994      	ldr	r4, [r2, #24]
 800e472:	42a3      	cmp	r3, r4
 800e474:	db01      	blt.n	800e47a <__sfputc_r+0x16>
 800e476:	290a      	cmp	r1, #10
 800e478:	d103      	bne.n	800e482 <__sfputc_r+0x1e>
 800e47a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e47e:	f7ff bd07 	b.w	800de90 <__swbuf_r>
 800e482:	6813      	ldr	r3, [r2, #0]
 800e484:	1c58      	adds	r0, r3, #1
 800e486:	6010      	str	r0, [r2, #0]
 800e488:	7019      	strb	r1, [r3, #0]
 800e48a:	4608      	mov	r0, r1
 800e48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <__sfputs_r>:
 800e492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e494:	4606      	mov	r6, r0
 800e496:	460f      	mov	r7, r1
 800e498:	4614      	mov	r4, r2
 800e49a:	18d5      	adds	r5, r2, r3
 800e49c:	42ac      	cmp	r4, r5
 800e49e:	d101      	bne.n	800e4a4 <__sfputs_r+0x12>
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e007      	b.n	800e4b4 <__sfputs_r+0x22>
 800e4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a8:	463a      	mov	r2, r7
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f7ff ffda 	bl	800e464 <__sfputc_r>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	d1f3      	bne.n	800e49c <__sfputs_r+0xa>
 800e4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4b8 <_vfiprintf_r>:
 800e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4bc:	460d      	mov	r5, r1
 800e4be:	b09d      	sub	sp, #116	; 0x74
 800e4c0:	4614      	mov	r4, r2
 800e4c2:	4698      	mov	r8, r3
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	b118      	cbz	r0, 800e4d0 <_vfiprintf_r+0x18>
 800e4c8:	6983      	ldr	r3, [r0, #24]
 800e4ca:	b90b      	cbnz	r3, 800e4d0 <_vfiprintf_r+0x18>
 800e4cc:	f7ff feba 	bl	800e244 <__sinit>
 800e4d0:	4b89      	ldr	r3, [pc, #548]	; (800e6f8 <_vfiprintf_r+0x240>)
 800e4d2:	429d      	cmp	r5, r3
 800e4d4:	d11b      	bne.n	800e50e <_vfiprintf_r+0x56>
 800e4d6:	6875      	ldr	r5, [r6, #4]
 800e4d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4da:	07d9      	lsls	r1, r3, #31
 800e4dc:	d405      	bmi.n	800e4ea <_vfiprintf_r+0x32>
 800e4de:	89ab      	ldrh	r3, [r5, #12]
 800e4e0:	059a      	lsls	r2, r3, #22
 800e4e2:	d402      	bmi.n	800e4ea <_vfiprintf_r+0x32>
 800e4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4e6:	f7ff ff4b 	bl	800e380 <__retarget_lock_acquire_recursive>
 800e4ea:	89ab      	ldrh	r3, [r5, #12]
 800e4ec:	071b      	lsls	r3, r3, #28
 800e4ee:	d501      	bpl.n	800e4f4 <_vfiprintf_r+0x3c>
 800e4f0:	692b      	ldr	r3, [r5, #16]
 800e4f2:	b9eb      	cbnz	r3, 800e530 <_vfiprintf_r+0x78>
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f7ff fd1c 	bl	800df34 <__swsetup_r>
 800e4fc:	b1c0      	cbz	r0, 800e530 <_vfiprintf_r+0x78>
 800e4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e500:	07dc      	lsls	r4, r3, #31
 800e502:	d50e      	bpl.n	800e522 <_vfiprintf_r+0x6a>
 800e504:	f04f 30ff 	mov.w	r0, #4294967295
 800e508:	b01d      	add	sp, #116	; 0x74
 800e50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e50e:	4b7b      	ldr	r3, [pc, #492]	; (800e6fc <_vfiprintf_r+0x244>)
 800e510:	429d      	cmp	r5, r3
 800e512:	d101      	bne.n	800e518 <_vfiprintf_r+0x60>
 800e514:	68b5      	ldr	r5, [r6, #8]
 800e516:	e7df      	b.n	800e4d8 <_vfiprintf_r+0x20>
 800e518:	4b79      	ldr	r3, [pc, #484]	; (800e700 <_vfiprintf_r+0x248>)
 800e51a:	429d      	cmp	r5, r3
 800e51c:	bf08      	it	eq
 800e51e:	68f5      	ldreq	r5, [r6, #12]
 800e520:	e7da      	b.n	800e4d8 <_vfiprintf_r+0x20>
 800e522:	89ab      	ldrh	r3, [r5, #12]
 800e524:	0598      	lsls	r0, r3, #22
 800e526:	d4ed      	bmi.n	800e504 <_vfiprintf_r+0x4c>
 800e528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e52a:	f7ff ff2a 	bl	800e382 <__retarget_lock_release_recursive>
 800e52e:	e7e9      	b.n	800e504 <_vfiprintf_r+0x4c>
 800e530:	2300      	movs	r3, #0
 800e532:	9309      	str	r3, [sp, #36]	; 0x24
 800e534:	2320      	movs	r3, #32
 800e536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e53a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e53e:	2330      	movs	r3, #48	; 0x30
 800e540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e704 <_vfiprintf_r+0x24c>
 800e544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e548:	f04f 0901 	mov.w	r9, #1
 800e54c:	4623      	mov	r3, r4
 800e54e:	469a      	mov	sl, r3
 800e550:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e554:	b10a      	cbz	r2, 800e55a <_vfiprintf_r+0xa2>
 800e556:	2a25      	cmp	r2, #37	; 0x25
 800e558:	d1f9      	bne.n	800e54e <_vfiprintf_r+0x96>
 800e55a:	ebba 0b04 	subs.w	fp, sl, r4
 800e55e:	d00b      	beq.n	800e578 <_vfiprintf_r+0xc0>
 800e560:	465b      	mov	r3, fp
 800e562:	4622      	mov	r2, r4
 800e564:	4629      	mov	r1, r5
 800e566:	4630      	mov	r0, r6
 800e568:	f7ff ff93 	bl	800e492 <__sfputs_r>
 800e56c:	3001      	adds	r0, #1
 800e56e:	f000 80aa 	beq.w	800e6c6 <_vfiprintf_r+0x20e>
 800e572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e574:	445a      	add	r2, fp
 800e576:	9209      	str	r2, [sp, #36]	; 0x24
 800e578:	f89a 3000 	ldrb.w	r3, [sl]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 80a2 	beq.w	800e6c6 <_vfiprintf_r+0x20e>
 800e582:	2300      	movs	r3, #0
 800e584:	f04f 32ff 	mov.w	r2, #4294967295
 800e588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e58c:	f10a 0a01 	add.w	sl, sl, #1
 800e590:	9304      	str	r3, [sp, #16]
 800e592:	9307      	str	r3, [sp, #28]
 800e594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e598:	931a      	str	r3, [sp, #104]	; 0x68
 800e59a:	4654      	mov	r4, sl
 800e59c:	2205      	movs	r2, #5
 800e59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a2:	4858      	ldr	r0, [pc, #352]	; (800e704 <_vfiprintf_r+0x24c>)
 800e5a4:	f7f1 fe1c 	bl	80001e0 <memchr>
 800e5a8:	9a04      	ldr	r2, [sp, #16]
 800e5aa:	b9d8      	cbnz	r0, 800e5e4 <_vfiprintf_r+0x12c>
 800e5ac:	06d1      	lsls	r1, r2, #27
 800e5ae:	bf44      	itt	mi
 800e5b0:	2320      	movmi	r3, #32
 800e5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5b6:	0713      	lsls	r3, r2, #28
 800e5b8:	bf44      	itt	mi
 800e5ba:	232b      	movmi	r3, #43	; 0x2b
 800e5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5c6:	d015      	beq.n	800e5f4 <_vfiprintf_r+0x13c>
 800e5c8:	9a07      	ldr	r2, [sp, #28]
 800e5ca:	4654      	mov	r4, sl
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	f04f 0c0a 	mov.w	ip, #10
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5d8:	3b30      	subs	r3, #48	; 0x30
 800e5da:	2b09      	cmp	r3, #9
 800e5dc:	d94e      	bls.n	800e67c <_vfiprintf_r+0x1c4>
 800e5de:	b1b0      	cbz	r0, 800e60e <_vfiprintf_r+0x156>
 800e5e0:	9207      	str	r2, [sp, #28]
 800e5e2:	e014      	b.n	800e60e <_vfiprintf_r+0x156>
 800e5e4:	eba0 0308 	sub.w	r3, r0, r8
 800e5e8:	fa09 f303 	lsl.w	r3, r9, r3
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	9304      	str	r3, [sp, #16]
 800e5f0:	46a2      	mov	sl, r4
 800e5f2:	e7d2      	b.n	800e59a <_vfiprintf_r+0xe2>
 800e5f4:	9b03      	ldr	r3, [sp, #12]
 800e5f6:	1d19      	adds	r1, r3, #4
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	9103      	str	r1, [sp, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	bfbb      	ittet	lt
 800e600:	425b      	neglt	r3, r3
 800e602:	f042 0202 	orrlt.w	r2, r2, #2
 800e606:	9307      	strge	r3, [sp, #28]
 800e608:	9307      	strlt	r3, [sp, #28]
 800e60a:	bfb8      	it	lt
 800e60c:	9204      	strlt	r2, [sp, #16]
 800e60e:	7823      	ldrb	r3, [r4, #0]
 800e610:	2b2e      	cmp	r3, #46	; 0x2e
 800e612:	d10c      	bne.n	800e62e <_vfiprintf_r+0x176>
 800e614:	7863      	ldrb	r3, [r4, #1]
 800e616:	2b2a      	cmp	r3, #42	; 0x2a
 800e618:	d135      	bne.n	800e686 <_vfiprintf_r+0x1ce>
 800e61a:	9b03      	ldr	r3, [sp, #12]
 800e61c:	1d1a      	adds	r2, r3, #4
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	9203      	str	r2, [sp, #12]
 800e622:	2b00      	cmp	r3, #0
 800e624:	bfb8      	it	lt
 800e626:	f04f 33ff 	movlt.w	r3, #4294967295
 800e62a:	3402      	adds	r4, #2
 800e62c:	9305      	str	r3, [sp, #20]
 800e62e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e714 <_vfiprintf_r+0x25c>
 800e632:	7821      	ldrb	r1, [r4, #0]
 800e634:	2203      	movs	r2, #3
 800e636:	4650      	mov	r0, sl
 800e638:	f7f1 fdd2 	bl	80001e0 <memchr>
 800e63c:	b140      	cbz	r0, 800e650 <_vfiprintf_r+0x198>
 800e63e:	2340      	movs	r3, #64	; 0x40
 800e640:	eba0 000a 	sub.w	r0, r0, sl
 800e644:	fa03 f000 	lsl.w	r0, r3, r0
 800e648:	9b04      	ldr	r3, [sp, #16]
 800e64a:	4303      	orrs	r3, r0
 800e64c:	3401      	adds	r4, #1
 800e64e:	9304      	str	r3, [sp, #16]
 800e650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e654:	482c      	ldr	r0, [pc, #176]	; (800e708 <_vfiprintf_r+0x250>)
 800e656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e65a:	2206      	movs	r2, #6
 800e65c:	f7f1 fdc0 	bl	80001e0 <memchr>
 800e660:	2800      	cmp	r0, #0
 800e662:	d03f      	beq.n	800e6e4 <_vfiprintf_r+0x22c>
 800e664:	4b29      	ldr	r3, [pc, #164]	; (800e70c <_vfiprintf_r+0x254>)
 800e666:	bb1b      	cbnz	r3, 800e6b0 <_vfiprintf_r+0x1f8>
 800e668:	9b03      	ldr	r3, [sp, #12]
 800e66a:	3307      	adds	r3, #7
 800e66c:	f023 0307 	bic.w	r3, r3, #7
 800e670:	3308      	adds	r3, #8
 800e672:	9303      	str	r3, [sp, #12]
 800e674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e676:	443b      	add	r3, r7
 800e678:	9309      	str	r3, [sp, #36]	; 0x24
 800e67a:	e767      	b.n	800e54c <_vfiprintf_r+0x94>
 800e67c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e680:	460c      	mov	r4, r1
 800e682:	2001      	movs	r0, #1
 800e684:	e7a5      	b.n	800e5d2 <_vfiprintf_r+0x11a>
 800e686:	2300      	movs	r3, #0
 800e688:	3401      	adds	r4, #1
 800e68a:	9305      	str	r3, [sp, #20]
 800e68c:	4619      	mov	r1, r3
 800e68e:	f04f 0c0a 	mov.w	ip, #10
 800e692:	4620      	mov	r0, r4
 800e694:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e698:	3a30      	subs	r2, #48	; 0x30
 800e69a:	2a09      	cmp	r2, #9
 800e69c:	d903      	bls.n	800e6a6 <_vfiprintf_r+0x1ee>
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d0c5      	beq.n	800e62e <_vfiprintf_r+0x176>
 800e6a2:	9105      	str	r1, [sp, #20]
 800e6a4:	e7c3      	b.n	800e62e <_vfiprintf_r+0x176>
 800e6a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e7f0      	b.n	800e692 <_vfiprintf_r+0x1da>
 800e6b0:	ab03      	add	r3, sp, #12
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	462a      	mov	r2, r5
 800e6b6:	4b16      	ldr	r3, [pc, #88]	; (800e710 <_vfiprintf_r+0x258>)
 800e6b8:	a904      	add	r1, sp, #16
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f3af 8000 	nop.w
 800e6c0:	4607      	mov	r7, r0
 800e6c2:	1c78      	adds	r0, r7, #1
 800e6c4:	d1d6      	bne.n	800e674 <_vfiprintf_r+0x1bc>
 800e6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6c8:	07d9      	lsls	r1, r3, #31
 800e6ca:	d405      	bmi.n	800e6d8 <_vfiprintf_r+0x220>
 800e6cc:	89ab      	ldrh	r3, [r5, #12]
 800e6ce:	059a      	lsls	r2, r3, #22
 800e6d0:	d402      	bmi.n	800e6d8 <_vfiprintf_r+0x220>
 800e6d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6d4:	f7ff fe55 	bl	800e382 <__retarget_lock_release_recursive>
 800e6d8:	89ab      	ldrh	r3, [r5, #12]
 800e6da:	065b      	lsls	r3, r3, #25
 800e6dc:	f53f af12 	bmi.w	800e504 <_vfiprintf_r+0x4c>
 800e6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6e2:	e711      	b.n	800e508 <_vfiprintf_r+0x50>
 800e6e4:	ab03      	add	r3, sp, #12
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	462a      	mov	r2, r5
 800e6ea:	4b09      	ldr	r3, [pc, #36]	; (800e710 <_vfiprintf_r+0x258>)
 800e6ec:	a904      	add	r1, sp, #16
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f000 f880 	bl	800e7f4 <_printf_i>
 800e6f4:	e7e4      	b.n	800e6c0 <_vfiprintf_r+0x208>
 800e6f6:	bf00      	nop
 800e6f8:	0800f174 	.word	0x0800f174
 800e6fc:	0800f194 	.word	0x0800f194
 800e700:	0800f154 	.word	0x0800f154
 800e704:	0800f1b4 	.word	0x0800f1b4
 800e708:	0800f1be 	.word	0x0800f1be
 800e70c:	00000000 	.word	0x00000000
 800e710:	0800e493 	.word	0x0800e493
 800e714:	0800f1ba 	.word	0x0800f1ba

0800e718 <_printf_common>:
 800e718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e71c:	4616      	mov	r6, r2
 800e71e:	4699      	mov	r9, r3
 800e720:	688a      	ldr	r2, [r1, #8]
 800e722:	690b      	ldr	r3, [r1, #16]
 800e724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e728:	4293      	cmp	r3, r2
 800e72a:	bfb8      	it	lt
 800e72c:	4613      	movlt	r3, r2
 800e72e:	6033      	str	r3, [r6, #0]
 800e730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e734:	4607      	mov	r7, r0
 800e736:	460c      	mov	r4, r1
 800e738:	b10a      	cbz	r2, 800e73e <_printf_common+0x26>
 800e73a:	3301      	adds	r3, #1
 800e73c:	6033      	str	r3, [r6, #0]
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	0699      	lsls	r1, r3, #26
 800e742:	bf42      	ittt	mi
 800e744:	6833      	ldrmi	r3, [r6, #0]
 800e746:	3302      	addmi	r3, #2
 800e748:	6033      	strmi	r3, [r6, #0]
 800e74a:	6825      	ldr	r5, [r4, #0]
 800e74c:	f015 0506 	ands.w	r5, r5, #6
 800e750:	d106      	bne.n	800e760 <_printf_common+0x48>
 800e752:	f104 0a19 	add.w	sl, r4, #25
 800e756:	68e3      	ldr	r3, [r4, #12]
 800e758:	6832      	ldr	r2, [r6, #0]
 800e75a:	1a9b      	subs	r3, r3, r2
 800e75c:	42ab      	cmp	r3, r5
 800e75e:	dc26      	bgt.n	800e7ae <_printf_common+0x96>
 800e760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e764:	1e13      	subs	r3, r2, #0
 800e766:	6822      	ldr	r2, [r4, #0]
 800e768:	bf18      	it	ne
 800e76a:	2301      	movne	r3, #1
 800e76c:	0692      	lsls	r2, r2, #26
 800e76e:	d42b      	bmi.n	800e7c8 <_printf_common+0xb0>
 800e770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e774:	4649      	mov	r1, r9
 800e776:	4638      	mov	r0, r7
 800e778:	47c0      	blx	r8
 800e77a:	3001      	adds	r0, #1
 800e77c:	d01e      	beq.n	800e7bc <_printf_common+0xa4>
 800e77e:	6823      	ldr	r3, [r4, #0]
 800e780:	68e5      	ldr	r5, [r4, #12]
 800e782:	6832      	ldr	r2, [r6, #0]
 800e784:	f003 0306 	and.w	r3, r3, #6
 800e788:	2b04      	cmp	r3, #4
 800e78a:	bf08      	it	eq
 800e78c:	1aad      	subeq	r5, r5, r2
 800e78e:	68a3      	ldr	r3, [r4, #8]
 800e790:	6922      	ldr	r2, [r4, #16]
 800e792:	bf0c      	ite	eq
 800e794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e798:	2500      	movne	r5, #0
 800e79a:	4293      	cmp	r3, r2
 800e79c:	bfc4      	itt	gt
 800e79e:	1a9b      	subgt	r3, r3, r2
 800e7a0:	18ed      	addgt	r5, r5, r3
 800e7a2:	2600      	movs	r6, #0
 800e7a4:	341a      	adds	r4, #26
 800e7a6:	42b5      	cmp	r5, r6
 800e7a8:	d11a      	bne.n	800e7e0 <_printf_common+0xc8>
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	e008      	b.n	800e7c0 <_printf_common+0xa8>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	4638      	mov	r0, r7
 800e7b6:	47c0      	blx	r8
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d103      	bne.n	800e7c4 <_printf_common+0xac>
 800e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c4:	3501      	adds	r5, #1
 800e7c6:	e7c6      	b.n	800e756 <_printf_common+0x3e>
 800e7c8:	18e1      	adds	r1, r4, r3
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	2030      	movs	r0, #48	; 0x30
 800e7ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7d2:	4422      	add	r2, r4
 800e7d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7dc:	3302      	adds	r3, #2
 800e7de:	e7c7      	b.n	800e770 <_printf_common+0x58>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	4649      	mov	r1, r9
 800e7e6:	4638      	mov	r0, r7
 800e7e8:	47c0      	blx	r8
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	d0e6      	beq.n	800e7bc <_printf_common+0xa4>
 800e7ee:	3601      	adds	r6, #1
 800e7f0:	e7d9      	b.n	800e7a6 <_printf_common+0x8e>
	...

0800e7f4 <_printf_i>:
 800e7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f8:	460c      	mov	r4, r1
 800e7fa:	4691      	mov	r9, r2
 800e7fc:	7e27      	ldrb	r7, [r4, #24]
 800e7fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e800:	2f78      	cmp	r7, #120	; 0x78
 800e802:	4680      	mov	r8, r0
 800e804:	469a      	mov	sl, r3
 800e806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e80a:	d807      	bhi.n	800e81c <_printf_i+0x28>
 800e80c:	2f62      	cmp	r7, #98	; 0x62
 800e80e:	d80a      	bhi.n	800e826 <_printf_i+0x32>
 800e810:	2f00      	cmp	r7, #0
 800e812:	f000 80d8 	beq.w	800e9c6 <_printf_i+0x1d2>
 800e816:	2f58      	cmp	r7, #88	; 0x58
 800e818:	f000 80a3 	beq.w	800e962 <_printf_i+0x16e>
 800e81c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e824:	e03a      	b.n	800e89c <_printf_i+0xa8>
 800e826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e82a:	2b15      	cmp	r3, #21
 800e82c:	d8f6      	bhi.n	800e81c <_printf_i+0x28>
 800e82e:	a001      	add	r0, pc, #4	; (adr r0, 800e834 <_printf_i+0x40>)
 800e830:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e834:	0800e88d 	.word	0x0800e88d
 800e838:	0800e8a1 	.word	0x0800e8a1
 800e83c:	0800e81d 	.word	0x0800e81d
 800e840:	0800e81d 	.word	0x0800e81d
 800e844:	0800e81d 	.word	0x0800e81d
 800e848:	0800e81d 	.word	0x0800e81d
 800e84c:	0800e8a1 	.word	0x0800e8a1
 800e850:	0800e81d 	.word	0x0800e81d
 800e854:	0800e81d 	.word	0x0800e81d
 800e858:	0800e81d 	.word	0x0800e81d
 800e85c:	0800e81d 	.word	0x0800e81d
 800e860:	0800e9ad 	.word	0x0800e9ad
 800e864:	0800e8d1 	.word	0x0800e8d1
 800e868:	0800e98f 	.word	0x0800e98f
 800e86c:	0800e81d 	.word	0x0800e81d
 800e870:	0800e81d 	.word	0x0800e81d
 800e874:	0800e9cf 	.word	0x0800e9cf
 800e878:	0800e81d 	.word	0x0800e81d
 800e87c:	0800e8d1 	.word	0x0800e8d1
 800e880:	0800e81d 	.word	0x0800e81d
 800e884:	0800e81d 	.word	0x0800e81d
 800e888:	0800e997 	.word	0x0800e997
 800e88c:	680b      	ldr	r3, [r1, #0]
 800e88e:	1d1a      	adds	r2, r3, #4
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	600a      	str	r2, [r1, #0]
 800e894:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e89c:	2301      	movs	r3, #1
 800e89e:	e0a3      	b.n	800e9e8 <_printf_i+0x1f4>
 800e8a0:	6825      	ldr	r5, [r4, #0]
 800e8a2:	6808      	ldr	r0, [r1, #0]
 800e8a4:	062e      	lsls	r6, r5, #24
 800e8a6:	f100 0304 	add.w	r3, r0, #4
 800e8aa:	d50a      	bpl.n	800e8c2 <_printf_i+0xce>
 800e8ac:	6805      	ldr	r5, [r0, #0]
 800e8ae:	600b      	str	r3, [r1, #0]
 800e8b0:	2d00      	cmp	r5, #0
 800e8b2:	da03      	bge.n	800e8bc <_printf_i+0xc8>
 800e8b4:	232d      	movs	r3, #45	; 0x2d
 800e8b6:	426d      	negs	r5, r5
 800e8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8bc:	485e      	ldr	r0, [pc, #376]	; (800ea38 <_printf_i+0x244>)
 800e8be:	230a      	movs	r3, #10
 800e8c0:	e019      	b.n	800e8f6 <_printf_i+0x102>
 800e8c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e8c6:	6805      	ldr	r5, [r0, #0]
 800e8c8:	600b      	str	r3, [r1, #0]
 800e8ca:	bf18      	it	ne
 800e8cc:	b22d      	sxthne	r5, r5
 800e8ce:	e7ef      	b.n	800e8b0 <_printf_i+0xbc>
 800e8d0:	680b      	ldr	r3, [r1, #0]
 800e8d2:	6825      	ldr	r5, [r4, #0]
 800e8d4:	1d18      	adds	r0, r3, #4
 800e8d6:	6008      	str	r0, [r1, #0]
 800e8d8:	0628      	lsls	r0, r5, #24
 800e8da:	d501      	bpl.n	800e8e0 <_printf_i+0xec>
 800e8dc:	681d      	ldr	r5, [r3, #0]
 800e8de:	e002      	b.n	800e8e6 <_printf_i+0xf2>
 800e8e0:	0669      	lsls	r1, r5, #25
 800e8e2:	d5fb      	bpl.n	800e8dc <_printf_i+0xe8>
 800e8e4:	881d      	ldrh	r5, [r3, #0]
 800e8e6:	4854      	ldr	r0, [pc, #336]	; (800ea38 <_printf_i+0x244>)
 800e8e8:	2f6f      	cmp	r7, #111	; 0x6f
 800e8ea:	bf0c      	ite	eq
 800e8ec:	2308      	moveq	r3, #8
 800e8ee:	230a      	movne	r3, #10
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8f6:	6866      	ldr	r6, [r4, #4]
 800e8f8:	60a6      	str	r6, [r4, #8]
 800e8fa:	2e00      	cmp	r6, #0
 800e8fc:	bfa2      	ittt	ge
 800e8fe:	6821      	ldrge	r1, [r4, #0]
 800e900:	f021 0104 	bicge.w	r1, r1, #4
 800e904:	6021      	strge	r1, [r4, #0]
 800e906:	b90d      	cbnz	r5, 800e90c <_printf_i+0x118>
 800e908:	2e00      	cmp	r6, #0
 800e90a:	d04d      	beq.n	800e9a8 <_printf_i+0x1b4>
 800e90c:	4616      	mov	r6, r2
 800e90e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e912:	fb03 5711 	mls	r7, r3, r1, r5
 800e916:	5dc7      	ldrb	r7, [r0, r7]
 800e918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e91c:	462f      	mov	r7, r5
 800e91e:	42bb      	cmp	r3, r7
 800e920:	460d      	mov	r5, r1
 800e922:	d9f4      	bls.n	800e90e <_printf_i+0x11a>
 800e924:	2b08      	cmp	r3, #8
 800e926:	d10b      	bne.n	800e940 <_printf_i+0x14c>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	07df      	lsls	r7, r3, #31
 800e92c:	d508      	bpl.n	800e940 <_printf_i+0x14c>
 800e92e:	6923      	ldr	r3, [r4, #16]
 800e930:	6861      	ldr	r1, [r4, #4]
 800e932:	4299      	cmp	r1, r3
 800e934:	bfde      	ittt	le
 800e936:	2330      	movle	r3, #48	; 0x30
 800e938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e93c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e940:	1b92      	subs	r2, r2, r6
 800e942:	6122      	str	r2, [r4, #16]
 800e944:	f8cd a000 	str.w	sl, [sp]
 800e948:	464b      	mov	r3, r9
 800e94a:	aa03      	add	r2, sp, #12
 800e94c:	4621      	mov	r1, r4
 800e94e:	4640      	mov	r0, r8
 800e950:	f7ff fee2 	bl	800e718 <_printf_common>
 800e954:	3001      	adds	r0, #1
 800e956:	d14c      	bne.n	800e9f2 <_printf_i+0x1fe>
 800e958:	f04f 30ff 	mov.w	r0, #4294967295
 800e95c:	b004      	add	sp, #16
 800e95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e962:	4835      	ldr	r0, [pc, #212]	; (800ea38 <_printf_i+0x244>)
 800e964:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	680e      	ldr	r6, [r1, #0]
 800e96c:	061f      	lsls	r7, r3, #24
 800e96e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e972:	600e      	str	r6, [r1, #0]
 800e974:	d514      	bpl.n	800e9a0 <_printf_i+0x1ac>
 800e976:	07d9      	lsls	r1, r3, #31
 800e978:	bf44      	itt	mi
 800e97a:	f043 0320 	orrmi.w	r3, r3, #32
 800e97e:	6023      	strmi	r3, [r4, #0]
 800e980:	b91d      	cbnz	r5, 800e98a <_printf_i+0x196>
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	f023 0320 	bic.w	r3, r3, #32
 800e988:	6023      	str	r3, [r4, #0]
 800e98a:	2310      	movs	r3, #16
 800e98c:	e7b0      	b.n	800e8f0 <_printf_i+0xfc>
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	f043 0320 	orr.w	r3, r3, #32
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	2378      	movs	r3, #120	; 0x78
 800e998:	4828      	ldr	r0, [pc, #160]	; (800ea3c <_printf_i+0x248>)
 800e99a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e99e:	e7e3      	b.n	800e968 <_printf_i+0x174>
 800e9a0:	065e      	lsls	r6, r3, #25
 800e9a2:	bf48      	it	mi
 800e9a4:	b2ad      	uxthmi	r5, r5
 800e9a6:	e7e6      	b.n	800e976 <_printf_i+0x182>
 800e9a8:	4616      	mov	r6, r2
 800e9aa:	e7bb      	b.n	800e924 <_printf_i+0x130>
 800e9ac:	680b      	ldr	r3, [r1, #0]
 800e9ae:	6826      	ldr	r6, [r4, #0]
 800e9b0:	6960      	ldr	r0, [r4, #20]
 800e9b2:	1d1d      	adds	r5, r3, #4
 800e9b4:	600d      	str	r5, [r1, #0]
 800e9b6:	0635      	lsls	r5, r6, #24
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	d501      	bpl.n	800e9c0 <_printf_i+0x1cc>
 800e9bc:	6018      	str	r0, [r3, #0]
 800e9be:	e002      	b.n	800e9c6 <_printf_i+0x1d2>
 800e9c0:	0671      	lsls	r1, r6, #25
 800e9c2:	d5fb      	bpl.n	800e9bc <_printf_i+0x1c8>
 800e9c4:	8018      	strh	r0, [r3, #0]
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	6123      	str	r3, [r4, #16]
 800e9ca:	4616      	mov	r6, r2
 800e9cc:	e7ba      	b.n	800e944 <_printf_i+0x150>
 800e9ce:	680b      	ldr	r3, [r1, #0]
 800e9d0:	1d1a      	adds	r2, r3, #4
 800e9d2:	600a      	str	r2, [r1, #0]
 800e9d4:	681e      	ldr	r6, [r3, #0]
 800e9d6:	6862      	ldr	r2, [r4, #4]
 800e9d8:	2100      	movs	r1, #0
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7f1 fc00 	bl	80001e0 <memchr>
 800e9e0:	b108      	cbz	r0, 800e9e6 <_printf_i+0x1f2>
 800e9e2:	1b80      	subs	r0, r0, r6
 800e9e4:	6060      	str	r0, [r4, #4]
 800e9e6:	6863      	ldr	r3, [r4, #4]
 800e9e8:	6123      	str	r3, [r4, #16]
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9f0:	e7a8      	b.n	800e944 <_printf_i+0x150>
 800e9f2:	6923      	ldr	r3, [r4, #16]
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	4640      	mov	r0, r8
 800e9fa:	47d0      	blx	sl
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	d0ab      	beq.n	800e958 <_printf_i+0x164>
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	079b      	lsls	r3, r3, #30
 800ea04:	d413      	bmi.n	800ea2e <_printf_i+0x23a>
 800ea06:	68e0      	ldr	r0, [r4, #12]
 800ea08:	9b03      	ldr	r3, [sp, #12]
 800ea0a:	4298      	cmp	r0, r3
 800ea0c:	bfb8      	it	lt
 800ea0e:	4618      	movlt	r0, r3
 800ea10:	e7a4      	b.n	800e95c <_printf_i+0x168>
 800ea12:	2301      	movs	r3, #1
 800ea14:	4632      	mov	r2, r6
 800ea16:	4649      	mov	r1, r9
 800ea18:	4640      	mov	r0, r8
 800ea1a:	47d0      	blx	sl
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	d09b      	beq.n	800e958 <_printf_i+0x164>
 800ea20:	3501      	adds	r5, #1
 800ea22:	68e3      	ldr	r3, [r4, #12]
 800ea24:	9903      	ldr	r1, [sp, #12]
 800ea26:	1a5b      	subs	r3, r3, r1
 800ea28:	42ab      	cmp	r3, r5
 800ea2a:	dcf2      	bgt.n	800ea12 <_printf_i+0x21e>
 800ea2c:	e7eb      	b.n	800ea06 <_printf_i+0x212>
 800ea2e:	2500      	movs	r5, #0
 800ea30:	f104 0619 	add.w	r6, r4, #25
 800ea34:	e7f5      	b.n	800ea22 <_printf_i+0x22e>
 800ea36:	bf00      	nop
 800ea38:	0800f1c5 	.word	0x0800f1c5
 800ea3c:	0800f1d6 	.word	0x0800f1d6

0800ea40 <__sread>:
 800ea40:	b510      	push	{r4, lr}
 800ea42:	460c      	mov	r4, r1
 800ea44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea48:	f000 f894 	bl	800eb74 <_read_r>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	bfab      	itete	ge
 800ea50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea52:	89a3      	ldrhlt	r3, [r4, #12]
 800ea54:	181b      	addge	r3, r3, r0
 800ea56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea5a:	bfac      	ite	ge
 800ea5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea5e:	81a3      	strhlt	r3, [r4, #12]
 800ea60:	bd10      	pop	{r4, pc}

0800ea62 <__swrite>:
 800ea62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea66:	461f      	mov	r7, r3
 800ea68:	898b      	ldrh	r3, [r1, #12]
 800ea6a:	05db      	lsls	r3, r3, #23
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	460c      	mov	r4, r1
 800ea70:	4616      	mov	r6, r2
 800ea72:	d505      	bpl.n	800ea80 <__swrite+0x1e>
 800ea74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea78:	2302      	movs	r3, #2
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f000 f868 	bl	800eb50 <_lseek_r>
 800ea80:	89a3      	ldrh	r3, [r4, #12]
 800ea82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea8a:	81a3      	strh	r3, [r4, #12]
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	463b      	mov	r3, r7
 800ea90:	4628      	mov	r0, r5
 800ea92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea96:	f000 b817 	b.w	800eac8 <_write_r>

0800ea9a <__sseek>:
 800ea9a:	b510      	push	{r4, lr}
 800ea9c:	460c      	mov	r4, r1
 800ea9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaa2:	f000 f855 	bl	800eb50 <_lseek_r>
 800eaa6:	1c43      	adds	r3, r0, #1
 800eaa8:	89a3      	ldrh	r3, [r4, #12]
 800eaaa:	bf15      	itete	ne
 800eaac:	6560      	strne	r0, [r4, #84]	; 0x54
 800eaae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eab6:	81a3      	strheq	r3, [r4, #12]
 800eab8:	bf18      	it	ne
 800eaba:	81a3      	strhne	r3, [r4, #12]
 800eabc:	bd10      	pop	{r4, pc}

0800eabe <__sclose>:
 800eabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac2:	f000 b813 	b.w	800eaec <_close_r>
	...

0800eac8 <_write_r>:
 800eac8:	b538      	push	{r3, r4, r5, lr}
 800eaca:	4d07      	ldr	r5, [pc, #28]	; (800eae8 <_write_r+0x20>)
 800eacc:	4604      	mov	r4, r0
 800eace:	4608      	mov	r0, r1
 800ead0:	4611      	mov	r1, r2
 800ead2:	2200      	movs	r2, #0
 800ead4:	602a      	str	r2, [r5, #0]
 800ead6:	461a      	mov	r2, r3
 800ead8:	f7f2 f85f 	bl	8000b9a <_write>
 800eadc:	1c43      	adds	r3, r0, #1
 800eade:	d102      	bne.n	800eae6 <_write_r+0x1e>
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	b103      	cbz	r3, 800eae6 <_write_r+0x1e>
 800eae4:	6023      	str	r3, [r4, #0]
 800eae6:	bd38      	pop	{r3, r4, r5, pc}
 800eae8:	20002f58 	.word	0x20002f58

0800eaec <_close_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4d06      	ldr	r5, [pc, #24]	; (800eb08 <_close_r+0x1c>)
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	4608      	mov	r0, r1
 800eaf6:	602b      	str	r3, [r5, #0]
 800eaf8:	f7f2 f86b 	bl	8000bd2 <_close>
 800eafc:	1c43      	adds	r3, r0, #1
 800eafe:	d102      	bne.n	800eb06 <_close_r+0x1a>
 800eb00:	682b      	ldr	r3, [r5, #0]
 800eb02:	b103      	cbz	r3, 800eb06 <_close_r+0x1a>
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	bd38      	pop	{r3, r4, r5, pc}
 800eb08:	20002f58 	.word	0x20002f58

0800eb0c <_fstat_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4d07      	ldr	r5, [pc, #28]	; (800eb2c <_fstat_r+0x20>)
 800eb10:	2300      	movs	r3, #0
 800eb12:	4604      	mov	r4, r0
 800eb14:	4608      	mov	r0, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	602b      	str	r3, [r5, #0]
 800eb1a:	f7f2 f866 	bl	8000bea <_fstat>
 800eb1e:	1c43      	adds	r3, r0, #1
 800eb20:	d102      	bne.n	800eb28 <_fstat_r+0x1c>
 800eb22:	682b      	ldr	r3, [r5, #0]
 800eb24:	b103      	cbz	r3, 800eb28 <_fstat_r+0x1c>
 800eb26:	6023      	str	r3, [r4, #0]
 800eb28:	bd38      	pop	{r3, r4, r5, pc}
 800eb2a:	bf00      	nop
 800eb2c:	20002f58 	.word	0x20002f58

0800eb30 <_isatty_r>:
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	4d06      	ldr	r5, [pc, #24]	; (800eb4c <_isatty_r+0x1c>)
 800eb34:	2300      	movs	r3, #0
 800eb36:	4604      	mov	r4, r0
 800eb38:	4608      	mov	r0, r1
 800eb3a:	602b      	str	r3, [r5, #0]
 800eb3c:	f7f2 f865 	bl	8000c0a <_isatty>
 800eb40:	1c43      	adds	r3, r0, #1
 800eb42:	d102      	bne.n	800eb4a <_isatty_r+0x1a>
 800eb44:	682b      	ldr	r3, [r5, #0]
 800eb46:	b103      	cbz	r3, 800eb4a <_isatty_r+0x1a>
 800eb48:	6023      	str	r3, [r4, #0]
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	20002f58 	.word	0x20002f58

0800eb50 <_lseek_r>:
 800eb50:	b538      	push	{r3, r4, r5, lr}
 800eb52:	4d07      	ldr	r5, [pc, #28]	; (800eb70 <_lseek_r+0x20>)
 800eb54:	4604      	mov	r4, r0
 800eb56:	4608      	mov	r0, r1
 800eb58:	4611      	mov	r1, r2
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	602a      	str	r2, [r5, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	f7f2 f85e 	bl	8000c20 <_lseek>
 800eb64:	1c43      	adds	r3, r0, #1
 800eb66:	d102      	bne.n	800eb6e <_lseek_r+0x1e>
 800eb68:	682b      	ldr	r3, [r5, #0]
 800eb6a:	b103      	cbz	r3, 800eb6e <_lseek_r+0x1e>
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	20002f58 	.word	0x20002f58

0800eb74 <_read_r>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	4d07      	ldr	r5, [pc, #28]	; (800eb94 <_read_r+0x20>)
 800eb78:	4604      	mov	r4, r0
 800eb7a:	4608      	mov	r0, r1
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	2200      	movs	r2, #0
 800eb80:	602a      	str	r2, [r5, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	f7f1 ffec 	bl	8000b60 <_read>
 800eb88:	1c43      	adds	r3, r0, #1
 800eb8a:	d102      	bne.n	800eb92 <_read_r+0x1e>
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	b103      	cbz	r3, 800eb92 <_read_r+0x1e>
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	bd38      	pop	{r3, r4, r5, pc}
 800eb94:	20002f58 	.word	0x20002f58

0800eb98 <_init>:
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	bf00      	nop
 800eb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb9e:	bc08      	pop	{r3}
 800eba0:	469e      	mov	lr, r3
 800eba2:	4770      	bx	lr

0800eba4 <_fini>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	bf00      	nop
 800eba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebaa:	bc08      	pop	{r3}
 800ebac:	469e      	mov	lr, r3
 800ebae:	4770      	bx	lr
