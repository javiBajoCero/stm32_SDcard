
creating filesystem on a SD card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008440  08008440  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008448  08008448  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002410  2000000c  0800845c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000241c  0800845c  0002241c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bdf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ce  00000000  00000000  00031c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000345f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  000351b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223c5  00000000  00000000  00035c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105f6  00000000  00000000  00057ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c631d  00000000  00000000  000685f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  0012e964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f2c 	.word	0x08007f2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007f2c 	.word	0x08007f2c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80004d6:	b084      	sub	sp, #16
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
FRESULT res;
uint32_t byteswritten, bytesread;
uint8_t wtext[] = "stm32 fatfs works great!";
 80004da:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <main+0xe0>)
 80004dc:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 80004e0:	f104 0404 	add.w	r4, r4, #4
 80004e4:	461d      	mov	r5, r3
 80004e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ee:	c403      	stmia	r4!, {r0, r1}
 80004f0:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fb43 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f865 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f915 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fe:	f000 f8eb 	bl	80006d8 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000502:	f000 f8c9 	bl	8000698 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000506:	f003 fee5 	bl	80042d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
res=f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	4929      	ldr	r1, [pc, #164]	; (80005b4 <main+0xe4>)
 800050e:	482a      	ldr	r0, [pc, #168]	; (80005b8 <main+0xe8>)
 8000510:	f006 fb20 	bl	8006b54 <f_mount>
 8000514:	4603      	mov	r3, r0
 8000516:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800051a:	f102 0207 	add.w	r2, r2, #7
 800051e:	7013      	strb	r3, [r2, #0]
res=f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	3b04      	subs	r3, #4
 8000526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	2107      	movs	r1, #7
 8000530:	4820      	ldr	r0, [pc, #128]	; (80005b4 <main+0xe4>)
 8000532:	f006 ff5d 	bl	80073f0 <f_mkfs>
 8000536:	4603      	mov	r3, r0
 8000538:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800053c:	f102 0207 	add.w	r2, r2, #7
 8000540:	7013      	strb	r3, [r2, #0]
res=f_open(&SDFile, "STM32.txt",FA_CREATE_ALWAYS | FA_WRITE);
 8000542:	220a      	movs	r2, #10
 8000544:	491d      	ldr	r1, [pc, #116]	; (80005bc <main+0xec>)
 8000546:	481e      	ldr	r0, [pc, #120]	; (80005c0 <main+0xf0>)
 8000548:	f006 fb4a 	bl	8006be0 <f_open>
 800054c:	4603      	mov	r3, r0
 800054e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000552:	f102 0207 	add.w	r2, r2, #7
 8000556:	7013      	strb	r3, [r2, #0]
res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8000558:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800055c:	f103 0304 	add.w	r3, r3, #4
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe31 	bl	80001c8 <strlen>
 8000566:	4602      	mov	r2, r0
 8000568:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800056c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000570:	f101 0104 	add.w	r1, r1, #4
 8000574:	4812      	ldr	r0, [pc, #72]	; (80005c0 <main+0xf0>)
 8000576:	f006 fcff 	bl	8006f78 <f_write>
 800057a:	4603      	mov	r3, r0
 800057c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000580:	f102 0207 	add.w	r2, r2, #7
 8000584:	7013      	strb	r3, [r2, #0]
res=f_close(&SDFile);
 8000586:	480e      	ldr	r0, [pc, #56]	; (80005c0 <main+0xf0>)
 8000588:	f006 ff08 	bl	800739c <f_close>
 800058c:	4603      	mov	r3, r0
 800058e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000592:	f102 0207 	add.w	r2, r2, #7
 8000596:	7013      	strb	r3, [r2, #0]
res=f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0xe8>)
 800059e:	f006 fad9 	bl	8006b54 <f_mount>
 80005a2:	4603      	mov	r3, r0
 80005a4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80005a8:	f102 0207 	add.w	r2, r2, #7
 80005ac:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0xde>
 80005b0:	08007f50 	.word	0x08007f50
 80005b4:	200003b0 	.word	0x200003b0
 80005b8:	200013e4 	.word	0x200013e4
 80005bc:	08007f44 	.word	0x08007f44
 80005c0:	200003b4 	.word	0x200003b4

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f007 fca2 	bl	8007f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	; 0xa8
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f9ab 	bl	80019a4 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f8e6 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fc04 	bl	8001e84 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f8cf 	bl	8000824 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_SDIO_SD_Init+0x38>)
 800069e:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <MX_SDIO_SD_Init+0x3c>)
 80006a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_SDIO_SD_Init+0x38>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_SDIO_SD_Init+0x38>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_SDIO_SD_Init+0x38>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_SDIO_SD_Init+0x38>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_SDIO_SD_Init+0x38>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <MX_SDIO_SD_Init+0x38>)
 80006c2:	2205      	movs	r2, #5
 80006c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000324 	.word	0x20000324
 80006d4:	40012c00 	.word	0x40012c00

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DMA_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	203b      	movs	r0, #59	; 0x3b
 8000700:	f000 fbad 	bl	8000e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000704:	203b      	movs	r0, #59	; 0x3b
 8000706:	f000 fbc6 	bl	8000e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2045      	movs	r0, #69	; 0x45
 8000710:	f000 fba5 	bl	8000e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000714:	2045      	movs	r0, #69	; 0x45
 8000716:	f000 fbbe 	bl	8000e96 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b34      	ldr	r3, [pc, #208]	; (8000814 <MX_GPIO_Init+0xec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a33      	ldr	r2, [pc, #204]	; (8000814 <MX_GPIO_Init+0xec>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <MX_GPIO_Init+0xec>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <MX_GPIO_Init+0xec>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a2c      	ldr	r2, [pc, #176]	; (8000814 <MX_GPIO_Init+0xec>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_GPIO_Init+0xec>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a25      	ldr	r2, [pc, #148]	; (8000814 <MX_GPIO_Init+0xec>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_GPIO_Init+0xec>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_GPIO_Init+0xec>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <MX_GPIO_Init+0xec>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_GPIO_Init+0xec>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007b4:	4818      	ldr	r0, [pc, #96]	; (8000818 <MX_GPIO_Init+0xf0>)
 80007b6:	f001 f8db 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_GPIO_Init+0xf4>)
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0xf8>)
 80007ce:	f000 ff1b 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80007d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xf0>)
 80007ec:	f000 ff0c 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000806:	f000 feff 	bl	8001608 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40020c00 	.word	0x40020c00
 800081c:	10110000 	.word	0x10110000
 8000820:	40020000 	.word	0x40020000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000872:	2007      	movs	r0, #7
 8000874:	f000 fae8 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a68      	ldr	r2, [pc, #416]	; (8000a44 <HAL_SD_MspInit+0x1c0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	f040 80c9 	bne.w	8000a3a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	4b66      	ldr	r3, [pc, #408]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b0:	4a65      	ldr	r2, [pc, #404]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b6:	6453      	str	r3, [r2, #68]	; 0x44
 80008b8:	4b63      	ldr	r3, [pc, #396]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4b5f      	ldr	r3, [pc, #380]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a5e      	ldr	r2, [pc, #376]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b5c      	ldr	r3, [pc, #368]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b58      	ldr	r3, [pc, #352]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4a57      	ldr	r2, [pc, #348]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6313      	str	r3, [r2, #48]	; 0x30
 80008f0:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <HAL_SD_MspInit+0x1c4>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000900:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800090e:	230c      	movs	r3, #12
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	484c      	ldr	r0, [pc, #304]	; (8000a4c <HAL_SD_MspInit+0x1c8>)
 800091a:	f000 fe75 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800091e:	2304      	movs	r3, #4
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800092e:	230c      	movs	r3, #12
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4845      	ldr	r0, [pc, #276]	; (8000a50 <HAL_SD_MspInit+0x1cc>)
 800093a:	f000 fe65 	bl	8001608 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800093e:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000940:	4a45      	ldr	r2, [pc, #276]	; (8000a58 <HAL_SD_MspInit+0x1d4>)
 8000942:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000944:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800094a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 800095a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000960:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000966:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000968:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 800096a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000972:	2220      	movs	r2, #32
 8000974:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 800097e:	2204      	movs	r2, #4
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000984:	2203      	movs	r2, #3
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 800098a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 8000992:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000998:	482e      	ldr	r0, [pc, #184]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 800099a:	f000 fa97 	bl	8000ecc <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80009a4:	f7ff ff3e 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a2a      	ldr	r2, [pc, #168]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
 80009ae:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <HAL_SD_MspInit+0x1d0>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <HAL_SD_MspInit+0x1dc>)
 80009b8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009c4:	2240      	movs	r2, #64	; 0x40
 80009c6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d4:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009dc:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e4:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009e8:	2220      	movs	r2, #32
 80009ea:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 80009fa:	2203      	movs	r2, #3
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 8000a00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 8000a08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 8000a10:	f000 fa5c 	bl	8000ecc <HAL_DMA_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000a1a:	f7ff ff03 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 8000a22:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <HAL_SD_MspInit+0x1d8>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2031      	movs	r0, #49	; 0x31
 8000a30:	f000 fa15 	bl	8000e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a34:	2031      	movs	r0, #49	; 0x31
 8000a36:	f000 fa2e 	bl	8000e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40012c00 	.word	0x40012c00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	20000264 	.word	0x20000264
 8000a58:	40026458 	.word	0x40026458
 8000a5c:	200002c4 	.word	0x200002c4
 8000a60:	400264a0 	.word	0x400264a0

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f8b2 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <SDIO_IRQHandler+0x10>)
 8000ac6:	f001 fe0f 	bl	80026e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000324 	.word	0x20000324

08000ad4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <DMA2_Stream3_IRQHandler+0x10>)
 8000ada:	f000 fb1f 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000264 	.word	0x20000264

08000ae8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <DMA2_Stream6_IRQHandler+0x10>)
 8000aee:	f000 fb15 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200002c4 	.word	0x200002c4

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <SystemInit+0x28>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <SystemInit+0x28>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SystemInit+0x28>)
 8000b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b16:	609a      	str	r2, [r3, #8]
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b2e:	e003      	b.n	8000b38 <LoopCopyDataInit>

08000b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b36:	3104      	adds	r1, #4

08000b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b40:	d3f6      	bcc.n	8000b30 <CopyDataInit>
  ldr  r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b44:	e002      	b.n	8000b4c <LoopFillZerobss>

08000b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b48:	f842 3b04 	str.w	r3, [r2], #4

08000b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b50:	d3f9      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd3 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f007 f9bd 	bl	8007ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fcb9 	bl	80004d0 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b64:	08008450 	.word	0x08008450
  ldr  r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b6c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b70:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b74:	2000241c 	.word	0x2000241c

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f94f 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe40 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f967 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f92f 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200003a8 	.word	0x200003a8

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200003a8 	.word	0x200003a8

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff ffee 	bl	8000c48 <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_Delay+0x44>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffde 	bl	8000c48 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff29 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff3e 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff8e 	bl	8000d9c <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff31 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffa2 	bl	8000e04 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff feb6 	bl	8000c48 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e099      	b.n	800101c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0201 	bic.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f08:	e00f      	b.n	8000f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f0a:	f7ff fe9d 	bl	8000c48 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d908      	bls.n	8000f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e078      	b.n	800101c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e8      	bne.n	8000f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	4b38      	ldr	r3, [pc, #224]	; (8001024 <HAL_DMA_Init+0x158>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d107      	bne.n	8000f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f023 0307 	bic.w	r3, r3, #7
 8000faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d117      	bne.n	8000fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00e      	beq.n	8000fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 fa9d 	bl	8001510 <DMA_CheckFifoParam>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2240      	movs	r2, #64	; 0x40
 8000fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fea:	2301      	movs	r3, #1
 8000fec:	e016      	b.n	800101c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fa54 	bl	80014a4 <DMA_CalcBaseAndBitshift>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001004:	223f      	movs	r2, #63	; 0x3f
 8001006:	409a      	lsls	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	f010803f 	.word	0xf010803f

08001028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_DMA_Start_IT+0x26>
 800104a:	2302      	movs	r3, #2
 800104c:	e040      	b.n	80010d0 <HAL_DMA_Start_IT+0xa8>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d12f      	bne.n	80010c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2202      	movs	r2, #2
 8001066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f000 f9e6 	bl	8001448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	223f      	movs	r2, #63	; 0x3f
 8001082:	409a      	lsls	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0216 	orr.w	r2, r2, #22
 8001096:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0208 	orr.w	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e005      	b.n	80010ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010ca:	2302      	movs	r3, #2
 80010cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d004      	beq.n	80010f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00c      	b.n	8001110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2205      	movs	r2, #5
 80010fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001128:	4b92      	ldr	r3, [pc, #584]	; (8001374 <HAL_DMA_IRQHandler+0x258>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a92      	ldr	r2, [pc, #584]	; (8001378 <HAL_DMA_IRQHandler+0x25c>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0a9b      	lsrs	r3, r3, #10
 8001134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	2208      	movs	r2, #8
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01a      	beq.n	8001188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0204 	bic.w	r2, r2, #4
 800116e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	2208      	movs	r2, #8
 8001176:	409a      	lsls	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118c:	2201      	movs	r2, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d012      	beq.n	80011be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011aa:	2201      	movs	r2, #1
 80011ac:	409a      	lsls	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b6:	f043 0202 	orr.w	r2, r3, #2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c2:	2204      	movs	r2, #4
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d012      	beq.n	80011f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	2204      	movs	r2, #4
 80011e2:	409a      	lsls	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	f043 0204 	orr.w	r2, r3, #4
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	2210      	movs	r2, #16
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d043      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03c      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2210      	movs	r2, #16
 8001218:	409a      	lsls	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d018      	beq.n	800125e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d108      	bne.n	800124c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d024      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
 800124a:	e01f      	b.n	800128c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01b      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	4798      	blx	r3
 800125c:	e016      	b.n	800128c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0208 	bic.w	r2, r2, #8
 800127a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	2220      	movs	r2, #32
 8001292:	409a      	lsls	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 808e 	beq.w	80013ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8086 	beq.w	80013ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b2:	2220      	movs	r2, #32
 80012b4:	409a      	lsls	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d136      	bne.n	8001334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0216 	bic.w	r2, r2, #22
 80012d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d103      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x1da>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0208 	bic.w	r2, r2, #8
 8001304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130a:	223f      	movs	r2, #63	; 0x3f
 800130c:	409a      	lsls	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001326:	2b00      	cmp	r3, #0
 8001328:	d07d      	beq.n	8001426 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	4798      	blx	r3
        }
        return;
 8001332:	e078      	b.n	8001426 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d01c      	beq.n	800137c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d108      	bne.n	8001362 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	2b00      	cmp	r3, #0
 8001356:	d030      	beq.n	80013ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	4798      	blx	r3
 8001360:	e02b      	b.n	80013ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001366:	2b00      	cmp	r3, #0
 8001368:	d027      	beq.n	80013ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
 8001372:	e022      	b.n	80013ba <HAL_DMA_IRQHandler+0x29e>
 8001374:	20000000 	.word	0x20000000
 8001378:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0210 	bic.w	r2, r2, #16
 8001398:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d032      	beq.n	8001428 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d022      	beq.n	8001414 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d307      	bcc.n	8001402 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f2      	bne.n	80013e6 <HAL_DMA_IRQHandler+0x2ca>
 8001400:	e000      	b.n	8001404 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001402:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
 8001424:	e000      	b.n	8001428 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001426:	bf00      	nop
    }
  }
}
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop

08001430 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b40      	cmp	r3, #64	; 0x40
 8001474:	d108      	bne.n	8001488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001486:	e007      	b.n	8001498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3b10      	subs	r3, #16
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <DMA_CalcBaseAndBitshift+0x64>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014be:	4a13      	ldr	r2, [pc, #76]	; (800150c <DMA_CalcBaseAndBitshift+0x68>)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d909      	bls.n	80014e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	1d1a      	adds	r2, r3, #4
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	659a      	str	r2, [r3, #88]	; 0x58
 80014e4:	e007      	b.n	80014f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ee:	f023 0303 	bic.w	r3, r3, #3
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	aaaaaaab 	.word	0xaaaaaaab
 800150c:	08007fc4 	.word	0x08007fc4

08001510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11f      	bne.n	800156a <DMA_CheckFifoParam+0x5a>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d856      	bhi.n	80015de <DMA_CheckFifoParam+0xce>
 8001530:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <DMA_CheckFifoParam+0x28>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001549 	.word	0x08001549
 800153c:	0800155b 	.word	0x0800155b
 8001540:	08001549 	.word	0x08001549
 8001544:	080015df 	.word	0x080015df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d046      	beq.n	80015e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001558:	e043      	b.n	80015e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001562:	d140      	bne.n	80015e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001568:	e03d      	b.n	80015e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001572:	d121      	bne.n	80015b8 <DMA_CheckFifoParam+0xa8>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d837      	bhi.n	80015ea <DMA_CheckFifoParam+0xda>
 800157a:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <DMA_CheckFifoParam+0x70>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	08001591 	.word	0x08001591
 8001584:	08001597 	.word	0x08001597
 8001588:	08001591 	.word	0x08001591
 800158c:	080015a9 	.word	0x080015a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
      break;
 8001594:	e030      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d025      	beq.n	80015ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a6:	e022      	b.n	80015ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015b0:	d11f      	bne.n	80015f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015b6:	e01c      	b.n	80015f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d903      	bls.n	80015c6 <DMA_CheckFifoParam+0xb6>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d003      	beq.n	80015cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015c4:	e018      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
      break;
 80015ca:	e015      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00e      	beq.n	80015f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
      break;
 80015dc:	e00b      	b.n	80015f6 <DMA_CheckFifoParam+0xe6>
      break;
 80015de:	bf00      	nop
 80015e0:	e00a      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      break;
 80015e2:	bf00      	nop
 80015e4:	e008      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      break;
 80015e6:	bf00      	nop
 80015e8:	e006      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      break;
 80015ea:	bf00      	nop
 80015ec:	e004      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      break;
 80015ee:	bf00      	nop
 80015f0:	e002      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <DMA_CheckFifoParam+0xe8>
      break;
 80015f6:	bf00      	nop
    }
  } 
  
  return status; 
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e16b      	b.n	80018fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 815a 	bne.w	80018f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d00b      	beq.n	8001662 <HAL_GPIO_Init+0x5a>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001656:	2b11      	cmp	r3, #17
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b12      	cmp	r3, #18
 8001660:	d130      	bne.n	80016c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0xfc>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b12      	cmp	r3, #18
 8001702:	d123      	bne.n	800174c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	08da      	lsrs	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3208      	adds	r2, #8
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80b4 	beq.w	80018f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b60      	ldr	r3, [pc, #384]	; (8001914 <HAL_GPIO_Init+0x30c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <HAL_GPIO_Init+0x30c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_GPIO_Init+0x30c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017aa:	4a5b      	ldr	r2, [pc, #364]	; (8001918 <HAL_GPIO_Init+0x310>)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_GPIO_Init+0x314>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d02b      	beq.n	800182e <HAL_GPIO_Init+0x226>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a51      	ldr	r2, [pc, #324]	; (8001920 <HAL_GPIO_Init+0x318>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d025      	beq.n	800182a <HAL_GPIO_Init+0x222>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_GPIO_Init+0x31c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01f      	beq.n	8001826 <HAL_GPIO_Init+0x21e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <HAL_GPIO_Init+0x320>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x21a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4e      	ldr	r2, [pc, #312]	; (800192c <HAL_GPIO_Init+0x324>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x216>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x328>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x212>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x32c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x20e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_GPIO_Init+0x330>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x20a>
 800180e:	2307      	movs	r3, #7
 8001810:	e00e      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001812:	2308      	movs	r3, #8
 8001814:	e00c      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001816:	2306      	movs	r3, #6
 8001818:	e00a      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800181a:	2305      	movs	r3, #5
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800181e:	2304      	movs	r3, #4
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800182e:	2300      	movs	r3, #0
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x310>)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_GPIO_Init+0x334>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_GPIO_Init+0x334>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_GPIO_Init+0x334>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_GPIO_Init+0x334>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_GPIO_Init+0x334>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_GPIO_Init+0x334>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_GPIO_Init+0x334>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_GPIO_Init+0x334>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	f67f ae90 	bls.w	8001624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40021400 	.word	0x40021400
 8001934:	40021800 	.word	0x40021800
 8001938:	40021c00 	.word	0x40021c00
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e25b      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d075      	beq.n	8001aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c2:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d00c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ce:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d112      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019da:	4b9d      	ldr	r3, [pc, #628]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e6:	d10b      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	4b99      	ldr	r3, [pc, #612]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d05b      	beq.n	8001aac <HAL_RCC_OscConfig+0x108>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d157      	bne.n	8001aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e236      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x74>
 8001a0a:	4b91      	ldr	r3, [pc, #580]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a90      	ldr	r2, [pc, #576]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xb0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a8a      	ldr	r2, [pc, #552]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a87      	ldr	r2, [pc, #540]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xb0>
 8001a3c:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a83      	ldr	r2, [pc, #524]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a80      	ldr	r2, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f8f4 	bl	8000c48 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f8f0 	bl	8000c48 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1fb      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xc0>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f8e0 	bl	8000c48 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f8dc 	bl	8000c48 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1e7      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0xe8>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aba:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac6:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x152>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1bb      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4952      	ldr	r1, [pc, #328]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_RCC_OscConfig+0x2b0>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f895 	bl	8000c48 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff f891 	bl	8000c48 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e19c      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4940      	ldr	r1, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <HAL_RCC_OscConfig+0x2b0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f874 	bl	8000c48 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff f870 	bl	8000c48 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e17b      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d030      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x2b4>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff f854 	bl	8000c48 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff f850 	bl	8000c48 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e15b      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x200>
 8001bc2:	e015      	b.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x2b4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f83d 	bl	8000c48 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f839 	bl	8000c48 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e144      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a0 	beq.w	8001d3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x2b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d121      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCC_OscConfig+0x2b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_RCC_OscConfig+0x2b8>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c46:	f7fe ffff 	bl	8000c48 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	e011      	b.n	8001c72 <HAL_RCC_OscConfig+0x2ce>
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	42470000 	.word	0x42470000
 8001c58:	42470e80 	.word	0x42470e80
 8001c5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c60:	f7fe fff2 	bl	8000c48 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0fd      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b81      	ldr	r3, [pc, #516]	; (8001e78 <HAL_RCC_OscConfig+0x4d4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d106      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
 8001c86:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	e01c      	b.n	8001cce <HAL_RCC_OscConfig+0x32a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001c9c:	4b77      	ldr	r3, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a76      	ldr	r2, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a73      	ldr	r2, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb4:	e00b      	b.n	8001cce <HAL_RCC_OscConfig+0x32a>
 8001cb6:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a70      	ldr	r2, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc2:	4b6e      	ldr	r3, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a6d      	ldr	r2, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ffb7 	bl	8000c48 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7fe ffb3 	bl	8000c48 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0bc      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ee      	beq.n	8001cde <HAL_RCC_OscConfig+0x33a>
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7fe ffa1 	bl	8000c48 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe ff9d 	bl	8000c48 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0a6      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	4b56      	ldr	r3, [pc, #344]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8092 	beq.w	8001e6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d05c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d141      	bne.n	8001de0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <HAL_RCC_OscConfig+0x4dc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe ff71 	bl	8000c48 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7fe ff6d 	bl	8000c48 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e078      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7c:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	019b      	lsls	r3, r3, #6
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	061b      	lsls	r3, r3, #24
 8001dac:	4933      	ldr	r1, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <HAL_RCC_OscConfig+0x4dc>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ff46 	bl	8000c48 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe ff42 	bl	8000c48 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e04d      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
 8001dde:	e045      	b.n	8001e6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x4dc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe ff2f 	bl	8000c48 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe ff2b 	bl	8000c48 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e036      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x44a>
 8001e0c:	e02e      	b.n	8001e6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e029      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x4d8>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d115      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d10d      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	42470060 	.word	0x42470060

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0cc      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d90c      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d044      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e067      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4934      	ldr	r1, [pc, #208]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fe68 	bl	8000c48 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fe64 	bl	8000c48 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e04f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d20c      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fdc8 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00
 8002040:	40023800 	.word	0x40023800
 8002044:	08007fb4 	.word	0x08007fb4
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	2300      	movs	r3, #0
 8002062:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002068:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d00d      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x40>
 8002074:	2b08      	cmp	r3, #8
 8002076:	f200 80bd 	bhi.w	80021f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x34>
 800207e:	2b04      	cmp	r3, #4
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x3a>
 8002082:	e0b7      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b61      	ldr	r3, [pc, #388]	; (800220c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002086:	60bb      	str	r3, [r7, #8]
       break;
 8002088:	e0b7      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800208c:	60bb      	str	r3, [r7, #8]
      break;
 800208e:	e0b4      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002090:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800209a:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d04d      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a6:	4b58      	ldr	r3, [pc, #352]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	461a      	mov	r2, r3
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	ea02 0800 	and.w	r8, r2, r0
 80020be:	ea03 0901 	and.w	r9, r3, r1
 80020c2:	4640      	mov	r0, r8
 80020c4:	4649      	mov	r1, r9
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	014b      	lsls	r3, r1, #5
 80020d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020d4:	0142      	lsls	r2, r0, #5
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	ebb0 0008 	subs.w	r0, r0, r8
 80020de:	eb61 0109 	sbc.w	r1, r1, r9
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	018b      	lsls	r3, r1, #6
 80020ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020f0:	0182      	lsls	r2, r0, #6
 80020f2:	1a12      	subs	r2, r2, r0
 80020f4:	eb63 0301 	sbc.w	r3, r3, r1
 80020f8:	f04f 0000 	mov.w	r0, #0
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	00d9      	lsls	r1, r3, #3
 8002102:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002106:	00d0      	lsls	r0, r2, #3
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	eb12 0208 	adds.w	r2, r2, r8
 8002110:	eb43 0309 	adc.w	r3, r3, r9
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f04f 0100 	mov.w	r1, #0
 800211c:	0259      	lsls	r1, r3, #9
 800211e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002122:	0250      	lsls	r0, r2, #9
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	461a      	mov	r2, r3
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f7fe f850 	bl	80001d8 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4613      	mov	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e04a      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	461a      	mov	r2, r3
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	ea02 0400 	and.w	r4, r2, r0
 800215a:	ea03 0501 	and.w	r5, r3, r1
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	014b      	lsls	r3, r1, #5
 800216c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002170:	0142      	lsls	r2, r0, #5
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	1b00      	subs	r0, r0, r4
 8002178:	eb61 0105 	sbc.w	r1, r1, r5
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	018b      	lsls	r3, r1, #6
 8002186:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800218a:	0182      	lsls	r2, r0, #6
 800218c:	1a12      	subs	r2, r2, r0
 800218e:	eb63 0301 	sbc.w	r3, r3, r1
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	00d9      	lsls	r1, r3, #3
 800219c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a0:	00d0      	lsls	r0, r2, #3
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	1912      	adds	r2, r2, r4
 80021a8:	eb45 0303 	adc.w	r3, r5, r3
 80021ac:	f04f 0000 	mov.w	r0, #0
 80021b0:	f04f 0100 	mov.w	r1, #0
 80021b4:	0299      	lsls	r1, r3, #10
 80021b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ba:	0290      	lsls	r0, r2, #10
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	f7fe f804 	bl	80001d8 <__aeabi_uldivmod>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4613      	mov	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	3301      	adds	r3, #1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	60bb      	str	r3, [r7, #8]
      break;
 80021f2:	e002      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021f6:	60bb      	str	r3, [r7, #8]
      break;
 80021f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fa:	68bb      	ldr	r3, [r7, #8]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	00f42400 	.word	0x00f42400
 8002210:	007a1200 	.word	0x007a1200

08002214 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e022      	b.n	800226c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fb23 	bl	8000884 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f814 	bl	8002274 <HAL_SD_InitCard>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e00a      	b.n	800226c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	b08e      	sub	sp, #56	; 0x38
 8002278:	af04      	add	r7, sp, #16
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002290:	2376      	movs	r3, #118	; 0x76
 8002292:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681d      	ldr	r5, [r3, #0]
 8002298:	466c      	mov	r4, sp
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ac:	4628      	mov	r0, r5
 80022ae:	f001 faad 	bl	800380c <SDIO_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80022b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e031      	b.n	8002328 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_SD_InitCard+0xbc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fae5 	bl	800389e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_SD_InitCard+0xbc>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 ffda 	bl	8003294 <SD_PowerON>
 80022e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00b      	beq.n	8002300 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e013      	b.n	8002328 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fefb 	bl	80030fc <SD_InitCard>
 8002306:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bdb0      	pop	{r4, r5, r7, pc}
 8002330:	422580a0 	.word	0x422580a0

08002334 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0c9      	b.n	80024f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	f040 80c2 	bne.w	80024ee <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	429a      	cmp	r2, r3
 800237c:	d907      	bls.n	800238e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0b0      	b.n	80024f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a50      	ldr	r2, [pc, #320]	; (80024f8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80023b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80023c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2200      	movs	r2, #0
 80023c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3380      	adds	r3, #128	; 0x80
 80023d4:	4619      	mov	r1, r3
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	025b      	lsls	r3, r3, #9
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	f7fe fe23 	bl	8001028 <HAL_DMA_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a40      	ldr	r2, [pc, #256]	; (8002500 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e06b      	b.n	80024f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002418:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	2b01      	cmp	r3, #1
 8002424:	d002      	beq.n	800242c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fac5 	bl	80039c4 <SDMMC_CmdBlockLength>
 800243a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00f      	beq.n	8002462 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e046      	b.n	80024f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	025b      	lsls	r3, r3, #9
 800246c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800246e:	2390      	movs	r3, #144	; 0x90
 8002470:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002472:	2302      	movs	r3, #2
 8002474:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f107 0210 	add.w	r2, r7, #16
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f001 fa6f 	bl	800396c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d90a      	bls.n	80024aa <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2282      	movs	r2, #130	; 0x82
 8002498:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fad3 	bl	8003a4c <SDMMC_CmdReadMultiBlock>
 80024a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80024a8:	e009      	b.n	80024be <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2281      	movs	r2, #129	; 0x81
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 faa6 	bl	8003a08 <SDMMC_CmdReadSingleBlock>
 80024bc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d012      	beq.n	80024ea <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e002      	b.n	80024f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3730      	adds	r7, #48	; 0x30
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	08002f0b 	.word	0x08002f0b
 80024fc:	08002f7d 	.word	0x08002f7d
 8002500:	004005ff 	.word	0x004005ff
 8002504:	4225858c 	.word	0x4225858c

08002508 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	; 0x30
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0ce      	b.n	80026ce <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 80c7 	bne.w	80026cc <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	441a      	add	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	429a      	cmp	r2, r3
 8002550:	d907      	bls.n	8002562 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0b5      	b.n	80026ce <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2203      	movs	r2, #3
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	4a53      	ldr	r2, [pc, #332]	; (80026d8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800258c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8002594:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	2200      	movs	r2, #0
 800259c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d002      	beq.n	80025ac <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fa05 	bl	80039c4 <SDMMC_CmdBlockLength>
 80025ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00f      	beq.n	80025e2 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e075      	b.n	80026ce <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d90a      	bls.n	80025fe <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	22a0      	movs	r2, #160	; 0xa0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fa6d 	bl	8003ad4 <SDMMC_CmdWriteMultiBlock>
 80025fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80025fc:	e009      	b.n	8002612 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2290      	movs	r2, #144	; 0x90
 8002602:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fa40 	bl	8003a90 <SDMMC_CmdWriteSingleBlock>
 8002610:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	431a      	orrs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e047      	b.n	80026ce <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3380      	adds	r3, #128	; 0x80
 8002650:	461a      	mov	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	025b      	lsls	r3, r3, #9
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	f7fe fce6 	bl	8001028 <HAL_DMA_Start_IT>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01c      	beq.n	800269c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002670:	f023 0302 	bic.w	r3, r3, #2
 8002674:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e018      	b.n	80026ce <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800269c:	f04f 33ff 	mov.w	r3, #4294967295
 80026a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	025b      	lsls	r3, r3, #9
 80026a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80026a8:	2390      	movs	r3, #144	; 0x90
 80026aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f107 0210 	add.w	r2, r7, #16
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f952 	bl	800396c <SDIO_ConfigData>

      return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3730      	adds	r7, #48	; 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08002ee1 	.word	0x08002ee1
 80026dc:	08002f7d 	.word	0x08002f7d
 80026e0:	004005ff 	.word	0x004005ff
 80026e4:	4225858c 	.word	0x4225858c

080026e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_SD_IRQHandler+0x2e>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 ffd6 	bl	80036c0 <SD_Read_IT>
 8002714:	e165      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 808f 	beq.w	8002844 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800272e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800273e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002742:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d039      	beq.n	80027d2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_SD_IRQHandler+0x8a>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d011      	beq.n	8002796 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f001 f9ce 	bl	8003b18 <SDMMC_CmdStopTransfer>
 800277c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f92f 	bl	80029f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f240 523a 	movw	r2, #1338	; 0x53a
 800279e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <HAL_SD_IRQHandler+0xda>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f001 fe2c 	bl	8004420 <HAL_SD_RxCpltCallback>
 80027c8:	e10b      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f001 fe1e 	bl	800440c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027d0:	e107      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8102 	beq.w	80029e2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d011      	beq.n	800280c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 f993 	bl	8003b18 <SDMMC_CmdStopTransfer>
 80027f2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8f4 	bl	80029f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80e5 	bne.w	80029e2 <HAL_SD_IRQHandler+0x2fa>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 80df 	bne.w	80029e2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f001 fde5 	bl	800440c <HAL_SD_TxCpltCallback>
}
 8002842:	e0ce      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_SD_IRQHandler+0x17c>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 ff80 	bl	8003762 <SD_Write_IT>
 8002862:	e0be      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286a:	f240 233a 	movw	r3, #570	; 0x23a
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80b6 	beq.w	80029e2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	f043 0202 	orr.w	r2, r3, #2
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	f043 0208 	orr.w	r2, r3, #8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	f043 0208 	orr.w	r2, r3, #8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f240 723a 	movw	r2, #1850	; 0x73a
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002910:	f023 0302 	bic.w	r3, r3, #2
 8002914:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f001 f8fc 	bl	8003b18 <SDMMC_CmdStopTransfer>
 8002920:	4602      	mov	r2, r0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f855 	bl	80029f4 <HAL_SD_ErrorCallback>
}
 800294a:	e04a      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d045      	beq.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <HAL_SD_IRQHandler+0x282>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_SD_IRQHandler+0x304>)
 8002970:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fbae 	bl	80010d8 <HAL_DMA_Abort_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02f      	beq.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fb4a 	bl	8003020 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800298c:	e029      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <HAL_SD_IRQHandler+0x2ba>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d011      	beq.n	80029c6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_SD_IRQHandler+0x308>)
 80029a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fb92 	bl	80010d8 <HAL_DMA_Abort_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d013      	beq.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fb65 	bl	800308e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80029c4:	e00d      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f001 fd0c 	bl	80043f8 <HAL_SD_AbortCallback>
}
 80029e0:	e7ff      	b.n	80029e2 <HAL_SD_IRQHandler+0x2fa>
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	08003021 	.word	0x08003021
 80029f0:	0800308f 	.word	0x0800308f

080029f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a16:	0f9b      	lsrs	r3, r3, #30
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a34:	0e1b      	lsrs	r3, r3, #24
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a46:	0c1b      	lsrs	r3, r3, #16
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a68:	0d1b      	lsrs	r3, r3, #20
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a86:	0bdb      	lsrs	r3, r3, #15
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a98:	0b9b      	lsrs	r3, r3, #14
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aaa:	0b5b      	lsrs	r3, r3, #13
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002abc:	0b1b      	lsrs	r3, r3, #12
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2200      	movs	r2, #0
 8002ace:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d163      	bne.n	8002ba0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002adc:	009a      	lsls	r2, r3, #2
 8002ade:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002ae8:	0f92      	lsrs	r2, r2, #30
 8002aea:	431a      	orrs	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af4:	0edb      	lsrs	r3, r3, #27
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	0e1b      	lsrs	r3, r3, #24
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b18:	0d5b      	lsrs	r3, r3, #21
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	0c9b      	lsrs	r3, r3, #18
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b3c:	0bdb      	lsrs	r3, r3, #15
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	7e1b      	ldrb	r3, [r3, #24]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	3302      	adds	r3, #2
 8002b60:	2201      	movs	r2, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b6a:	fb02 f203 	mul.w	r2, r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	7a1b      	ldrb	r3, [r3, #8]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b8c:	0a52      	lsrs	r2, r2, #9
 8002b8e:	fb02 f203 	mul.w	r2, r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9c:	661a      	str	r2, [r3, #96]	; 0x60
 8002b9e:	e031      	b.n	8002c04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d11d      	bne.n	8002be4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb6:	0c1b      	lsrs	r3, r3, #16
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	029a      	lsls	r2, r3, #10
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60
 8002be2:	e00f      	b.n	8002c04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_SD_GetCardCSD+0x344>)
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e09d      	b.n	8002d40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c08:	0b9b      	lsrs	r3, r3, #14
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1a:	09db      	lsrs	r3, r3, #7
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	0fdb      	lsrs	r3, r3, #31
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	0f5b      	lsrs	r3, r3, #29
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	0d9b      	lsrs	r3, r3, #22
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	0d5b      	lsrs	r3, r3, #21
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	0bdb      	lsrs	r3, r3, #15
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	0b9b      	lsrs	r3, r3, #14
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	0b5b      	lsrs	r3, r3, #13
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	0b1b      	lsrs	r3, r3, #12
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	004005ff 	.word	0x004005ff

08002d50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b08e      	sub	sp, #56	; 0x38
 8002dac:	af04      	add	r7, sp, #16
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d02e      	beq.n	8002e20 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd6:	e029      	b.n	8002e2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dde:	d10a      	bne.n	8002df6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fb0d 	bl	8003400 <SD_WideBus_Enable>
 8002de6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
 8002df4:	e01a      	b.n	8002e2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fb4a 	bl	8003496 <SD_WideBus_Disable>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e10:	e00c      	b.n	8002e2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e1e:	e005      	b.n	8002e2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e024      	b.n	8002e92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681d      	ldr	r5, [r3, #0]
 8002e6e:	466c      	mov	r4, sp
 8002e70:	f107 0318 	add.w	r3, r7, #24
 8002e74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e7c:	f107 030c 	add.w	r3, r7, #12
 8002e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 fcc2 	bl	800380c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	004005ff 	.word	0x004005ff

08002ea0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa7c 	bl	80033b0 <SD_SendStatus>
 8002eb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	0a5b      	lsrs	r3, r3, #9
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002ed6:	693b      	ldr	r3, [r7, #16]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2b82      	cmp	r3, #130	; 0x82
 8002f1e:	d111      	bne.n	8002f44 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fdf7 	bl	8003b18 <SDMMC_CmdStopTransfer>
 8002f2a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff fd58 	bl	80029f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0208 	bic.w	r2, r2, #8
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f001 fa57 	bl	8004420 <HAL_SD_RxCpltCallback>
#endif
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe fa50 	bl	8001430 <HAL_DMA_GetError>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d03e      	beq.n	8003014 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d002      	beq.n	8002fb2 <SD_DMAError+0x36>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d12d      	bne.n	800300e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a19      	ldr	r2, [pc, #100]	; (800301c <SD_DMAError+0xa0>)
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff62 	bl	8002ea0 <HAL_SD_GetCardState>
 8002fdc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d002      	beq.n	8002fea <SD_DMAError+0x6e>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d10a      	bne.n	8003000 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fd92 	bl	8003b18 <SDMMC_CmdStopTransfer>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff fcf0 	bl	80029f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003014:	bf00      	nop
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	004005ff 	.word	0x004005ff

08003020 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f240 523a 	movw	r2, #1338	; 0x53a
 8003036:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ff31 	bl	8002ea0 <HAL_SD_GetCardState>
 800303e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b06      	cmp	r3, #6
 8003052:	d002      	beq.n	800305a <SD_DMATxAbort+0x3a>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10a      	bne.n	8003070 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd5a 	bl	8003b18 <SDMMC_CmdStopTransfer>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f001 f9bd 	bl	80043f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800307e:	e002      	b.n	8003086 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fcb7 	bl	80029f4 <HAL_SD_ErrorCallback>
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff fefa 	bl	8002ea0 <HAL_SD_GetCardState>
 80030ac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d002      	beq.n	80030c8 <SD_DMARxAbort+0x3a>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d10a      	bne.n	80030de <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fd23 	bl	8003b18 <SDMMC_CmdStopTransfer>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f001 f986 	bl	80043f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80030ec:	e002      	b.n	80030f4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff fc80 	bl	80029f4 <HAL_SD_ErrorCallback>
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030fc:	b5b0      	push	{r4, r5, r7, lr}
 80030fe:	b094      	sub	sp, #80	; 0x50
 8003100:	af04      	add	r7, sp, #16
 8003102:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003104:	2301      	movs	r3, #1
 8003106:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fbd5 	bl	80038bc <SDIO_GetPowerState>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003118:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800311c:	e0b6      	b.n	800328c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	2b03      	cmp	r3, #3
 8003124:	d02f      	beq.n	8003186 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fdfe 	bl	8003d2c <SDMMC_CmdSendCID>
 8003130:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <SD_InitCard+0x40>
    {
      return errorstate;
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	e0a7      	b.n	800328c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fbff 	bl	8003946 <SDIO_GetResponse>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2104      	movs	r1, #4
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fbf6 	bl	8003946 <SDIO_GetResponse>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2108      	movs	r1, #8
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fbed 	bl	8003946 <SDIO_GetResponse>
 800316c:	4602      	mov	r2, r0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	210c      	movs	r1, #12
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fbe4 	bl	8003946 <SDIO_GetResponse>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	2b03      	cmp	r3, #3
 800318c:	d00d      	beq.n	80031aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f107 020e 	add.w	r2, r7, #14
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fe04 	bl	8003da6 <SDMMC_CmdSetRelAdd>
 800319e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <SD_InitCard+0xae>
    {
      return errorstate;
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	e070      	b.n	800328c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d036      	beq.n	8003220 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80031b2:	89fb      	ldrh	r3, [r7, #14]
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 fdce 	bl	8003d68 <SDMMC_CmdSendCSD>
 80031cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	e059      	b.n	800328c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fbb1 	bl	8003946 <SDIO_GetResponse>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2104      	movs	r1, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fba8 	bl	8003946 <SDIO_GetResponse>
 80031f6:	4602      	mov	r2, r0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2108      	movs	r1, #8
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fb9f 	bl	8003946 <SDIO_GetResponse>
 8003208:	4602      	mov	r2, r0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	210c      	movs	r1, #12
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fb96 	bl	8003946 <SDIO_GetResponse>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2104      	movs	r1, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fb8d 	bl	8003946 <SDIO_GetResponse>
 800322c:	4603      	mov	r3, r0
 800322e:	0d1a      	lsrs	r2, r3, #20
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003234:	f107 0310 	add.w	r3, r7, #16
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fbe4 	bl	8002a08 <HAL_SD_GetCardCSD>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800324a:	e01f      	b.n	800328c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	461a      	mov	r2, r3
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	4608      	mov	r0, r1
 800325e:	f000 fc7d 	bl	8003b5c <SDMMC_CmdSelDesel>
 8003262:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <SD_InitCard+0x172>
  {
    return errorstate;
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	e00e      	b.n	800328c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681d      	ldr	r5, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	466c      	mov	r4, sp
 8003276:	f103 0210 	add.w	r2, r3, #16
 800327a:	ca07      	ldmia	r2, {r0, r1, r2}
 800327c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003280:	3304      	adds	r3, #4
 8003282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003284:	4628      	mov	r0, r5
 8003286:	f000 fac1 	bl	800380c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3740      	adds	r7, #64	; 0x40
 8003290:	46bd      	mov	sp, r7
 8003292:	bdb0      	pop	{r4, r5, r7, pc}

08003294 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fc78 	bl	8003ba2 <SDMMC_CmdGoIdleState>
 80032b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <SD_PowerON+0x2a>
  {
    return errorstate;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	e072      	b.n	80033a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fc8b 	bl	8003bde <SDMMC_CmdOperCond>
 80032c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fc61 	bl	8003ba2 <SDMMC_CmdGoIdleState>
 80032e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	e05b      	b.n	80033a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d137      	bne.n	800336a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fc8b 	bl	8003c1c <SDMMC_CmdAppCommand>
 8003306:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02d      	beq.n	800336a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800330e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003312:	e047      	b.n	80033a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fc7e 	bl	8003c1c <SDMMC_CmdAppCommand>
 8003320:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <SD_PowerON+0x98>
    {
      return errorstate;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	e03b      	b.n	80033a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	491e      	ldr	r1, [pc, #120]	; (80033ac <SD_PowerON+0x118>)
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fc94 	bl	8003c60 <SDMMC_CmdAppOperCommand>
 8003338:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003340:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003344:	e02e      	b.n	80033a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fafa 	bl	8003946 <SDIO_GetResponse>
 8003352:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	0fdb      	lsrs	r3, r3, #31
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <SD_PowerON+0xcc>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <SD_PowerON+0xce>
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]

    count++;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003370:	4293      	cmp	r3, r2
 8003372:	d802      	bhi.n	800337a <SD_PowerON+0xe6>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0cc      	beq.n	8003314 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003380:	4293      	cmp	r3, r2
 8003382:	d902      	bls.n	800338a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003388:	e00c      	b.n	80033a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
 800339a:	e002      	b.n	80033a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	c1100000 	.word	0xc1100000

080033b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80033c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033c4:	e018      	b.n	80033f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 fd08 	bl	8003de8 <SDMMC_CmdSendStatus>
 80033d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	e009      	b.n	80033f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 faab 	bl	8003946 <SDIO_GetResponse>
 80033f0:	4602      	mov	r2, r0
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fa95 	bl	8003946 <SDIO_GetResponse>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003426:	d102      	bne.n	800342e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003428:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800342c:	e02f      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f879 	bl	800352c <SD_FindSCR>
 800343a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e023      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01c      	beq.n	800348a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f000 fbdd 	bl	8003c1c <SDMMC_CmdAppCommand>
 8003462:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	e00f      	b.n	800348e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fc16 	bl	8003ca6 <SDMMC_CmdBusWidth>
 800347a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	e003      	b.n	800348e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	e001      	b.n	800348e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800348a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fa4a 	bl	8003946 <SDIO_GetResponse>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034bc:	d102      	bne.n	80034c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80034be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c2:	e02f      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f82e 	bl	800352c <SD_FindSCR>
 80034d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	e023      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01c      	beq.n	8003520 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f000 fb92 	bl	8003c1c <SDMMC_CmdAppCommand>
 80034f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	e00f      	b.n	8003524 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fbcb 	bl	8003ca6 <SDMMC_CmdBusWidth>
 8003510:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	e003      	b.n	8003524 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800351c:	2300      	movs	r3, #0
 800351e:	e001      	b.n	8003524 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003520:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b08f      	sub	sp, #60	; 0x3c
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003536:	f7fd fb87 	bl	8000c48 <HAL_GetTick>
 800353a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2108      	movs	r1, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fa36 	bl	80039c4 <SDMMC_CmdBlockLength>
 8003558:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	e0a9      	b.n	80036b8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 fb53 	bl	8003c1c <SDMMC_CmdAppCommand>
 8003576:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <SD_FindSCR+0x56>
  {
    return errorstate;
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	e09a      	b.n	80036b8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003588:	2308      	movs	r3, #8
 800358a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800358c:	2330      	movs	r3, #48	; 0x30
 800358e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003590:	2302      	movs	r3, #2
 8003592:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003594:	2300      	movs	r3, #0
 8003596:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003598:	2301      	movs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f107 0210 	add.w	r2, r7, #16
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f9e0 	bl	800396c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fb9a 	bl	8003cea <SDMMC_CmdSendSCR>
 80035b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d022      	beq.n	8003604 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	e07a      	b.n	80036b8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f107 0208 	add.w	r2, r7, #8
 80035dc:	18d4      	adds	r4, r2, r3
 80035de:	4608      	mov	r0, r1
 80035e0:	f000 f93f 	bl	8003862 <SDIO_ReadFIFO>
 80035e4:	4603      	mov	r3, r0
 80035e6:	6023      	str	r3, [r4, #0]
      index++;
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	3301      	adds	r3, #1
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80035ee:	f7fd fb2b 	bl	8000c48 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d102      	bne.n	8003604 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80035fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003602:	e059      	b.n	80036b8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360a:	f240 432a 	movw	r3, #1066	; 0x42a
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0d6      	beq.n	80035c2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800362a:	2308      	movs	r3, #8
 800362c:	e044      	b.n	80036b8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2202      	movs	r2, #2
 8003642:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003644:	2302      	movs	r3, #2
 8003646:	e037      	b.n	80036b8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2220      	movs	r2, #32
 800365c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800365e:	2320      	movs	r3, #32
 8003660:	e02a      	b.n	80036b8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f240 523a 	movw	r2, #1338	; 0x53a
 800366a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	061a      	lsls	r2, r3, #24
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003678:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003682:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	0e1b      	lsrs	r3, r3, #24
 8003688:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	601a      	str	r2, [r3, #0]
    scr++;
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	3304      	adds	r3, #4
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	061a      	lsls	r2, r3, #24
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	0e1b      	lsrs	r3, r3, #24
 80036b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	373c      	adds	r7, #60	; 0x3c
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03f      	beq.n	800375a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e033      	b.n	8003748 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f8bc 	bl	8003862 <SDIO_ReadFIFO>
 80036ea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3301      	adds	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	701a      	strb	r2, [r3, #0]
      tmp++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3b01      	subs	r3, #1
 8003714:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3b01      	subs	r3, #1
 800372a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0e1b      	lsrs	r3, r3, #24
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3b01      	subs	r3, #1
 8003740:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3301      	adds	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b07      	cmp	r3, #7
 800374c:	d9c8      	bls.n	80036e0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d043      	beq.n	8003804 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e037      	b.n	80037f2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3301      	adds	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	3b01      	subs	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	041a      	lsls	r2, r3, #16
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	061a      	lsls	r2, r3, #24
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3301      	adds	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3b01      	subs	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f107 0208 	add.w	r2, r7, #8
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f848 	bl	800387c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3301      	adds	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d9c4      	bls.n	8003782 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003804:	bf00      	nop
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800380c:	b084      	sub	sp, #16
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	f107 001c 	add.w	r0, r7, #28
 800381a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003822:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003824:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003826:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800382a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800382e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003832:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003836:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003846:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	b004      	add	sp, #16
 8003860:	4770      	bx	lr

08003862 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2203      	movs	r2, #3
 80038aa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80038ac:	2002      	movs	r0, #2
 80038ae:	f7fd f9d7 	bl	8000c60 <HAL_Delay>
  
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0303 	and.w	r3, r3, #3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80038fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003902:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003912:	f023 030f 	bic.w	r3, r3, #15
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	b2db      	uxtb	r3, r3
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3314      	adds	r3, #20
 8003954:	461a      	mov	r2, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	4413      	add	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
}  
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003992:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003998:	431a      	orrs	r2, r3
                       Data->DPSM);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800399e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0

}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80039d2:	2310      	movs	r3, #16
 80039d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ff74 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	2110      	movs	r1, #16
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa40 	bl	8003e7c <SDMMC_GetCmdResp1>
 80039fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039fe:	69fb      	ldr	r3, [r7, #28]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003a16:	2311      	movs	r3, #17
 8003a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a1a:	2340      	movs	r3, #64	; 0x40
 8003a1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a28:	f107 0308 	add.w	r3, r7, #8
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff52 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	2111      	movs	r1, #17
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa1e 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a42:	69fb      	ldr	r3, [r7, #28]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003a5a:	2312      	movs	r3, #18
 8003a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a5e:	2340      	movs	r3, #64	; 0x40
 8003a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a6c:	f107 0308 	add.w	r3, r7, #8
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ff30 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	2112      	movs	r1, #18
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9fc 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a86:	69fb      	ldr	r3, [r7, #28]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003a9e:	2318      	movs	r3, #24
 8003aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aa2:	2340      	movs	r3, #64	; 0x40
 8003aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ff0e 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	2118      	movs	r1, #24
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9da 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aca:	69fb      	ldr	r3, [r7, #28]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003ae2:	2319      	movs	r3, #25
 8003ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003af4:	f107 0308 	add.w	r3, r7, #8
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff feec 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	2119      	movs	r1, #25
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9b8 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003b24:	230c      	movs	r3, #12
 8003b26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b28:	2340      	movs	r3, #64	; 0x40
 8003b2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fecb 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <SDMMC_CmdStopTransfer+0x40>)
 8003b44:	210c      	movs	r1, #12
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f998 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	05f5e100 	.word	0x05f5e100

08003b5c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003b6c:	2307      	movs	r3, #7
 8003b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b70:	2340      	movs	r3, #64	; 0x40
 8003b72:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b7e:	f107 0310 	add.w	r3, r7, #16
 8003b82:	4619      	mov	r1, r3
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff fea7 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	2107      	movs	r1, #7
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f973 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b088      	sub	sp, #32
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bc0:	f107 0308 	add.w	r3, r7, #8
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff fe86 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f92d 	bl	8003e2c <SDMMC_GetCmdError>
 8003bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b088      	sub	sp, #32
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003be6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003bea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003bec:	2308      	movs	r3, #8
 8003bee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bf0:	2340      	movs	r3, #64	; 0x40
 8003bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fe67 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fb16 	bl	800423c <SDMMC_GetCmdResp7>
 8003c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c12:	69fb      	ldr	r3, [r7, #28]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003c2a:	2337      	movs	r3, #55	; 0x37
 8003c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fe48 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	2137      	movs	r1, #55	; 0x37
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f914 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c56:	69fb      	ldr	r3, [r7, #28]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003c76:	2329      	movs	r3, #41	; 0x29
 8003c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c7a:	2340      	movs	r3, #64	; 0x40
 8003c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff fe22 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fa23 	bl	80040e0 <SDMMC_GetCmdResp3>
 8003c9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b088      	sub	sp, #32
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003cb4:	2306      	movs	r3, #6
 8003cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cb8:	2340      	movs	r3, #64	; 0x40
 8003cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fe03 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	2106      	movs	r1, #6
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f8cf 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003cf6:	2333      	movs	r3, #51	; 0x33
 8003cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cfa:	2340      	movs	r3, #64	; 0x40
 8003cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d08:	f107 0308 	add.w	r3, r7, #8
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fde2 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d18:	2133      	movs	r1, #51	; 0x33
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8ae 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d22:	69fb      	ldr	r3, [r7, #28]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d3c:	23c0      	movs	r3, #192	; 0xc0
 8003d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d4a:	f107 0308 	add.w	r3, r7, #8
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff fdc1 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f97c 	bl	8004054 <SDMMC_GetCmdResp2>
 8003d5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003d76:	2309      	movs	r3, #9
 8003d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d7a:	23c0      	movs	r3, #192	; 0xc0
 8003d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fda2 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f95d 	bl	8004054 <SDMMC_GetCmdResp2>
 8003d9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b088      	sub	sp, #32
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003db4:	2303      	movs	r3, #3
 8003db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003db8:	2340      	movs	r3, #64	; 0x40
 8003dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fd83 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f9bc 	bl	8004154 <SDMMC_GetCmdResp6>
 8003ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dde:	69fb      	ldr	r3, [r7, #28]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003df6:	230d      	movs	r3, #13
 8003df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dfa:	2340      	movs	r3, #64	; 0x40
 8003dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e08:	f107 0308 	add.w	r3, r7, #8
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fd62 	bl	80038d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	210d      	movs	r1, #13
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f82e 	bl	8003e7c <SDMMC_GetCmdResp1>
 8003e20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e22:	69fb      	ldr	r3, [r7, #28]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3720      	adds	r7, #32
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003e2c:	b490      	push	{r4, r7}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <SDMMC_GetCmdError+0x48>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0f      	ldr	r2, [pc, #60]	; (8003e78 <SDMMC_GetCmdError+0x4c>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0a5b      	lsrs	r3, r3, #9
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003e48:	4623      	mov	r3, r4
 8003e4a:	1e5c      	subs	r4, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e54:	e009      	b.n	8003e6a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f2      	beq.n	8003e48 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	22c5      	movs	r2, #197	; 0xc5
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc90      	pop	{r4, r7}
 8003e72:	4770      	bx	lr
 8003e74:	20000000 	.word	0x20000000
 8003e78:	10624dd3 	.word	0x10624dd3

08003e7c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	460b      	mov	r3, r1
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <SDMMC_GetCmdResp1+0x1cc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6f      	ldr	r2, [pc, #444]	; (800404c <SDMMC_GetCmdResp1+0x1d0>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	1e5c      	subs	r4, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ea8:	e0c9      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <SDMMC_GetCmdResp1+0x20>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1eb      	bne.n	8003e9c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e0b1      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0a6      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	22c5      	movs	r2, #197	; 0xc5
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fd18 	bl	800392c <SDIO_GetCommandResponse>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	7afb      	ldrb	r3, [r7, #11]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d001      	beq.n	8003f0a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e099      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fd1a 	bl	8003946 <SDIO_GetResponse>
 8003f12:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <SDMMC_GetCmdResp1+0x1d4>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e08d      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da02      	bge.n	8003f2e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f2c:	e087      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003f38:	2340      	movs	r3, #64	; 0x40
 8003f3a:	e080      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	e079      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f58:	e071      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f68:	e069      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f78:	e061      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f88:	e059      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f98:	e051      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa8:	e049      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fb8:	e041      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8003fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc8:	e039      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd8:	e031      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003fe4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fe8:	e029      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ff8:	e021      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004004:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004008:	e019      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004014:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004018:	e011      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004028:	e009      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004034:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004038:	e001      	b.n	800403e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800403a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd90      	pop	{r4, r7, pc}
 8004046:	bf00      	nop
 8004048:	20000000 	.word	0x20000000
 800404c:	10624dd3 	.word	0x10624dd3
 8004050:	fdffe008 	.word	0xfdffe008

08004054 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004054:	b490      	push	{r4, r7}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800405c:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <SDMMC_GetCmdResp2+0x84>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <SDMMC_GetCmdResp2+0x88>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	0a5b      	lsrs	r3, r3, #9
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004070:	4623      	mov	r3, r4
 8004072:	1e5c      	subs	r4, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800407c:	e026      	b.n	80040cc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <SDMMC_GetCmdResp2+0x1c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1eb      	bne.n	8004070 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d004      	beq.n	80040ae <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2204      	movs	r2, #4
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040aa:	2304      	movs	r3, #4
 80040ac:	e00e      	b.n	80040cc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e003      	b.n	80040cc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	22c5      	movs	r2, #197	; 0xc5
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc90      	pop	{r4, r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000000 	.word	0x20000000
 80040dc:	10624dd3 	.word	0x10624dd3

080040e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80040e0:	b490      	push	{r4, r7}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040e8:	4b18      	ldr	r3, [pc, #96]	; (800414c <SDMMC_GetCmdResp3+0x6c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a18      	ldr	r2, [pc, #96]	; (8004150 <SDMMC_GetCmdResp3+0x70>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0a5b      	lsrs	r3, r3, #9
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80040fc:	4623      	mov	r3, r4
 80040fe:	1e5c      	subs	r4, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004108:	e01b      	b.n	8004142 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <SDMMC_GetCmdResp3+0x1c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1eb      	bne.n	80040fc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2204      	movs	r2, #4
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004136:	2304      	movs	r3, #4
 8004138:	e003      	b.n	8004142 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	22c5      	movs	r2, #197	; 0xc5
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bc90      	pop	{r4, r7}
 800414a:	4770      	bx	lr
 800414c:	20000000 	.word	0x20000000
 8004150:	10624dd3 	.word	0x10624dd3

08004154 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	460b      	mov	r3, r1
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004162:	4b34      	ldr	r3, [pc, #208]	; (8004234 <SDMMC_GetCmdResp6+0xe0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a34      	ldr	r2, [pc, #208]	; (8004238 <SDMMC_GetCmdResp6+0xe4>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	0a5b      	lsrs	r3, r3, #9
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004176:	4623      	mov	r3, r4
 8004178:	1e5c      	subs	r4, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800417e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004182:	e052      	b.n	800422a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <SDMMC_GetCmdResp6+0x22>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1eb      	bne.n	8004176 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2204      	movs	r2, #4
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041b0:	2304      	movs	r3, #4
 80041b2:	e03a      	b.n	800422a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e02f      	b.n	800422a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fbae 	bl	800392c <SDIO_GetCommandResponse>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	7afb      	ldrb	r3, [r7, #11]
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d001      	beq.n	80041de <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041da:	2301      	movs	r3, #1
 80041dc:	e025      	b.n	800422a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	22c5      	movs	r2, #197	; 0xc5
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80041e4:	2100      	movs	r1, #0
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff fbad 	bl	8003946 <SDIO_GetResponse>
 80041ec:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004202:	2300      	movs	r3, #0
 8004204:	e011      	b.n	800422a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004214:	e009      	b.n	800422a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004224:	e001      	b.n	800422a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd90      	pop	{r4, r7, pc}
 8004232:	bf00      	nop
 8004234:	20000000 	.word	0x20000000
 8004238:	10624dd3 	.word	0x10624dd3

0800423c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800423c:	b490      	push	{r4, r7}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004244:	4b21      	ldr	r3, [pc, #132]	; (80042cc <SDMMC_GetCmdResp7+0x90>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <SDMMC_GetCmdResp7+0x94>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0a5b      	lsrs	r3, r3, #9
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004258:	4623      	mov	r3, r4
 800425a:	1e5c      	subs	r4, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004264:	e02c      	b.n	80042c0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <SDMMC_GetCmdResp7+0x1c>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1eb      	bne.n	8004258 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2204      	movs	r2, #4
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004292:	2304      	movs	r3, #4
 8004294:	e014      	b.n	80042c0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e009      	b.n	80042c0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80042be:	2300      	movs	r3, #0
  
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc90      	pop	{r4, r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000000 	.word	0x20000000
 80042d0:	10624dd3 	.word	0x10624dd3

080042d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80042d8:	4904      	ldr	r1, [pc, #16]	; (80042ec <MX_FATFS_Init+0x18>)
 80042da:	4805      	ldr	r0, [pc, #20]	; (80042f0 <MX_FATFS_Init+0x1c>)
 80042dc:	f003 fd24 	bl	8007d28 <FATFS_LinkDriver>
 80042e0:	4603      	mov	r3, r0
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <MX_FATFS_Init+0x20>)
 80042e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80042e8:	bf00      	nop
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	200003b0 	.word	0x200003b0
 80042f0:	08007fcc 	.word	0x08007fcc
 80042f4:	200003ac 	.word	0x200003ac

080042f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80042fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80042fe:	4618      	mov	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004312:	f000 f896 	bl	8004442 <BSP_SD_IsDetected>
 8004316:	4603      	mov	r3, r0
 8004318:	2b01      	cmp	r3, #1
 800431a:	d001      	beq.n	8004320 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e012      	b.n	8004346 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004320:	480b      	ldr	r0, [pc, #44]	; (8004350 <BSP_SD_Init+0x48>)
 8004322:	f7fd ff77 	bl	8002214 <HAL_SD_Init>
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004334:	4806      	ldr	r0, [pc, #24]	; (8004350 <BSP_SD_Init+0x48>)
 8004336:	f7fe fd37 	bl	8002da8 <HAL_SD_ConfigWideBusOperation>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004344:	79fb      	ldrb	r3, [r7, #7]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000324 	.word	0x20000324

08004354 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	68f9      	ldr	r1, [r7, #12]
 800436a:	4806      	ldr	r0, [pc, #24]	; (8004384 <BSP_SD_ReadBlocks_DMA+0x30>)
 800436c:	f7fd ffe2 	bl	8002334 <HAL_SD_ReadBlocks_DMA>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000324 	.word	0x20000324

08004388 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	4806      	ldr	r0, [pc, #24]	; (80043b8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80043a0:	f7fe f8b2 	bl	8002508 <HAL_SD_WriteBlocks_DMA>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000324 	.word	0x20000324

080043bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80043c0:	4805      	ldr	r0, [pc, #20]	; (80043d8 <BSP_SD_GetCardState+0x1c>)
 80043c2:	f7fe fd6d 	bl	8002ea0 <HAL_SD_GetCardState>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000324 	.word	0x20000324

080043dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4803      	ldr	r0, [pc, #12]	; (80043f4 <BSP_SD_GetCardInfo+0x18>)
 80043e8:	f7fe fcb2 	bl	8002d50 <HAL_SD_GetCardInfo>
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000324 	.word	0x20000324

080043f8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004400:	f000 f818 	bl	8004434 <BSP_SD_AbortCallback>
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004414:	f000 f9a8 	bl	8004768 <BSP_SD_WriteCpltCallback>
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004428:	f000 f9aa 	bl	8004780 <BSP_SD_ReadCpltCallback>
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0

}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004448:	2301      	movs	r3, #1
 800444a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800444c:	f000 f80c 	bl	8004468 <BSP_PlatformIsDetected>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004456:	2300      	movs	r3, #0
 8004458:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	b2db      	uxtb	r3, r3
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800446e:	2301      	movs	r3, #1
 8004470:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004476:	4806      	ldr	r0, [pc, #24]	; (8004490 <BSP_PlatformIsDetected+0x28>)
 8004478:	f7fd fa62 	bl	8001940 <HAL_GPIO_ReadPin>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8004482:	2300      	movs	r3, #0
 8004484:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8004486:	79fb      	ldrb	r3, [r7, #7]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40020000 	.word	0x40020000

08004494 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800449c:	f7fc fbd4 	bl	8000c48 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80044a2:	e006      	b.n	80044b2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80044a4:	f7ff ff8a 	bl	80043bc <BSP_SD_GetCardState>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e009      	b.n	80044c6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80044b2:	f7fc fbc9 	bl	8000c48 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d8f0      	bhi.n	80044a4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <SD_CheckStatus+0x38>)
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80044e0:	f7ff ff6c 	bl	80043bc <BSP_SD_GetCardState>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <SD_CheckStatus+0x38>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4b04      	ldr	r3, [pc, #16]	; (8004508 <SD_CheckStatus+0x38>)
 80044f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80044fa:	4b03      	ldr	r3, [pc, #12]	; (8004508 <SD_CheckStatus+0x38>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000009 	.word	0x20000009

0800450c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004516:	f7ff fef7 	bl	8004308 <BSP_SD_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ffd4 	bl	80044d0 <SD_CheckStatus>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <SD_initialize+0x34>)
 800452e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <SD_initialize+0x34>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	b2db      	uxtb	r3, r3
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000009 	.word	0x20000009

08004544 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ffbd 	bl	80044d0 <SD_CheckStatus>
 8004556:	4603      	mov	r3, r0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4603      	mov	r3, r0
 800456e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004574:	f247 5030 	movw	r0, #30000	; 0x7530
 8004578:	f7ff ff8c 	bl	8004494 <SD_CheckStatusWithTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	da01      	bge.n	8004586 <SD_read+0x26>
  {
    return res;
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	e03b      	b.n	80045fe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f7ff fee2 	bl	8004354 <BSP_SD_ReadBlocks_DMA>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d132      	bne.n	80045fc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <SD_read+0xa8>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800459c:	f7fc fb54 	bl	8000c48 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80045a2:	bf00      	nop
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <SD_read+0xa8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d108      	bne.n	80045be <SD_read+0x5e>
 80045ac:	f7fc fb4c 	bl	8000c48 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f247 522f 	movw	r2, #29999	; 0x752f
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d9f2      	bls.n	80045a4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <SD_read+0xa8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
 80045ca:	e017      	b.n	80045fc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <SD_read+0xa8>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80045d2:	f7fc fb39 	bl	8000c48 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80045d8:	e007      	b.n	80045ea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80045da:	f7ff feef 	bl	80043bc <BSP_SD_GetCardState>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <SD_read+0x8a>
          {
            res = RES_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80045e8:	e008      	b.n	80045fc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80045ea:	f7fc fb2d 	bl	8000c48 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d9ee      	bls.n	80045da <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2000002c 	.word	0x2000002c

0800460c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <SD_write+0xa8>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004626:	f247 5030 	movw	r0, #30000	; 0x7530
 800462a:	f7ff ff33 	bl	8004494 <SD_CheckStatusWithTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	da01      	bge.n	8004638 <SD_write+0x2c>
  {
    return res;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	e038      	b.n	80046aa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68b8      	ldr	r0, [r7, #8]
 800463e:	f7ff fea3 	bl	8004388 <BSP_SD_WriteBlocks_DMA>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d12f      	bne.n	80046a8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004648:	f7fc fafe 	bl	8000c48 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800464e:	bf00      	nop
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <SD_write+0xa8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d108      	bne.n	800466a <SD_write+0x5e>
 8004658:	f7fc faf6 	bl	8000c48 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f247 522f 	movw	r2, #29999	; 0x752f
 8004666:	4293      	cmp	r3, r2
 8004668:	d9f2      	bls.n	8004650 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <SD_write+0xa8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
 8004676:	e017      	b.n	80046a8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004678:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <SD_write+0xa8>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800467e:	f7fc fae3 	bl	8000c48 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004684:	e007      	b.n	8004696 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004686:	f7ff fe99 	bl	80043bc <BSP_SD_GetCardState>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <SD_write+0x8a>
          {
            res = RES_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
            break;
 8004694:	e008      	b.n	80046a8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004696:	f7fc fad7 	bl	8000c48 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d9ee      	bls.n	8004686 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000028 	.word	0x20000028

080046b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08c      	sub	sp, #48	; 0x30
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	603a      	str	r2, [r7, #0]
 80046c2:	71fb      	strb	r3, [r7, #7]
 80046c4:	460b      	mov	r3, r1
 80046c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <SD_ioctl+0xac>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <SD_ioctl+0x28>
 80046dc:	2303      	movs	r3, #3
 80046de:	e03c      	b.n	800475a <SD_ioctl+0xa2>

  switch (cmd)
 80046e0:	79bb      	ldrb	r3, [r7, #6]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d834      	bhi.n	8004750 <SD_ioctl+0x98>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <SD_ioctl+0x34>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	08004705 	.word	0x08004705
 80046f4:	0800471d 	.word	0x0800471d
 80046f8:	08004737 	.word	0x08004737
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004702:	e028      	b.n	8004756 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fe67 	bl	80043dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800470e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800471a:	e01c      	b.n	8004756 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fe5b 	bl	80043dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	b29a      	uxth	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004734:	e00f      	b.n	8004756 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004736:	f107 030c 	add.w	r3, r7, #12
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fe4e 	bl	80043dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	0a5a      	lsrs	r2, r3, #9
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800474e:	e002      	b.n	8004756 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004750:	2304      	movs	r3, #4
 8004752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800475a:	4618      	mov	r0, r3
 800475c:	3730      	adds	r7, #48	; 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000009 	.word	0x20000009

08004768 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <BSP_SD_WriteCpltCallback+0x14>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000028 	.word	0x20000028

08004780 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <BSP_SD_ReadCpltCallback+0x14>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	2000002c 	.word	0x2000002c

08004798 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <disk_status+0x30>)
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	79fa      	ldrb	r2, [r7, #7]
 80047b0:	4905      	ldr	r1, [pc, #20]	; (80047c8 <disk_status+0x30>)
 80047b2:	440a      	add	r2, r1
 80047b4:	7a12      	ldrb	r2, [r2, #8]
 80047b6:	4610      	mov	r0, r2
 80047b8:	4798      	blx	r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000258 	.word	0x20000258

080047cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <disk_initialize+0x48>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d111      	bne.n	8004808 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	4a0b      	ldr	r2, [pc, #44]	; (8004814 <disk_initialize+0x48>)
 80047e8:	2101      	movs	r1, #1
 80047ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	4a09      	ldr	r2, [pc, #36]	; (8004814 <disk_initialize+0x48>)
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	79fa      	ldrb	r2, [r7, #7]
 80047fa:	4906      	ldr	r1, [pc, #24]	; (8004814 <disk_initialize+0x48>)
 80047fc:	440a      	add	r2, r1
 80047fe:	7a12      	ldrb	r2, [r2, #8]
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000258 	.word	0x20000258

08004818 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <disk_read+0x3c>)
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	689c      	ldr	r4, [r3, #8]
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	4a07      	ldr	r2, [pc, #28]	; (8004854 <disk_read+0x3c>)
 8004838:	4413      	add	r3, r2
 800483a:	7a18      	ldrb	r0, [r3, #8]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	47a0      	blx	r4
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]
  return res;
 8004848:	7dfb      	ldrb	r3, [r7, #23]
}
 800484a:	4618      	mov	r0, r3
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	bd90      	pop	{r4, r7, pc}
 8004852:	bf00      	nop
 8004854:	20000258 	.word	0x20000258

08004858 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <disk_write+0x3c>)
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68dc      	ldr	r4, [r3, #12]
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	4a07      	ldr	r2, [pc, #28]	; (8004894 <disk_write+0x3c>)
 8004878:	4413      	add	r3, r2
 800487a:	7a18      	ldrb	r0, [r3, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	47a0      	blx	r4
 8004884:	4603      	mov	r3, r0
 8004886:	75fb      	strb	r3, [r7, #23]
  return res;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
}
 800488a:	4618      	mov	r0, r3
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	bf00      	nop
 8004894:	20000258 	.word	0x20000258

08004898 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	603a      	str	r2, [r7, #0]
 80048a2:	71fb      	strb	r3, [r7, #7]
 80048a4:	460b      	mov	r3, r1
 80048a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <disk_ioctl+0x38>)
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	79fa      	ldrb	r2, [r7, #7]
 80048b6:	4906      	ldr	r1, [pc, #24]	; (80048d0 <disk_ioctl+0x38>)
 80048b8:	440a      	add	r2, r1
 80048ba:	7a10      	ldrb	r0, [r2, #8]
 80048bc:	79b9      	ldrb	r1, [r7, #6]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	4798      	blx	r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000258 	.word	0x20000258

080048d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3301      	adds	r3, #1
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	b21a      	sxth	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b21b      	sxth	r3, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	b21b      	sxth	r3, r3
 80048f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80048f6:	89fb      	ldrh	r3, [r7, #14]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3303      	adds	r3, #3
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	3202      	adds	r2, #2
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	3201      	adds	r2, #1
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
	return rv;
 800493c:	68fb      	ldr	r3, [r7, #12]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	887a      	ldrh	r2, [r7, #2]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	1c53      	adds	r3, r2, #1
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	6179      	str	r1, [r7, #20]
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	607b      	str	r3, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f1      	bne.n	80049f2 <mem_cpy+0x1a>
	}
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	617a      	str	r2, [r7, #20]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f3      	bne.n	8004a2a <mem_set+0x10>
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	61fa      	str	r2, [r7, #28]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	4619      	mov	r1, r3
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	61ba      	str	r2, [r7, #24]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	1acb      	subs	r3, r1, r3
 8004a7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <mem_cmp+0x40>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0eb      	beq.n	8004a68 <mem_cmp+0x18>

	return r;
 8004a90:	697b      	ldr	r3, [r7, #20]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3724      	adds	r7, #36	; 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004aa8:	e002      	b.n	8004ab0 <chk_chr+0x12>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3301      	adds	r3, #1
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <chk_chr+0x26>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d1f2      	bne.n	8004aaa <chk_chr+0xc>
	return *str;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e029      	b.n	8004b3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004ae8:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <chk_lock+0xb4>)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	4413      	add	r3, r2
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01d      	beq.n	8004b32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004af6:	4a24      	ldr	r2, [pc, #144]	; (8004b88 <chk_lock+0xb4>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	4413      	add	r3, r2
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d116      	bne.n	8004b36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004b08:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <chk_lock+0xb4>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	4413      	add	r3, r2
 8004b10:	3304      	adds	r3, #4
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d10c      	bne.n	8004b36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <chk_lock+0xb4>)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	4413      	add	r3, r2
 8004b24:	3308      	adds	r3, #8
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d102      	bne.n	8004b36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b30:	e007      	b.n	8004b42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d9d2      	bls.n	8004ae8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d109      	bne.n	8004b5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <chk_lock+0x80>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d101      	bne.n	8004b58 <chk_lock+0x84>
 8004b54:	2300      	movs	r3, #0
 8004b56:	e010      	b.n	8004b7a <chk_lock+0xa6>
 8004b58:	2312      	movs	r3, #18
 8004b5a:	e00e      	b.n	8004b7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <chk_lock+0xa0>
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <chk_lock+0xb4>)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	4413      	add	r3, r2
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b72:	d101      	bne.n	8004b78 <chk_lock+0xa4>
 8004b74:	2310      	movs	r3, #16
 8004b76:	e000      	b.n	8004b7a <chk_lock+0xa6>
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000038 	.word	0x20000038

08004b8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	e002      	b.n	8004b9e <enq_lock+0x12>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d806      	bhi.n	8004bb2 <enq_lock+0x26>
 8004ba4:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <enq_lock+0x40>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	4413      	add	r3, r2
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f2      	bne.n	8004b98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000038 	.word	0x20000038

08004bd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e01f      	b.n	8004c20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004be0:	4a41      	ldr	r2, [pc, #260]	; (8004ce8 <inc_lock+0x118>)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	4413      	add	r3, r2
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d113      	bne.n	8004c1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004bf2:	4a3d      	ldr	r2, [pc, #244]	; (8004ce8 <inc_lock+0x118>)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d109      	bne.n	8004c1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004c06:	4a38      	ldr	r2, [pc, #224]	; (8004ce8 <inc_lock+0x118>)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3308      	adds	r3, #8
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d006      	beq.n	8004c28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d9dc      	bls.n	8004be0 <inc_lock+0x10>
 8004c26:	e000      	b.n	8004c2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004c28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d132      	bne.n	8004c96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e002      	b.n	8004c3c <inc_lock+0x6c>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d806      	bhi.n	8004c50 <inc_lock+0x80>
 8004c42:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <inc_lock+0x118>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4413      	add	r3, r2
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f2      	bne.n	8004c36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d101      	bne.n	8004c5a <inc_lock+0x8a>
 8004c56:	2300      	movs	r3, #0
 8004c58:	e040      	b.n	8004cdc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4922      	ldr	r1, [pc, #136]	; (8004ce8 <inc_lock+0x118>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	440b      	add	r3, r1
 8004c66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	491e      	ldr	r1, [pc, #120]	; (8004ce8 <inc_lock+0x118>)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	440b      	add	r3, r1
 8004c74:	3304      	adds	r3, #4
 8004c76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	491a      	ldr	r1, [pc, #104]	; (8004ce8 <inc_lock+0x118>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	440b      	add	r3, r1
 8004c84:	3308      	adds	r3, #8
 8004c86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c88:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <inc_lock+0x118>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	4413      	add	r3, r2
 8004c90:	330c      	adds	r3, #12
 8004c92:	2200      	movs	r2, #0
 8004c94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <inc_lock+0xe0>
 8004c9c:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <inc_lock+0x118>)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	4413      	add	r3, r2
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <inc_lock+0xe0>
 8004cac:	2300      	movs	r3, #0
 8004cae:	e015      	b.n	8004cdc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <inc_lock+0xf8>
 8004cb6:	4a0c      	ldr	r2, [pc, #48]	; (8004ce8 <inc_lock+0x118>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4413      	add	r3, r2
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	e001      	b.n	8004ccc <inc_lock+0xfc>
 8004cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ccc:	4906      	ldr	r1, [pc, #24]	; (8004ce8 <inc_lock+0x118>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	440b      	add	r3, r1
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3301      	adds	r3, #1
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	20000038 	.word	0x20000038

08004cec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d825      	bhi.n	8004d4c <dec_lock+0x60>
		n = Files[i].ctr;
 8004d00:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <dec_lock+0x74>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	4413      	add	r3, r2
 8004d08:	330c      	adds	r3, #12
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004d0e:	89fb      	ldrh	r3, [r7, #14]
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d14:	d101      	bne.n	8004d1a <dec_lock+0x2e>
 8004d16:	2300      	movs	r3, #0
 8004d18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <dec_lock+0x3a>
 8004d20:	89fb      	ldrh	r3, [r7, #14]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004d26:	4a0e      	ldr	r2, [pc, #56]	; (8004d60 <dec_lock+0x74>)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	4413      	add	r3, r2
 8004d2e:	330c      	adds	r3, #12
 8004d30:	89fa      	ldrh	r2, [r7, #14]
 8004d32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <dec_lock+0x5a>
 8004d3a:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <dec_lock+0x74>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	4413      	add	r3, r2
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	737b      	strb	r3, [r7, #13]
 8004d4a:	e001      	b.n	8004d50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004d50:	7b7b      	ldrb	r3, [r7, #13]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000038 	.word	0x20000038

08004d64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e010      	b.n	8004d94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d72:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <clear_lock+0x44>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	4413      	add	r3, r2
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d105      	bne.n	8004d8e <clear_lock+0x2a>
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <clear_lock+0x44>)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	4413      	add	r3, r2
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d9eb      	bls.n	8004d72 <clear_lock+0xe>
	}
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000038 	.word	0x20000038

08004dac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d034      	beq.n	8004e2a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	7858      	ldrb	r0, [r3, #1]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	f7ff fd40 	bl	8004858 <disk_write>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
 8004de2:	e022      	b.n	8004e2a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	1ad2      	subs	r2, r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d217      	bcs.n	8004e2a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	789b      	ldrb	r3, [r3, #2]
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	e010      	b.n	8004e24 <sync_window+0x78>
					wsect += fs->fsize;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4413      	add	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7858      	ldrb	r0, [r3, #1]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e16:	2301      	movs	r3, #1
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	f7ff fd1d 	bl	8004858 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d8eb      	bhi.n	8004e02 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d01b      	beq.n	8004e84 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ffad 	bl	8004dac <sync_window>
 8004e52:	4603      	mov	r3, r0
 8004e54:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d113      	bne.n	8004e84 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7858      	ldrb	r0, [r3, #1]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e66:	2301      	movs	r3, #1
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	f7ff fcd5 	bl	8004818 <disk_read>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff87 	bl	8004dac <sync_window>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d159      	bne.n	8004f5c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d149      	bne.n	8004f44 <sync_fs+0xb4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	791b      	ldrb	r3, [r3, #4]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d145      	bne.n	8004f44 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	899b      	ldrh	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	f7ff fda8 	bl	8004a1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3338      	adds	r3, #56	; 0x38
 8004ece:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004ed2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fd37 	bl	800494a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3338      	adds	r3, #56	; 0x38
 8004ee0:	4921      	ldr	r1, [pc, #132]	; (8004f68 <sync_fs+0xd8>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fd4c 	bl	8004980 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3338      	adds	r3, #56	; 0x38
 8004eec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ef0:	491e      	ldr	r1, [pc, #120]	; (8004f6c <sync_fs+0xdc>)
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fd44 	bl	8004980 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3338      	adds	r3, #56	; 0x38
 8004efc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7ff fd3a 	bl	8004980 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3338      	adds	r3, #56	; 0x38
 8004f10:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7ff fd30 	bl	8004980 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7858      	ldrb	r0, [r3, #1]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f7ff fc8d 	bl	8004858 <disk_write>
			fs->fsi_flag = 0;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fca3 	bl	8004898 <disk_ioctl>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <sync_fs+0xcc>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	41615252 	.word	0x41615252
 8004f6c:	61417272 	.word	0x61417272

08004f70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	3b02      	subs	r3, #2
 8004f7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	3b02      	subs	r3, #2
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d301      	bcc.n	8004f90 <clust2sect+0x20>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e008      	b.n	8004fa2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	895b      	ldrh	r3, [r3, #10]
 8004f94:	461a      	mov	r2, r3
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	fb03 f202 	mul.w	r2, r3, r2
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	4413      	add	r3, r2
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d904      	bls.n	8004fce <get_fat+0x20>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004fce:	2301      	movs	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e0bb      	b.n	800514c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	f000 8083 	beq.w	80050ea <get_fat+0x13c>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	f300 80a7 	bgt.w	8005138 <get_fat+0x18a>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d002      	beq.n	8004ff4 <get_fat+0x46>
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d056      	beq.n	80050a0 <get_fat+0xf2>
 8004ff2:	e0a1      	b.n	8005138 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	899b      	ldrh	r3, [r3, #12]
 800500a:	4619      	mov	r1, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005012:	4413      	add	r3, r2
 8005014:	4619      	mov	r1, r3
 8005016:	6938      	ldr	r0, [r7, #16]
 8005018:	f7ff ff0c 	bl	8004e34 <move_window>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	f040 808d 	bne.w	800513e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	60fa      	str	r2, [r7, #12]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	8992      	ldrh	r2, [r2, #12]
 800502e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005032:	fb02 f201 	mul.w	r2, r2, r1
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005040:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	899b      	ldrh	r3, [r3, #12]
 800504a:	4619      	mov	r1, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005052:	4413      	add	r3, r2
 8005054:	4619      	mov	r1, r3
 8005056:	6938      	ldr	r0, [r7, #16]
 8005058:	f7ff feec 	bl	8004e34 <move_window>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d16f      	bne.n	8005142 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	899b      	ldrh	r3, [r3, #12]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	fbb3 f1f2 	udiv	r1, r3, r2
 800506e:	fb02 f201 	mul.w	r2, r2, r1
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4313      	orrs	r3, r2
 8005084:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <get_fat+0xe8>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	e002      	b.n	800509c <get_fat+0xee>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509c:	617b      	str	r3, [r7, #20]
			break;
 800509e:	e055      	b.n	800514c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	899b      	ldrh	r3, [r3, #12]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b4:	4413      	add	r3, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	6938      	ldr	r0, [r7, #16]
 80050ba:	f7ff febb 	bl	8004e34 <move_window>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d140      	bne.n	8005146 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	8992      	ldrh	r2, [r2, #12]
 80050d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80050d6:	fb02 f200 	mul.w	r2, r2, r0
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	440b      	add	r3, r1
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fbf8 	bl	80048d4 <ld_word>
 80050e4:	4603      	mov	r3, r0
 80050e6:	617b      	str	r3, [r7, #20]
			break;
 80050e8:	e030      	b.n	800514c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	899b      	ldrh	r3, [r3, #12]
 80050f2:	089b      	lsrs	r3, r3, #2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4619      	mov	r1, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80050fe:	4413      	add	r3, r2
 8005100:	4619      	mov	r1, r3
 8005102:	6938      	ldr	r0, [r7, #16]
 8005104:	f7ff fe96 	bl	8004e34 <move_window>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d11d      	bne.n	800514a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	8992      	ldrh	r2, [r2, #12]
 800511c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005120:	fb02 f200 	mul.w	r2, r2, r0
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	440b      	add	r3, r1
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fbeb 	bl	8004904 <ld_dword>
 800512e:	4603      	mov	r3, r0
 8005130:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005134:	617b      	str	r3, [r7, #20]
			break;
 8005136:	e009      	b.n	800514c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005138:	2301      	movs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e006      	b.n	800514c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800513e:	bf00      	nop
 8005140:	e004      	b.n	800514c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800514a:	bf00      	nop
		}
	}

	return val;
 800514c:	697b      	ldr	r3, [r7, #20]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005156:	b590      	push	{r4, r7, lr}
 8005158:	b089      	sub	sp, #36	; 0x24
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005162:	2302      	movs	r3, #2
 8005164:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	f240 8102 	bls.w	8005372 <put_fat+0x21c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	f080 80fc 	bcs.w	8005372 <put_fat+0x21c>
		switch (fs->fs_type) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b03      	cmp	r3, #3
 8005180:	f000 80b6 	beq.w	80052f0 <put_fat+0x19a>
 8005184:	2b03      	cmp	r3, #3
 8005186:	f300 80fd 	bgt.w	8005384 <put_fat+0x22e>
 800518a:	2b01      	cmp	r3, #1
 800518c:	d003      	beq.n	8005196 <put_fat+0x40>
 800518e:	2b02      	cmp	r3, #2
 8005190:	f000 8083 	beq.w	800529a <put_fat+0x144>
 8005194:	e0f6      	b.n	8005384 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4413      	add	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	899b      	ldrh	r3, [r3, #12]
 80051ac:	4619      	mov	r1, r3
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80051b4:	4413      	add	r3, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff fe3b 	bl	8004e34 <move_window>
 80051be:	4603      	mov	r3, r0
 80051c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051c2:	7ffb      	ldrb	r3, [r7, #31]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 80d6 	bne.w	8005376 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	61ba      	str	r2, [r7, #24]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	8992      	ldrh	r2, [r2, #12]
 80051da:	fbb3 f0f2 	udiv	r0, r3, r2
 80051de:	fb02 f200 	mul.w	r2, r2, r0
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	440b      	add	r3, r1
 80051e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <put_fat+0xb8>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	b25a      	sxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	b25b      	sxtb	r3, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	b25b      	sxtb	r3, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e001      	b.n	8005212 <put_fat+0xbc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	899b      	ldrh	r3, [r3, #12]
 8005224:	4619      	mov	r1, r3
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	fbb3 f3f1 	udiv	r3, r3, r1
 800522c:	4413      	add	r3, r2
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fdff 	bl	8004e34 <move_window>
 8005236:	4603      	mov	r3, r0
 8005238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 809c 	bne.w	800537a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	899b      	ldrh	r3, [r3, #12]
 800524c:	461a      	mov	r2, r3
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	fbb3 f0f2 	udiv	r0, r3, r2
 8005254:	fb02 f200 	mul.w	r2, r2, r0
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	440b      	add	r3, r1
 800525c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <put_fat+0x11a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e00e      	b.n	800528e <put_fat+0x138>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	b25b      	sxtb	r3, r3
 8005276:	f023 030f 	bic.w	r3, r3, #15
 800527a:	b25a      	sxtb	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	b25b      	sxtb	r3, r3
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	b25b      	sxtb	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	b25b      	sxtb	r3, r3
 800528c:	b2db      	uxtb	r3, r3
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	70da      	strb	r2, [r3, #3]
			break;
 8005298:	e074      	b.n	8005384 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	899b      	ldrh	r3, [r3, #12]
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	4619      	mov	r1, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ae:	4413      	add	r3, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff fdbe 	bl	8004e34 <move_window>
 80052b8:	4603      	mov	r3, r0
 80052ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052bc:	7ffb      	ldrb	r3, [r7, #31]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d15d      	bne.n	800537e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	8992      	ldrh	r2, [r2, #12]
 80052d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80052d4:	fb02 f200 	mul.w	r2, r2, r0
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	440b      	add	r3, r1
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	b292      	uxth	r2, r2
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fb31 	bl	800494a <st_word>
			fs->wflag = 1;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	70da      	strb	r2, [r3, #3]
			break;
 80052ee:	e049      	b.n	8005384 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	899b      	ldrh	r3, [r3, #12]
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4619      	mov	r1, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	fbb3 f3f1 	udiv	r3, r3, r1
 8005304:	4413      	add	r3, r2
 8005306:	4619      	mov	r1, r3
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff fd93 	bl	8004e34 <move_window>
 800530e:	4603      	mov	r3, r0
 8005310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005312:	7ffb      	ldrb	r3, [r7, #31]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d134      	bne.n	8005382 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	8992      	ldrh	r2, [r2, #12]
 800532c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005330:	fb02 f200 	mul.w	r2, r2, r0
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	440b      	add	r3, r1
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fae3 	bl	8004904 <ld_dword>
 800533e:	4603      	mov	r3, r0
 8005340:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005344:	4323      	orrs	r3, r4
 8005346:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	8992      	ldrh	r2, [r2, #12]
 8005356:	fbb3 f0f2 	udiv	r0, r3, r2
 800535a:	fb02 f200 	mul.w	r2, r2, r0
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	440b      	add	r3, r1
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fb0b 	bl	8004980 <st_dword>
			fs->wflag = 1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	70da      	strb	r2, [r3, #3]
			break;
 8005370:	e008      	b.n	8005384 <put_fat+0x22e>
		}
	}
 8005372:	bf00      	nop
 8005374:	e006      	b.n	8005384 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005376:	bf00      	nop
 8005378:	e004      	b.n	8005384 <put_fat+0x22e>
			if (res != FR_OK) break;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <put_fat+0x22e>
			if (res != FR_OK) break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005382:	bf00      	nop
	return res;
 8005384:	7ffb      	ldrb	r3, [r7, #31]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	; 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd90      	pop	{r4, r7, pc}

0800538e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b088      	sub	sp, #32
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d904      	bls.n	80053b4 <remove_chain+0x26>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d301      	bcc.n	80053b8 <remove_chain+0x2a>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e04b      	b.n	8005450 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	69b8      	ldr	r0, [r7, #24]
 80053c6:	f7ff fec6 	bl	8005156 <put_fat>
 80053ca:	4603      	mov	r3, r0
 80053cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <remove_chain+0x4a>
 80053d4:	7ffb      	ldrb	r3, [r7, #31]
 80053d6:	e03b      	b.n	8005450 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fde7 	bl	8004fae <get_fat>
 80053e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d031      	beq.n	800544c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <remove_chain+0x64>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e02e      	b.n	8005450 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d101      	bne.n	80053fe <remove_chain+0x70>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e028      	b.n	8005450 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80053fe:	2200      	movs	r2, #0
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	69b8      	ldr	r0, [r7, #24]
 8005404:	f7ff fea7 	bl	8005156 <put_fat>
 8005408:	4603      	mov	r3, r0
 800540a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800540c:	7ffb      	ldrb	r3, [r7, #31]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <remove_chain+0x88>
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	e01c      	b.n	8005450 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	3b02      	subs	r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d20b      	bcs.n	800543c <remove_chain+0xae>
			fs->free_clst++;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	d3c6      	bcc.n	80053d8 <remove_chain+0x4a>
 800544a:	e000      	b.n	800544e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800544c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10d      	bne.n	800548a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <create_chain+0x2c>
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d31b      	bcc.n	80054bc <create_chain+0x64>
 8005484:	2301      	movs	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e018      	b.n	80054bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fd8e 	bl	8004fae <get_fat>
 8005492:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d801      	bhi.n	800549e <create_chain+0x46>
 800549a:	2301      	movs	r3, #1
 800549c:	e070      	b.n	8005580 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d101      	bne.n	80054aa <create_chain+0x52>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	e06a      	b.n	8005580 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d201      	bcs.n	80054b8 <create_chain+0x60>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	e063      	b.n	8005580 <create_chain+0x128>
		scl = clst;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	3301      	adds	r3, #1
 80054c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d307      	bcc.n	80054e0 <create_chain+0x88>
				ncl = 2;
 80054d0:	2302      	movs	r3, #2
 80054d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d901      	bls.n	80054e0 <create_chain+0x88>
 80054dc:	2300      	movs	r3, #0
 80054de:	e04f      	b.n	8005580 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80054e0:	69f9      	ldr	r1, [r7, #28]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fd63 	bl	8004fae <get_fat>
 80054e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00e      	beq.n	800550e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d003      	beq.n	80054fe <create_chain+0xa6>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d101      	bne.n	8005502 <create_chain+0xaa>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	e03e      	b.n	8005580 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	429a      	cmp	r2, r3
 8005508:	d1da      	bne.n	80054c0 <create_chain+0x68>
 800550a:	2300      	movs	r3, #0
 800550c:	e038      	b.n	8005580 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800550e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
 8005514:	69f9      	ldr	r1, [r7, #28]
 8005516:	6938      	ldr	r0, [r7, #16]
 8005518:	f7ff fe1d 	bl	8005156 <put_fat>
 800551c:	4603      	mov	r3, r0
 800551e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <create_chain+0xe2>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6938      	ldr	r0, [r7, #16]
 8005532:	f7ff fe10 	bl	8005156 <put_fat>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d116      	bne.n	800556e <create_chain+0x116>
		fs->last_clst = ncl;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	3b02      	subs	r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d804      	bhi.n	800555e <create_chain+0x106>
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	791b      	ldrb	r3, [r3, #4]
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	b2da      	uxtb	r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	711a      	strb	r2, [r3, #4]
 800556c:	e007      	b.n	800557e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d102      	bne.n	800557a <create_chain+0x122>
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	e000      	b.n	800557c <create_chain+0x124>
 800557a:	2301      	movs	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800557e:	69fb      	ldr	r3, [r7, #28]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	3304      	adds	r3, #4
 800559e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	899b      	ldrh	r3, [r3, #12]
 80055a4:	461a      	mov	r2, r3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	8952      	ldrh	r2, [r2, #10]
 80055b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	613a      	str	r2, [r7, #16]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <clmt_clust+0x42>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e010      	b.n	80055ec <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d307      	bcc.n	80055e2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3304      	adds	r3, #4
 80055de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80055e0:	e7e9      	b.n	80055b6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80055e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560e:	d204      	bcs.n	800561a <dir_sdi+0x22>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <dir_sdi+0x26>
		return FR_INT_ERR;
 800561a:	2302      	movs	r3, #2
 800561c:	e071      	b.n	8005702 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <dir_sdi+0x46>
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d902      	bls.n	800563e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10c      	bne.n	800565e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	8912      	ldrh	r2, [r2, #8]
 800564c:	4293      	cmp	r3, r2
 800564e:	d301      	bcc.n	8005654 <dir_sdi+0x5c>
 8005650:	2302      	movs	r3, #2
 8005652:	e056      	b.n	8005702 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	61da      	str	r2, [r3, #28]
 800565c:	e02d      	b.n	80056ba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	895b      	ldrh	r3, [r3, #10]
 8005662:	461a      	mov	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	899b      	ldrh	r3, [r3, #12]
 8005668:	fb03 f302 	mul.w	r3, r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800566e:	e019      	b.n	80056a4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6979      	ldr	r1, [r7, #20]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fc9a 	bl	8004fae <get_fat>
 800567a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d101      	bne.n	8005688 <dir_sdi+0x90>
 8005684:	2301      	movs	r3, #1
 8005686:	e03c      	b.n	8005702 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d904      	bls.n	8005698 <dir_sdi+0xa0>
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	429a      	cmp	r2, r3
 8005696:	d301      	bcc.n	800569c <dir_sdi+0xa4>
 8005698:	2302      	movs	r3, #2
 800569a:	e032      	b.n	8005702 <dir_sdi+0x10a>
			ofs -= csz;
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d2e1      	bcs.n	8005670 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80056ac:	6979      	ldr	r1, [r7, #20]
 80056ae:	6938      	ldr	r0, [r7, #16]
 80056b0:	f7ff fc5e 	bl	8004f70 <clust2sect>
 80056b4:	4602      	mov	r2, r0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <dir_sdi+0xd4>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e01a      	b.n	8005702 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	899b      	ldrh	r3, [r3, #12]
 80056d4:	4619      	mov	r1, r3
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80056dc:	441a      	add	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	899b      	ldrh	r3, [r3, #12]
 80056ec:	461a      	mov	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80056f4:	fb02 f200 	mul.w	r2, r2, r0
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	18ca      	adds	r2, r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	3320      	adds	r3, #32
 8005720:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <dir_next+0x28>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005730:	d301      	bcc.n	8005736 <dir_next+0x2c>
 8005732:	2304      	movs	r3, #4
 8005734:	e0bb      	b.n	80058ae <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	899b      	ldrh	r3, [r3, #12]
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005742:	fb02 f201 	mul.w	r2, r2, r1
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 809d 	bne.w	8005888 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	8912      	ldrh	r2, [r2, #8]
 8005768:	4293      	cmp	r3, r2
 800576a:	f0c0 808d 	bcc.w	8005888 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	61da      	str	r2, [r3, #28]
 8005774:	2304      	movs	r3, #4
 8005776:	e09a      	b.n	80058ae <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	899b      	ldrh	r3, [r3, #12]
 800577c:	461a      	mov	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	fbb3 f3f2 	udiv	r3, r3, r2
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	8952      	ldrh	r2, [r2, #10]
 8005788:	3a01      	subs	r2, #1
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d17b      	bne.n	8005888 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7ff fc08 	bl	8004fae <get_fat>
 800579e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d801      	bhi.n	80057aa <dir_next+0xa0>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e081      	b.n	80058ae <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d101      	bne.n	80057b6 <dir_next+0xac>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07b      	b.n	80058ae <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d359      	bcc.n	8005874 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	61da      	str	r2, [r3, #28]
 80057cc:	2304      	movs	r3, #4
 80057ce:	e06e      	b.n	80058ae <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7ff fe3d 	bl	8005458 <create_chain>
 80057de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <dir_next+0xe0>
 80057e6:	2307      	movs	r3, #7
 80057e8:	e061      	b.n	80058ae <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <dir_next+0xea>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e05c      	b.n	80058ae <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d101      	bne.n	8005800 <dir_next+0xf6>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e056      	b.n	80058ae <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fad3 	bl	8004dac <sync_window>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <dir_next+0x106>
 800580c:	2301      	movs	r3, #1
 800580e:	e04e      	b.n	80058ae <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	899b      	ldrh	r3, [r3, #12]
 800581a:	461a      	mov	r2, r3
 800581c:	2100      	movs	r1, #0
 800581e:	f7ff f8fc 	bl	8004a1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	6979      	ldr	r1, [r7, #20]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fba1 	bl	8004f70 <clust2sect>
 800582e:	4602      	mov	r2, r0
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	635a      	str	r2, [r3, #52]	; 0x34
 8005834:	e012      	b.n	800585c <dir_next+0x152>
						fs->wflag = 1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff fab5 	bl	8004dac <sync_window>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <dir_next+0x142>
 8005848:	2301      	movs	r3, #1
 800584a:	e030      	b.n	80058ae <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3301      	adds	r3, #1
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	635a      	str	r2, [r3, #52]	; 0x34
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	895b      	ldrh	r3, [r3, #10]
 8005860:	461a      	mov	r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4293      	cmp	r3, r2
 8005866:	d3e6      	bcc.n	8005836 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff fb77 	bl	8004f70 <clust2sect>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	899b      	ldrh	r3, [r3, #12]
 8005898:	461a      	mov	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	fbb3 f0f2 	udiv	r0, r3, r2
 80058a0:	fb02 f200 	mul.w	r2, r2, r0
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	18ca      	adds	r2, r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b086      	sub	sp, #24
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80058c6:	2100      	movs	r1, #0
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fe95 	bl	80055f8 <dir_sdi>
 80058ce:	4603      	mov	r3, r0
 80058d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d12b      	bne.n	8005930 <dir_alloc+0x7a>
		n = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	4619      	mov	r1, r3
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff faa6 	bl	8004e34 <move_window>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11d      	bne.n	800592e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2be5      	cmp	r3, #229	; 0xe5
 80058fa:	d004      	beq.n	8005906 <dir_alloc+0x50>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3301      	adds	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d102      	bne.n	800591a <dir_alloc+0x64>
 8005914:	e00c      	b.n	8005930 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800591a:	2101      	movs	r1, #1
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff fef4 	bl	800570a <dir_next>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0d7      	beq.n	80058dc <dir_alloc+0x26>
 800592c:	e000      	b.n	8005930 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800592e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	2b04      	cmp	r3, #4
 8005934:	d101      	bne.n	800593a <dir_alloc+0x84>
 8005936:	2307      	movs	r3, #7
 8005938:	75fb      	strb	r3, [r7, #23]
	return res;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	331a      	adds	r3, #26
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe ffbe 	bl	80048d4 <ld_word>
 8005958:	4603      	mov	r3, r0
 800595a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d109      	bne.n	8005978 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe ffb3 	bl	80048d4 <ld_word>
 800596e:	4603      	mov	r3, r0
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	331a      	adds	r3, #26
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	b292      	uxth	r2, r2
 8005996:	4611      	mov	r1, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe ffd6 	bl	800494a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d109      	bne.n	80059ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f103 0214 	add.w	r2, r3, #20
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe ffc8 	bl	800494a <st_word>
	}
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	331a      	adds	r3, #26
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe ff7e 	bl	80048d4 <ld_word>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <cmp_lfn+0x1e>
 80059de:	2300      	movs	r3, #0
 80059e0:	e059      	b.n	8005a96 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ea:	1e5a      	subs	r2, r3, #1
 80059ec:	4613      	mov	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80059f8:	2301      	movs	r3, #1
 80059fa:	81fb      	strh	r3, [r7, #14]
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e033      	b.n	8005a6a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005a02:	4a27      	ldr	r2, [pc, #156]	; (8005aa0 <cmp_lfn+0xdc>)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	4413      	add	r3, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe ff5f 	bl	80048d4 <ld_word>
 8005a16:	4603      	mov	r3, r0
 8005a18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005a1a:	89fb      	ldrh	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2bfe      	cmp	r3, #254	; 0xfe
 8005a24:	d812      	bhi.n	8005a4c <cmp_lfn+0x88>
 8005a26:	89bb      	ldrh	r3, [r7, #12]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f002 f9c9 	bl	8007dc0 <ff_wtoupper>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	461c      	mov	r4, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	617a      	str	r2, [r7, #20]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f002 f9bd 	bl	8007dc0 <ff_wtoupper>
 8005a46:	4603      	mov	r3, r0
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	d001      	beq.n	8005a50 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e022      	b.n	8005a96 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005a50:	89bb      	ldrh	r3, [r7, #12]
 8005a52:	81fb      	strh	r3, [r7, #14]
 8005a54:	e006      	b.n	8005a64 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005a56:	89bb      	ldrh	r3, [r7, #12]
 8005a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d001      	beq.n	8005a64 <cmp_lfn+0xa0>
 8005a60:	2300      	movs	r3, #0
 8005a62:	e018      	b.n	8005a96 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3301      	adds	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b0c      	cmp	r3, #12
 8005a6e:	d9c8      	bls.n	8005a02 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <cmp_lfn+0xd0>
 8005a7c:	89fb      	ldrh	r3, [r7, #14]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <cmp_lfn+0xd0>
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <cmp_lfn+0xd0>
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005a94:	2301      	movs	r3, #1
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd90      	pop	{r4, r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08008060 	.word	0x08008060

08005aa4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	71fb      	strb	r3, [r7, #7]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	330d      	adds	r3, #13
 8005abe:	79ba      	ldrb	r2, [r7, #6]
 8005ac0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	330b      	adds	r3, #11
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	330c      	adds	r3, #12
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	331a      	adds	r3, #26
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe ff36 	bl	800494a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	82fb      	strh	r3, [r7, #22]
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005af6:	8afb      	ldrh	r3, [r7, #22]
 8005af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <put_lfn+0x6c>
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	61fa      	str	r2, [r7, #28]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005b10:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <put_lfn+0xcc>)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	4413      	add	r3, r2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	8afa      	ldrh	r2, [r7, #22]
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe ff11 	bl	800494a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005b28:	8afb      	ldrh	r3, [r7, #22]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <put_lfn+0x90>
 8005b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b32:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d9da      	bls.n	8005af6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005b40:	8afb      	ldrh	r3, [r7, #22]
 8005b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d006      	beq.n	8005b58 <put_lfn+0xb4>
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <put_lfn+0xbc>
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	79fa      	ldrb	r2, [r7, #7]
 8005b64:	701a      	strb	r2, [r3, #0]
}
 8005b66:	bf00      	nop
 8005b68:	3720      	adds	r7, #32
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	08008060 	.word	0x08008060

08005b74 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	; 0x30
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005b82:	220b      	movs	r2, #11
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7fe ff26 	bl	80049d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d92b      	bls.n	8005bea <gen_numname+0x76>
		sr = seq;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005b96:	e022      	b.n	8005bde <gen_numname+0x6a>
			wc = *lfn++;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	1c9a      	adds	r2, r3, #2
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba6:	e017      	b.n	8005bd8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005a      	lsls	r2, r3, #1
 8005bac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005bb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <gen_numname+0x5e>
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005bcc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005bd0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d9e4      	bls.n	8005ba8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1d8      	bne.n	8005b98 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005bea:	2307      	movs	r3, #7
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	3330      	adds	r3, #48	; 0x30
 8005bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c02:	2b39      	cmp	r3, #57	; 0x39
 8005c04:	d904      	bls.n	8005c10 <gen_numname+0x9c>
 8005c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c0a:	3307      	adds	r3, #7
 8005c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	1e5a      	subs	r2, r3, #1
 8005c14:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005c20:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	091b      	lsrs	r3, r3, #4
 8005c28:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1de      	bne.n	8005bee <gen_numname+0x7a>
	ns[i] = '~';
 8005c30:	f107 0214 	add.w	r2, r7, #20
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	4413      	add	r3, r2
 8005c38:	227e      	movs	r2, #126	; 0x7e
 8005c3a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c40:	e002      	b.n	8005c48 <gen_numname+0xd4>
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	3301      	adds	r3, #1
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d205      	bcs.n	8005c5c <gen_numname+0xe8>
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	4413      	add	r3, r2
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d1f2      	bne.n	8005c42 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	2b07      	cmp	r3, #7
 8005c60:	d808      	bhi.n	8005c74 <gen_numname+0x100>
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005c72:	e000      	b.n	8005c76 <gen_numname+0x102>
 8005c74:	2120      	movs	r1, #32
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	460a      	mov	r2, r1
 8005c82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	2b07      	cmp	r3, #7
 8005c88:	d9e8      	bls.n	8005c5c <gen_numname+0xe8>
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	3730      	adds	r7, #48	; 0x30
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005ca0:	230b      	movs	r3, #11
 8005ca2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	0852      	lsrs	r2, r2, #1
 8005caa:	01db      	lsls	r3, r3, #7
 8005cac:	4313      	orrs	r3, r2
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	6079      	str	r1, [r7, #4]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ed      	bne.n	8005ca4 <sum_sfn+0x10>
	return sum;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fc86 	bl	80055f8 <dir_sdi>
 8005cec:	4603      	mov	r3, r0
 8005cee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <dir_find+0x24>
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	e0a9      	b.n	8005e4e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005cfa:	23ff      	movs	r3, #255	; 0xff
 8005cfc:	753b      	strb	r3, [r7, #20]
 8005cfe:	7d3b      	ldrb	r3, [r7, #20]
 8005d00:	757b      	strb	r3, [r7, #21]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6938      	ldr	r0, [r7, #16]
 8005d12:	f7ff f88f 	bl	8004e34 <move_window>
 8005d16:	4603      	mov	r3, r0
 8005d18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 8090 	bne.w	8005e42 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d2a:	7dbb      	ldrb	r3, [r7, #22]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <dir_find+0x60>
 8005d30:	2304      	movs	r3, #4
 8005d32:	75fb      	strb	r3, [r7, #23]
 8005d34:	e08a      	b.n	8005e4c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	330b      	adds	r3, #11
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005d4a:	7dbb      	ldrb	r3, [r7, #22]
 8005d4c:	2be5      	cmp	r3, #229	; 0xe5
 8005d4e:	d007      	beq.n	8005d60 <dir_find+0x8a>
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <dir_find+0x98>
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b0f      	cmp	r3, #15
 8005d5e:	d006      	beq.n	8005d6e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d60:	23ff      	movs	r3, #255	; 0xff
 8005d62:	757b      	strb	r3, [r7, #21]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d6c:	e05e      	b.n	8005e2c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d136      	bne.n	8005de2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d154      	bne.n	8005e2c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005d82:	7dbb      	ldrb	r3, [r7, #22]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00d      	beq.n	8005da8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	7b5b      	ldrb	r3, [r3, #13]
 8005d92:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005d94:	7dbb      	ldrb	r3, [r7, #22]
 8005d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d9a:	75bb      	strb	r3, [r7, #22]
 8005d9c:	7dbb      	ldrb	r3, [r7, #22]
 8005d9e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005da8:	7dba      	ldrb	r2, [r7, #22]
 8005daa:	7d7b      	ldrb	r3, [r7, #21]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d115      	bne.n	8005ddc <dir_find+0x106>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	330d      	adds	r3, #13
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	7d3a      	ldrb	r2, [r7, #20]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d10e      	bne.n	8005ddc <dir_find+0x106>
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7ff fdfb 	bl	80059c4 <cmp_lfn>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <dir_find+0x106>
 8005dd4:	7d7b      	ldrb	r3, [r7, #21]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e000      	b.n	8005dde <dir_find+0x108>
 8005ddc:	23ff      	movs	r3, #255	; 0xff
 8005dde:	757b      	strb	r3, [r7, #21]
 8005de0:	e024      	b.n	8005e2c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005de2:	7d7b      	ldrb	r3, [r7, #21]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <dir_find+0x126>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff ff51 	bl	8005c94 <sum_sfn>
 8005df2:	4603      	mov	r3, r0
 8005df4:	461a      	mov	r2, r3
 8005df6:	7d3b      	ldrb	r3, [r7, #20]
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d024      	beq.n	8005e46 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <dir_find+0x14a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a18      	ldr	r0, [r3, #32]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3324      	adds	r3, #36	; 0x24
 8005e12:	220b      	movs	r2, #11
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fe fe1b 	bl	8004a50 <mem_cmp>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d014      	beq.n	8005e4a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e20:	23ff      	movs	r3, #255	; 0xff
 8005e22:	757b      	strb	r3, [r7, #21]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff fc6b 	bl	800570a <dir_next>
 8005e34:	4603      	mov	r3, r0
 8005e36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f43f af65 	beq.w	8005d0a <dir_find+0x34>
 8005e40:	e004      	b.n	8005e4c <dir_find+0x176>
		if (res != FR_OK) break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005e4a:	bf00      	nop

	return res;
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08c      	sub	sp, #48	; 0x30
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e6c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <dir_register+0x20>
 8005e74:	2306      	movs	r3, #6
 8005e76:	e0e0      	b.n	800603a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005e78:	2300      	movs	r3, #0
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7c:	e002      	b.n	8005e84 <dir_register+0x2c>
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	3301      	adds	r3, #1
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f4      	bne.n	8005e7e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005e9a:	f107 030c 	add.w	r3, r7, #12
 8005e9e:	220c      	movs	r2, #12
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fd99 	bl	80049d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d032      	beq.n	8005f16 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2240      	movs	r2, #64	; 0x40
 8005eb4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005eb8:	2301      	movs	r3, #1
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ebc:	e016      	b.n	8005eec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	f107 010c 	add.w	r1, r7, #12
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	f7ff fe51 	bl	8005b74 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff feff 	bl	8005cd6 <dir_find>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	3301      	adds	r3, #1
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	2b63      	cmp	r3, #99	; 0x63
 8005ef0:	d9e5      	bls.n	8005ebe <dir_register+0x66>
 8005ef2:	e000      	b.n	8005ef6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005ef4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	2b64      	cmp	r3, #100	; 0x64
 8005efa:	d101      	bne.n	8005f00 <dir_register+0xa8>
 8005efc:	2307      	movs	r3, #7
 8005efe:	e09c      	b.n	800603a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d002      	beq.n	8005f0e <dir_register+0xb6>
 8005f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f0c:	e095      	b.n	800603a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005f0e:	7dfa      	ldrb	r2, [r7, #23]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <dir_register+0xd8>
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	330c      	adds	r3, #12
 8005f24:	4a47      	ldr	r2, [pc, #284]	; (8006044 <dir_register+0x1ec>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	089b      	lsrs	r3, r3, #2
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	e000      	b.n	8005f32 <dir_register+0xda>
 8005f30:	2301      	movs	r3, #1
 8005f32:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fcbd 	bl	80058b6 <dir_alloc>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d148      	bne.n	8005fdc <dir_register+0x184>
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	623b      	str	r3, [r7, #32]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d042      	beq.n	8005fdc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	015b      	lsls	r3, r3, #5
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fb48 	bl	80055f8 <dir_sdi>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d132      	bne.n	8005fdc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3324      	adds	r3, #36	; 0x24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fe8a 	bl	8005c94 <sum_sfn>
 8005f80:	4603      	mov	r3, r0
 8005f82:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	69f8      	ldr	r0, [r7, #28]
 8005f8c:	f7fe ff52 	bl	8004e34 <move_window>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11d      	bne.n	8005fda <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	6918      	ldr	r0, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a19      	ldr	r1, [r3, #32]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	7efb      	ldrb	r3, [r7, #27]
 8005fac:	f7ff fd7a 	bl	8005aa4 <put_lfn>
				fs->wflag = 1;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fba6 	bl	800570a <dir_next>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d107      	bne.n	8005fdc <dir_register+0x184>
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	623b      	str	r3, [r7, #32]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1d5      	bne.n	8005f84 <dir_register+0x12c>
 8005fd8:	e000      	b.n	8005fdc <dir_register+0x184>
				if (res != FR_OK) break;
 8005fda:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d128      	bne.n	8006036 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	69f8      	ldr	r0, [r7, #28]
 8005fec:	f7fe ff22 	bl	8004e34 <move_window>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d11b      	bne.n	8006036 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	2220      	movs	r2, #32
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fd07 	bl	8004a1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a18      	ldr	r0, [r3, #32]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	220b      	movs	r2, #11
 8006016:	4619      	mov	r1, r3
 8006018:	f7fe fcde 	bl	80049d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	330c      	adds	r3, #12
 8006028:	f002 0218 	and.w	r2, r2, #24
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	2201      	movs	r2, #1
 8006034:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800603a:	4618      	mov	r0, r3
 800603c:	3730      	adds	r7, #48	; 0x30
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	4ec4ec4f 	.word	0x4ec4ec4f

08006048 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	61ba      	str	r2, [r7, #24]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4413      	add	r3, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006078:	2b1f      	cmp	r3, #31
 800607a:	d940      	bls.n	80060fe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800607c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800607e:	2b2f      	cmp	r3, #47	; 0x2f
 8006080:	d006      	beq.n	8006090 <create_name+0x48>
 8006082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006084:	2b5c      	cmp	r3, #92	; 0x5c
 8006086:	d110      	bne.n	80060aa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006088:	e002      	b.n	8006090 <create_name+0x48>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	3301      	adds	r3, #1
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	4413      	add	r3, r2
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b2f      	cmp	r3, #47	; 0x2f
 800609a:	d0f6      	beq.n	800608a <create_name+0x42>
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	4413      	add	r3, r2
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b5c      	cmp	r3, #92	; 0x5c
 80060a6:	d0f0      	beq.n	800608a <create_name+0x42>
			break;
 80060a8:	e02a      	b.n	8006100 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2bfe      	cmp	r3, #254	; 0xfe
 80060ae:	d901      	bls.n	80060b4 <create_name+0x6c>
 80060b0:	2306      	movs	r3, #6
 80060b2:	e177      	b.n	80063a4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80060b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80060ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 fe42 	bl	8007d48 <ff_convert>
 80060c4:	4603      	mov	r3, r0
 80060c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80060c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <create_name+0x8a>
 80060ce:	2306      	movs	r3, #6
 80060d0:	e168      	b.n	80063a4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80060d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060d4:	2b7f      	cmp	r3, #127	; 0x7f
 80060d6:	d809      	bhi.n	80060ec <create_name+0xa4>
 80060d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060da:	4619      	mov	r1, r3
 80060dc:	48b3      	ldr	r0, [pc, #716]	; (80063ac <create_name+0x364>)
 80060de:	f7fe fcde 	bl	8004a9e <chk_chr>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <create_name+0xa4>
 80060e8:	2306      	movs	r3, #6
 80060ea:	e15b      	b.n	80063a4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	617a      	str	r2, [r7, #20]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060fa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80060fc:	e7b4      	b.n	8006068 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80060fe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	441a      	add	r2, r3
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800610a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800610c:	2b1f      	cmp	r3, #31
 800610e:	d801      	bhi.n	8006114 <create_name+0xcc>
 8006110:	2304      	movs	r3, #4
 8006112:	e000      	b.n	8006116 <create_name+0xce>
 8006114:	2300      	movs	r3, #0
 8006116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800611a:	e011      	b.n	8006140 <create_name+0xf8>
		w = lfn[di - 1];
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006122:	3b01      	subs	r3, #1
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800612e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006130:	2b20      	cmp	r3, #32
 8006132:	d002      	beq.n	800613a <create_name+0xf2>
 8006134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006136:	2b2e      	cmp	r3, #46	; 0x2e
 8006138:	d106      	bne.n	8006148 <create_name+0x100>
		di--;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	3b01      	subs	r3, #1
 800613e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1ea      	bne.n	800611c <create_name+0xd4>
 8006146:	e000      	b.n	800614a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006148:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	2200      	movs	r2, #0
 8006154:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <create_name+0x118>
 800615c:	2306      	movs	r3, #6
 800615e:	e121      	b.n	80063a4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3324      	adds	r3, #36	; 0x24
 8006164:	220b      	movs	r2, #11
 8006166:	2120      	movs	r1, #32
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fc56 	bl	8004a1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e002      	b.n	800617a <create_name+0x132>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	3301      	adds	r3, #1
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	2b20      	cmp	r3, #32
 8006186:	d0f5      	beq.n	8006174 <create_name+0x12c>
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	2b2e      	cmp	r3, #46	; 0x2e
 8006194:	d0ee      	beq.n	8006174 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <create_name+0x168>
 800619c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a0:	f043 0303 	orr.w	r3, r3, #3
 80061a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80061a8:	e002      	b.n	80061b0 <create_name+0x168>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <create_name+0x182>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80061bc:	3b01      	subs	r3, #1
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	2b2e      	cmp	r3, #46	; 0x2e
 80061c8:	d1ef      	bne.n	80061aa <create_name+0x162>

	i = b = 0; ni = 8;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061d0:	2300      	movs	r3, #0
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	2308      	movs	r3, #8
 80061d6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	61ba      	str	r2, [r7, #24]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80061e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8090 	beq.w	8006310 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	d006      	beq.n	8006204 <create_name+0x1bc>
 80061f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061f8:	2b2e      	cmp	r3, #46	; 0x2e
 80061fa:	d10a      	bne.n	8006212 <create_name+0x1ca>
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	429a      	cmp	r2, r3
 8006202:	d006      	beq.n	8006212 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006208:	f043 0303 	orr.w	r3, r3, #3
 800620c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006210:	e07d      	b.n	800630e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	429a      	cmp	r2, r3
 8006218:	d203      	bcs.n	8006222 <create_name+0x1da>
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	429a      	cmp	r2, r3
 8006220:	d123      	bne.n	800626a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	2b0b      	cmp	r3, #11
 8006226:	d106      	bne.n	8006236 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800622c:	f043 0303 	orr.w	r3, r3, #3
 8006230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006234:	e06f      	b.n	8006316 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	429a      	cmp	r2, r3
 800623c:	d005      	beq.n	800624a <create_name+0x202>
 800623e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006242:	f043 0303 	orr.w	r3, r3, #3
 8006246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	429a      	cmp	r2, r3
 8006250:	d860      	bhi.n	8006314 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	2308      	movs	r3, #8
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	230b      	movs	r3, #11
 800625c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800625e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006268:	e051      	b.n	800630e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800626a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800626c:	2b7f      	cmp	r3, #127	; 0x7f
 800626e:	d914      	bls.n	800629a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fd67 	bl	8007d48 <ff_convert>
 800627a:	4603      	mov	r3, r0
 800627c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800627e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <create_name+0x246>
 8006284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006286:	3b80      	subs	r3, #128	; 0x80
 8006288:	4a49      	ldr	r2, [pc, #292]	; (80063b0 <create_name+0x368>)
 800628a:	5cd3      	ldrb	r3, [r2, r3]
 800628c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800628e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800629a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <create_name+0x268>
 80062a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a2:	4619      	mov	r1, r3
 80062a4:	4843      	ldr	r0, [pc, #268]	; (80063b4 <create_name+0x36c>)
 80062a6:	f7fe fbfa 	bl	8004a9e <chk_chr>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80062b0:	235f      	movs	r3, #95	; 0x5f
 80062b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062b8:	f043 0303 	orr.w	r3, r3, #3
 80062bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062c0:	e01b      	b.n	80062fa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80062c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d909      	bls.n	80062dc <create_name+0x294>
 80062c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ca:	2b5a      	cmp	r3, #90	; 0x5a
 80062cc:	d806      	bhi.n	80062dc <create_name+0x294>
					b |= 2;
 80062ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062d2:	f043 0302 	orr.w	r3, r3, #2
 80062d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062da:	e00e      	b.n	80062fa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80062dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062de:	2b60      	cmp	r3, #96	; 0x60
 80062e0:	d90b      	bls.n	80062fa <create_name+0x2b2>
 80062e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e4:	2b7a      	cmp	r3, #122	; 0x7a
 80062e6:	d808      	bhi.n	80062fa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80062e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f6:	3b20      	subs	r3, #32
 80062f8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	623a      	str	r2, [r7, #32]
 8006300:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006302:	b2d1      	uxtb	r1, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	460a      	mov	r2, r1
 800630a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800630e:	e763      	b.n	80061d8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006314:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800631c:	2be5      	cmp	r3, #229	; 0xe5
 800631e:	d103      	bne.n	8006328 <create_name+0x2e0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2205      	movs	r2, #5
 8006324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b08      	cmp	r3, #8
 800632c:	d104      	bne.n	8006338 <create_name+0x2f0>
 800632e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b0c      	cmp	r3, #12
 8006342:	d005      	beq.n	8006350 <create_name+0x308>
 8006344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	2b03      	cmp	r3, #3
 800634e:	d105      	bne.n	800635c <create_name+0x314>
 8006350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006354:	f043 0302 	orr.w	r3, r3, #2
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d117      	bne.n	8006398 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d105      	bne.n	8006380 <create_name+0x338>
 8006374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006378:	f043 0310 	orr.w	r3, r3, #16
 800637c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	2b04      	cmp	r3, #4
 800638a:	d105      	bne.n	8006398 <create_name+0x350>
 800638c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006390:	f043 0308 	orr.w	r3, r3, #8
 8006394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800639e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80063a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	; 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	08007f6c 	.word	0x08007f6c
 80063b0:	08007fe0 	.word	0x08007fe0
 80063b4:	08007f78 	.word	0x08007f78

080063b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80063cc:	e002      	b.n	80063d4 <follow_path+0x1c>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b2f      	cmp	r3, #47	; 0x2f
 80063da:	d0f8      	beq.n	80063ce <follow_path+0x16>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b5c      	cmp	r3, #92	; 0x5c
 80063e2:	d0f4      	beq.n	80063ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b1f      	cmp	r3, #31
 80063f0:	d80a      	bhi.n	8006408 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2280      	movs	r2, #128	; 0x80
 80063f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80063fa:	2100      	movs	r1, #0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff f8fb 	bl	80055f8 <dir_sdi>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]
 8006406:	e048      	b.n	800649a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006408:	463b      	mov	r3, r7
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fe1b 	bl	8006048 <create_name>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d139      	bne.n	8006490 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fc5a 	bl	8005cd6 <dir_find>
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800642c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	2b04      	cmp	r3, #4
 8006438:	d12c      	bne.n	8006494 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d127      	bne.n	8006494 <follow_path+0xdc>
 8006444:	2305      	movs	r3, #5
 8006446:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006448:	e024      	b.n	8006494 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d121      	bne.n	8006498 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	799b      	ldrb	r3, [r3, #6]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006460:	2305      	movs	r3, #5
 8006462:	75fb      	strb	r3, [r7, #23]
 8006464:	e019      	b.n	800649a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	8992      	ldrh	r2, [r2, #12]
 8006474:	fbb3 f0f2 	udiv	r0, r3, r2
 8006478:	fb02 f200 	mul.w	r2, r2, r0
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	440b      	add	r3, r1
 8006480:	4619      	mov	r1, r3
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fa5e 	bl	8005944 <ld_clust>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800648e:	e7bb      	b.n	8006408 <follow_path+0x50>
			if (res != FR_OK) break;
 8006490:	bf00      	nop
 8006492:	e002      	b.n	800649a <follow_path+0xe2>
				break;
 8006494:	bf00      	nop
 8006496:	e000      	b.n	800649a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006498:	bf00      	nop
			}
		}
	}

	return res;
 800649a:	7dfb      	ldrb	r3, [r7, #23]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d031      	beq.n	800651e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e002      	b.n	80064c8 <get_ldnumber+0x24>
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	3301      	adds	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b1f      	cmp	r3, #31
 80064ce:	d903      	bls.n	80064d8 <get_ldnumber+0x34>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b3a      	cmp	r3, #58	; 0x3a
 80064d6:	d1f4      	bne.n	80064c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b3a      	cmp	r3, #58	; 0x3a
 80064de:	d11c      	bne.n	800651a <get_ldnumber+0x76>
			tp = *path;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	60fa      	str	r2, [r7, #12]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	3b30      	subs	r3, #48	; 0x30
 80064f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b09      	cmp	r3, #9
 80064f6:	d80e      	bhi.n	8006516 <get_ldnumber+0x72>
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d10a      	bne.n	8006516 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d107      	bne.n	8006516 <get_ldnumber+0x72>
					vol = (int)i;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3301      	adds	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	e002      	b.n	8006520 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800651e:	693b      	ldr	r3, [r7, #16]
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	70da      	strb	r2, [r3, #3]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f04f 32ff 	mov.w	r2, #4294967295
 8006542:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fe fc74 	bl	8004e34 <move_window>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <check_fs+0x2a>
 8006552:	2304      	movs	r3, #4
 8006554:	e038      	b.n	80065c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3338      	adds	r3, #56	; 0x38
 800655a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe f9b8 	bl	80048d4 <ld_word>
 8006564:	4603      	mov	r3, r0
 8006566:	461a      	mov	r2, r3
 8006568:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800656c:	429a      	cmp	r2, r3
 800656e:	d001      	beq.n	8006574 <check_fs+0x48>
 8006570:	2303      	movs	r3, #3
 8006572:	e029      	b.n	80065c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800657a:	2be9      	cmp	r3, #233	; 0xe9
 800657c:	d009      	beq.n	8006592 <check_fs+0x66>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006584:	2beb      	cmp	r3, #235	; 0xeb
 8006586:	d11e      	bne.n	80065c6 <check_fs+0x9a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800658e:	2b90      	cmp	r3, #144	; 0x90
 8006590:	d119      	bne.n	80065c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3338      	adds	r3, #56	; 0x38
 8006596:	3336      	adds	r3, #54	; 0x36
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe f9b3 	bl	8004904 <ld_dword>
 800659e:	4603      	mov	r3, r0
 80065a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065a4:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <check_fs+0xa4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d101      	bne.n	80065ae <check_fs+0x82>
 80065aa:	2300      	movs	r3, #0
 80065ac:	e00c      	b.n	80065c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3338      	adds	r3, #56	; 0x38
 80065b2:	3352      	adds	r3, #82	; 0x52
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe f9a5 	bl	8004904 <ld_dword>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4a05      	ldr	r2, [pc, #20]	; (80065d4 <check_fs+0xa8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d101      	bne.n	80065c6 <check_fs+0x9a>
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80065c6:	2302      	movs	r3, #2
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	00544146 	.word	0x00544146
 80065d4:	33544146 	.word	0x33544146

080065d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b096      	sub	sp, #88	; 0x58
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff ff59 	bl	80064a4 <get_ldnumber>
 80065f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da01      	bge.n	80065fe <find_volume+0x26>
 80065fa:	230b      	movs	r3, #11
 80065fc:	e268      	b.n	8006ad0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80065fe:	4ab0      	ldr	r2, [pc, #704]	; (80068c0 <find_volume+0x2e8>)
 8006600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006606:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <find_volume+0x3a>
 800660e:	230c      	movs	r3, #12
 8006610:	e25e      	b.n	8006ad0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006616:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01a      	beq.n	800665e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe f8b3 	bl	8004798 <disk_status>
 8006632:	4603      	mov	r3, r0
 8006634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10c      	bne.n	800665e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <find_volume+0x82>
 800664a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006656:	230a      	movs	r3, #10
 8006658:	e23a      	b.n	8006ad0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800665a:	2300      	movs	r3, #0
 800665c:	e238      	b.n	8006ad0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2200      	movs	r2, #0
 8006662:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	b2da      	uxtb	r2, r3
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe f8ab 	bl	80047cc <disk_initialize>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800667c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006688:	2303      	movs	r3, #3
 800668a:	e221      	b.n	8006ad0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <find_volume+0xca>
 8006692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800669e:	230a      	movs	r3, #10
 80066a0:	e216      	b.n	8006ad0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	7858      	ldrb	r0, [r3, #1]
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	330c      	adds	r3, #12
 80066aa:	461a      	mov	r2, r3
 80066ac:	2102      	movs	r1, #2
 80066ae:	f7fe f8f3 	bl	8004898 <disk_ioctl>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <find_volume+0xe4>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e209      	b.n	8006ad0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	899b      	ldrh	r3, [r3, #12]
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c4:	d80d      	bhi.n	80066e2 <find_volume+0x10a>
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	899b      	ldrh	r3, [r3, #12]
 80066ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ce:	d308      	bcc.n	80066e2 <find_volume+0x10a>
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	899b      	ldrh	r3, [r3, #12]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	899b      	ldrh	r3, [r3, #12]
 80066da:	3b01      	subs	r3, #1
 80066dc:	4013      	ands	r3, r2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <find_volume+0x10e>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e1f4      	b.n	8006ad0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80066ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066ee:	f7ff ff1d 	bl	800652c <check_fs>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80066f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d14b      	bne.n	8006798 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006700:	2300      	movs	r3, #0
 8006702:	643b      	str	r3, [r7, #64]	; 0x40
 8006704:	e01f      	b.n	8006746 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800670c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006714:	4413      	add	r3, r2
 8006716:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	3304      	adds	r3, #4
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d006      	beq.n	8006730 <find_volume+0x158>
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	3308      	adds	r3, #8
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe f8ec 	bl	8004904 <ld_dword>
 800672c:	4602      	mov	r2, r0
 800672e:	e000      	b.n	8006732 <find_volume+0x15a>
 8006730:	2200      	movs	r2, #0
 8006732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800673a:	440b      	add	r3, r1
 800673c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	3301      	adds	r3, #1
 8006744:	643b      	str	r3, [r7, #64]	; 0x40
 8006746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006748:	2b03      	cmp	r3, #3
 800674a:	d9dc      	bls.n	8006706 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800674c:	2300      	movs	r3, #0
 800674e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <find_volume+0x184>
 8006756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006758:	3b01      	subs	r3, #1
 800675a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800675c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006764:	4413      	add	r3, r2
 8006766:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800676a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800676c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <find_volume+0x1a6>
 8006772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006776:	f7ff fed9 	bl	800652c <check_fs>
 800677a:	4603      	mov	r3, r0
 800677c:	e000      	b.n	8006780 <find_volume+0x1a8>
 800677e:	2303      	movs	r3, #3
 8006780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006788:	2b01      	cmp	r3, #1
 800678a:	d905      	bls.n	8006798 <find_volume+0x1c0>
 800678c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678e:	3301      	adds	r3, #1
 8006790:	643b      	str	r3, [r7, #64]	; 0x40
 8006792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006794:	2b03      	cmp	r3, #3
 8006796:	d9e1      	bls.n	800675c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800679c:	2b04      	cmp	r3, #4
 800679e:	d101      	bne.n	80067a4 <find_volume+0x1cc>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e195      	b.n	8006ad0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80067a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d901      	bls.n	80067b0 <find_volume+0x1d8>
 80067ac:	230d      	movs	r3, #13
 80067ae:	e18f      	b.n	8006ad0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	3338      	adds	r3, #56	; 0x38
 80067b4:	330b      	adds	r3, #11
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe f88c 	bl	80048d4 <ld_word>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	899b      	ldrh	r3, [r3, #12]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d001      	beq.n	80067cc <find_volume+0x1f4>
 80067c8:	230d      	movs	r3, #13
 80067ca:	e181      	b.n	8006ad0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	3338      	adds	r3, #56	; 0x38
 80067d0:	3316      	adds	r3, #22
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe f87e 	bl	80048d4 <ld_word>
 80067d8:	4603      	mov	r3, r0
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80067dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <find_volume+0x218>
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	3338      	adds	r3, #56	; 0x38
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe f88b 	bl	8004904 <ld_dword>
 80067ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	789b      	ldrb	r3, [r3, #2]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d005      	beq.n	8006814 <find_volume+0x23c>
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	789b      	ldrb	r3, [r3, #2]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d001      	beq.n	8006814 <find_volume+0x23c>
 8006810:	230d      	movs	r3, #13
 8006812:	e15d      	b.n	8006ad0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	789b      	ldrb	r3, [r3, #2]
 8006818:	461a      	mov	r2, r3
 800681a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681c:	fb02 f303 	mul.w	r3, r2, r3
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006828:	b29a      	uxth	r2, r3
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	895b      	ldrh	r3, [r3, #10]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <find_volume+0x270>
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	895b      	ldrh	r3, [r3, #10]
 800683a:	461a      	mov	r2, r3
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	895b      	ldrh	r3, [r3, #10]
 8006840:	3b01      	subs	r3, #1
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <find_volume+0x274>
 8006848:	230d      	movs	r3, #13
 800684a:	e141      	b.n	8006ad0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	3338      	adds	r3, #56	; 0x38
 8006850:	3311      	adds	r3, #17
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe f83e 	bl	80048d4 <ld_word>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	891b      	ldrh	r3, [r3, #8]
 8006864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006866:	8992      	ldrh	r2, [r2, #12]
 8006868:	0952      	lsrs	r2, r2, #5
 800686a:	b292      	uxth	r2, r2
 800686c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006870:	fb02 f201 	mul.w	r2, r2, r1
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <find_volume+0x2a8>
 800687c:	230d      	movs	r3, #13
 800687e:	e127      	b.n	8006ad0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	3338      	adds	r3, #56	; 0x38
 8006884:	3313      	adds	r3, #19
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe f824 	bl	80048d4 <ld_word>
 800688c:	4603      	mov	r3, r0
 800688e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <find_volume+0x2cc>
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	3338      	adds	r3, #56	; 0x38
 800689a:	3320      	adds	r3, #32
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe f831 	bl	8004904 <ld_dword>
 80068a2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	3338      	adds	r3, #56	; 0x38
 80068a8:	330e      	adds	r3, #14
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe f812 	bl	80048d4 <ld_word>
 80068b0:	4603      	mov	r3, r0
 80068b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80068b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <find_volume+0x2ec>
 80068ba:	230d      	movs	r3, #13
 80068bc:	e108      	b.n	8006ad0 <find_volume+0x4f8>
 80068be:	bf00      	nop
 80068c0:	20000030 	.word	0x20000030

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80068c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c8:	4413      	add	r3, r2
 80068ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068cc:	8911      	ldrh	r1, [r2, #8]
 80068ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d0:	8992      	ldrh	r2, [r2, #12]
 80068d2:	0952      	lsrs	r2, r2, #5
 80068d4:	b292      	uxth	r2, r2
 80068d6:	fbb1 f2f2 	udiv	r2, r1, r2
 80068da:	b292      	uxth	r2, r2
 80068dc:	4413      	add	r3, r2
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80068e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d201      	bcs.n	80068ec <find_volume+0x314>
 80068e8:	230d      	movs	r3, #13
 80068ea:	e0f1      	b.n	8006ad0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80068ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f4:	8952      	ldrh	r2, [r2, #10]
 80068f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <find_volume+0x32e>
 8006902:	230d      	movs	r3, #13
 8006904:	e0e4      	b.n	8006ad0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006906:	2303      	movs	r3, #3
 8006908:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006912:	4293      	cmp	r3, r2
 8006914:	d802      	bhi.n	800691c <find_volume+0x344>
 8006916:	2302      	movs	r3, #2
 8006918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006922:	4293      	cmp	r3, r2
 8006924:	d802      	bhi.n	800692c <find_volume+0x354>
 8006926:	2301      	movs	r3, #1
 8006928:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1c9a      	adds	r2, r3, #2
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006938:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800693a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800693c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800693e:	441a      	add	r2, r3
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006944:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	441a      	add	r2, r3
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800694e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006952:	2b03      	cmp	r3, #3
 8006954:	d11e      	bne.n	8006994 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	3338      	adds	r3, #56	; 0x38
 800695a:	332a      	adds	r3, #42	; 0x2a
 800695c:	4618      	mov	r0, r3
 800695e:	f7fd ffb9 	bl	80048d4 <ld_word>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <find_volume+0x394>
 8006968:	230d      	movs	r3, #13
 800696a:	e0b1      	b.n	8006ad0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	891b      	ldrh	r3, [r3, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <find_volume+0x3a0>
 8006974:	230d      	movs	r3, #13
 8006976:	e0ab      	b.n	8006ad0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	3338      	adds	r3, #56	; 0x38
 800697c:	332c      	adds	r3, #44	; 0x2c
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd ffc0 	bl	8004904 <ld_dword>
 8006984:	4602      	mov	r2, r0
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
 8006992:	e01f      	b.n	80069d4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	891b      	ldrh	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <find_volume+0x3c8>
 800699c:	230d      	movs	r3, #13
 800699e:	e097      	b.n	8006ad0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a6:	441a      	add	r2, r3
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80069ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d103      	bne.n	80069bc <find_volume+0x3e4>
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	e00a      	b.n	80069d2 <find_volume+0x3fa>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	4613      	mov	r3, r2
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	4413      	add	r3, r2
 80069c6:	085a      	lsrs	r2, r3, #1
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80069d2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	6a1a      	ldr	r2, [r3, #32]
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	899b      	ldrh	r3, [r3, #12]
 80069dc:	4619      	mov	r1, r3
 80069de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e0:	440b      	add	r3, r1
 80069e2:	3b01      	subs	r3, #1
 80069e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069e6:	8989      	ldrh	r1, [r1, #12]
 80069e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d201      	bcs.n	80069f4 <find_volume+0x41c>
 80069f0:	230d      	movs	r3, #13
 80069f2:	e06d      	b.n	8006ad0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f04f 32ff 	mov.w	r2, #4294967295
 80069fa:	619a      	str	r2, [r3, #24]
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	699a      	ldr	r2, [r3, #24]
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	2280      	movs	r2, #128	; 0x80
 8006a08:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006a0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d149      	bne.n	8006aa6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	3338      	adds	r3, #56	; 0x38
 8006a16:	3330      	adds	r3, #48	; 0x30
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd ff5b 	bl	80048d4 <ld_word>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d140      	bne.n	8006aa6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a26:	3301      	adds	r3, #1
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a2c:	f7fe fa02 	bl	8004e34 <move_window>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d137      	bne.n	8006aa6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	2200      	movs	r2, #0
 8006a3a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	3338      	adds	r3, #56	; 0x38
 8006a40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd ff45 	bl	80048d4 <ld_word>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d127      	bne.n	8006aa6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	3338      	adds	r3, #56	; 0x38
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fd ff52 	bl	8004904 <ld_dword>
 8006a60:	4603      	mov	r3, r0
 8006a62:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <find_volume+0x500>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d11e      	bne.n	8006aa6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	3338      	adds	r3, #56	; 0x38
 8006a6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fd ff47 	bl	8004904 <ld_dword>
 8006a76:	4603      	mov	r3, r0
 8006a78:	4a18      	ldr	r2, [pc, #96]	; (8006adc <find_volume+0x504>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d113      	bne.n	8006aa6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	3338      	adds	r3, #56	; 0x38
 8006a82:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fd ff3c 	bl	8004904 <ld_dword>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	3338      	adds	r3, #56	; 0x38
 8006a96:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fd ff32 	bl	8004904 <ld_dword>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006aac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <find_volume+0x508>)
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <find_volume+0x508>)
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <find_volume+0x508>)
 8006abc:	881a      	ldrh	r2, [r3, #0]
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <find_volume+0x50c>)
 8006ac6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006aca:	f7fe f94b 	bl	8004d64 <clear_lock>
#endif
	return FR_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3758      	adds	r7, #88	; 0x58
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	41615252 	.word	0x41615252
 8006adc:	61417272 	.word	0x61417272
 8006ae0:	20000034 	.word	0x20000034
 8006ae4:	20000058 	.word	0x20000058

08006ae8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006af2:	2309      	movs	r3, #9
 8006af4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01c      	beq.n	8006b36 <validate+0x4e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d018      	beq.n	8006b36 <validate+0x4e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d013      	beq.n	8006b36 <validate+0x4e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	889a      	ldrh	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	88db      	ldrh	r3, [r3, #6]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d10c      	bne.n	8006b36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fd fe38 	bl	8004798 <disk_status>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <validate+0x4e>
			res = FR_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <validate+0x5a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	e000      	b.n	8006b44 <validate+0x5c>
 8006b42:	2300      	movs	r3, #0
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	6013      	str	r3, [r2, #0]
	return res;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b66:	f107 0310 	add.w	r3, r7, #16
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fc9a 	bl	80064a4 <get_ldnumber>
 8006b70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	da01      	bge.n	8006b7c <f_mount+0x28>
 8006b78:	230b      	movs	r3, #11
 8006b7a:	e02b      	b.n	8006bd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006b7c:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <f_mount+0x88>)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006b8c:	69b8      	ldr	r0, [r7, #24]
 8006b8e:	f7fe f8e9 	bl	8004d64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	490d      	ldr	r1, [pc, #52]	; (8006bdc <f_mount+0x88>)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <f_mount+0x66>
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d001      	beq.n	8006bbe <f_mount+0x6a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e00a      	b.n	8006bd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006bbe:	f107 010c 	add.w	r1, r7, #12
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fd05 	bl	80065d8 <find_volume>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000030 	.word	0x20000030

08006be0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b09a      	sub	sp, #104	; 0x68
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <f_open+0x18>
 8006bf4:	2309      	movs	r3, #9
 8006bf6:	e1bb      	b.n	8006f70 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006c00:	79fa      	ldrb	r2, [r7, #7]
 8006c02:	f107 0114 	add.w	r1, r7, #20
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fce4 	bl	80065d8 <find_volume>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 819f 	bne.w	8006f5e <f_open+0x37e>
		dj.obj.fs = fs;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	f107 0318 	add.w	r3, r7, #24
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fbc3 	bl	80063b8 <follow_path>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11a      	bne.n	8006c76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006c40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da03      	bge.n	8006c52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006c4a:	2306      	movs	r3, #6
 8006c4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006c50:	e011      	b.n	8006c76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	bf14      	ite	ne
 8006c5c:	2301      	movne	r3, #1
 8006c5e:	2300      	moveq	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	f107 0318 	add.w	r3, r7, #24
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd ff32 	bl	8004ad4 <chk_lock>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	f003 031c 	and.w	r3, r3, #28
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d07f      	beq.n	8006d80 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006c80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d017      	beq.n	8006cb8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006c88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d10e      	bne.n	8006cae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006c90:	f7fd ff7c 	bl	8004b8c <enq_lock>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d006      	beq.n	8006ca8 <f_open+0xc8>
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff f8da 	bl	8005e58 <dir_register>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	e000      	b.n	8006caa <f_open+0xca>
 8006ca8:	2312      	movs	r3, #18
 8006caa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	f043 0308 	orr.w	r3, r3, #8
 8006cb4:	71fb      	strb	r3, [r7, #7]
 8006cb6:	e010      	b.n	8006cda <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006cb8:	7fbb      	ldrb	r3, [r7, #30]
 8006cba:	f003 0311 	and.w	r3, r3, #17
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <f_open+0xea>
					res = FR_DENIED;
 8006cc2:	2307      	movs	r3, #7
 8006cc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006cc8:	e007      	b.n	8006cda <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <f_open+0xfa>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006cda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d168      	bne.n	8006db4 <f_open+0x1d4>
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d063      	beq.n	8006db4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006cec:	f7fd fb04 	bl	80042f8 <get_fattime>
 8006cf0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	330e      	adds	r3, #14
 8006cf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fd fe41 	bl	8004980 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	3316      	adds	r3, #22
 8006d02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fd fe3b 	bl	8004980 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	330b      	adds	r3, #11
 8006d0e:	2220      	movs	r2, #32
 8006d10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d16:	4611      	mov	r1, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe fe13 	bl	8005944 <ld_clust>
 8006d1e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d24:	2200      	movs	r2, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fe2b 	bl	8005982 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	331c      	adds	r3, #28
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fd fe24 	bl	8004980 <st_dword>
					fs->wflag = 1;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d037      	beq.n	8006db4 <f_open+0x1d4>
						dw = fs->winsect;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d48:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006d4a:	f107 0318 	add.w	r3, r7, #24
 8006d4e:	2200      	movs	r2, #0
 8006d50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fb1b 	bl	800538e <remove_chain>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006d5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d126      	bne.n	8006db4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe f862 	bl	8004e34 <move_window>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d7a:	3a01      	subs	r2, #1
 8006d7c:	615a      	str	r2, [r3, #20]
 8006d7e:	e019      	b.n	8006db4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006d80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d115      	bne.n	8006db4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006d88:	7fbb      	ldrb	r3, [r7, #30]
 8006d8a:	f003 0310 	and.w	r3, r3, #16
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006d92:	2304      	movs	r3, #4
 8006d94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006d98:	e00c      	b.n	8006db4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <f_open+0x1d4>
 8006da4:	7fbb      	ldrb	r3, [r7, #30]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <f_open+0x1d4>
						res = FR_DENIED;
 8006dae:	2307      	movs	r3, #7
 8006db0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006db4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d128      	bne.n	8006e0e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dcc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bf14      	ite	ne
 8006de6:	2301      	movne	r3, #1
 8006de8:	2300      	moveq	r3, #0
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	f107 0318 	add.w	r3, r7, #24
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fd feeb 	bl	8004bd0 <inc_lock>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <f_open+0x22e>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006e0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 80a3 	bne.w	8006f5e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fd90 	bl	8005944 <ld_clust>
 8006e24:	4602      	mov	r2, r0
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	331c      	adds	r3, #28
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fd fd68 	bl	8004904 <ld_dword>
 8006e34:	4602      	mov	r2, r0
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	88da      	ldrh	r2, [r3, #6]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	79fa      	ldrb	r2, [r7, #7]
 8006e52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3330      	adds	r3, #48	; 0x30
 8006e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fd fdd2 	bl	8004a1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	f003 0320 	and.w	r3, r3, #32
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d06e      	beq.n	8006f5e <f_open+0x37e>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d06a      	beq.n	8006f5e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	895b      	ldrh	r3, [r3, #10]
 8006e94:	461a      	mov	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	899b      	ldrh	r3, [r3, #12]
 8006e9a:	fb03 f302 	mul.w	r3, r3, r2
 8006e9e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eac:	e016      	b.n	8006edc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe f87b 	bl	8004fae <get_fat>
 8006eb8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d802      	bhi.n	8006ec6 <f_open+0x2e6>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ecc:	d102      	bne.n	8006ed4 <f_open+0x2f4>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006edc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <f_open+0x30c>
 8006ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d8e0      	bhi.n	8006eae <f_open+0x2ce>
				}
				fp->clust = clst;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ef0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006ef2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d131      	bne.n	8006f5e <f_open+0x37e>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	899b      	ldrh	r3, [r3, #12]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f06:	fb02 f201 	mul.w	r2, r2, r1
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d026      	beq.n	8006f5e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe f82b 	bl	8004f70 <clust2sect>
 8006f1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <f_open+0x34a>
						res = FR_INT_ERR;
 8006f22:	2302      	movs	r3, #2
 8006f24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006f28:	e019      	b.n	8006f5e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	899b      	ldrh	r3, [r3, #12]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	7858      	ldrb	r0, [r3, #1]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f7fd fc63 	bl	8004818 <disk_read>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <f_open+0x37e>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <f_open+0x38c>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3768      	adds	r7, #104	; 0x68
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08c      	sub	sp, #48	; 0x30
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f107 0210 	add.w	r2, r7, #16
 8006f96:	4611      	mov	r1, r2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff fda5 	bl	8006ae8 <validate>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <f_write+0x44>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	7d5b      	ldrb	r3, [r3, #21]
 8006fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <f_write+0x4a>
 8006fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fc0:	e16a      	b.n	8007298 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	7d1b      	ldrb	r3, [r3, #20]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <f_write+0x5a>
 8006fce:	2307      	movs	r3, #7
 8006fd0:	e162      	b.n	8007298 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	441a      	add	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	f080 814c 	bcs.w	800727c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006fec:	e146      	b.n	800727c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	8992      	ldrh	r2, [r2, #12]
 8006ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ffa:	fb02 f201 	mul.w	r2, r2, r1
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	f040 80f1 	bne.w	80071e8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	8992      	ldrh	r2, [r2, #12]
 800700e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	8952      	ldrh	r2, [r2, #10]
 8007016:	3a01      	subs	r2, #1
 8007018:	4013      	ands	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d143      	bne.n	80070aa <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d11a      	bne.n	800706c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fa0c 	bl	8005458 <create_chain>
 8007040:	62b8      	str	r0, [r7, #40]	; 0x28
 8007042:	e013      	b.n	800706c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	4619      	mov	r1, r3
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7fe fa98 	bl	8005588 <clmt_clust>
 8007058:	62b8      	str	r0, [r7, #40]	; 0x28
 800705a:	e007      	b.n	800706c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f7fe f9f7 	bl	8005458 <create_chain>
 800706a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 8109 	beq.w	8007286 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2b01      	cmp	r3, #1
 8007078:	d104      	bne.n	8007084 <f_write+0x10c>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2202      	movs	r2, #2
 800707e:	755a      	strb	r2, [r3, #21]
 8007080:	2302      	movs	r3, #2
 8007082:	e109      	b.n	8007298 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d104      	bne.n	8007096 <f_write+0x11e>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	755a      	strb	r2, [r3, #21]
 8007092:	2301      	movs	r3, #1
 8007094:	e100      	b.n	8007298 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800709a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <f_write+0x132>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	7d1b      	ldrb	r3, [r3, #20]
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da18      	bge.n	80070e6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	7858      	ldrb	r0, [r3, #1]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a1a      	ldr	r2, [r3, #32]
 80070c2:	2301      	movs	r3, #1
 80070c4:	f7fd fbc8 	bl	8004858 <disk_write>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d004      	beq.n	80070d8 <f_write+0x160>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	755a      	strb	r2, [r3, #21]
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0df      	b.n	8007298 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	7d1b      	ldrb	r3, [r3, #20]
 80070dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7fd ff3e 	bl	8004f70 <clust2sect>
 80070f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <f_write+0x18e>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2202      	movs	r2, #2
 8007100:	755a      	strb	r2, [r3, #21]
 8007102:	2302      	movs	r3, #2
 8007104:	e0c8      	b.n	8007298 <f_write+0x320>
			sect += csect;
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	4413      	add	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	899b      	ldrh	r3, [r3, #12]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	fbb3 f3f2 	udiv	r3, r3, r2
 800711a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d043      	beq.n	80071aa <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	4413      	add	r3, r2
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	8952      	ldrh	r2, [r2, #10]
 800712c:	4293      	cmp	r3, r2
 800712e:	d905      	bls.n	800713c <f_write+0x1c4>
					cc = fs->csize - csect;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	895b      	ldrh	r3, [r3, #10]
 8007134:	461a      	mov	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	7858      	ldrb	r0, [r3, #1]
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	69f9      	ldr	r1, [r7, #28]
 8007146:	f7fd fb87 	bl	8004858 <disk_write>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <f_write+0x1e2>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	755a      	strb	r2, [r3, #21]
 8007156:	2301      	movs	r3, #1
 8007158:	e09e      	b.n	8007298 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1a      	ldr	r2, [r3, #32]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	6a3a      	ldr	r2, [r7, #32]
 8007164:	429a      	cmp	r2, r3
 8007166:	d918      	bls.n	800719a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a1a      	ldr	r2, [r3, #32]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	8992      	ldrh	r2, [r2, #12]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	18d1      	adds	r1, r2, r3
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	899b      	ldrh	r3, [r3, #12]
 8007186:	461a      	mov	r2, r3
 8007188:	f7fd fc26 	bl	80049d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	7d1b      	ldrb	r3, [r3, #20]
 8007190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	899b      	ldrh	r3, [r3, #12]
 800719e:	461a      	mov	r2, r3
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80071a8:	e04b      	b.n	8007242 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d016      	beq.n	80071e2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80071bc:	429a      	cmp	r2, r3
 80071be:	d210      	bcs.n	80071e2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	7858      	ldrb	r0, [r3, #1]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071ca:	2301      	movs	r3, #1
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	f7fd fb23 	bl	8004818 <disk_read>
 80071d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	755a      	strb	r2, [r3, #21]
 80071de:	2301      	movs	r3, #1
 80071e0:	e05a      	b.n	8007298 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	899b      	ldrh	r3, [r3, #12]
 80071ec:	4618      	mov	r0, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	8992      	ldrh	r2, [r2, #12]
 80071f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80071fa:	fb02 f201 	mul.w	r2, r2, r1
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	1ac3      	subs	r3, r0, r3
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d901      	bls.n	8007210 <f_write+0x298>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	8992      	ldrh	r2, [r2, #12]
 800721e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007222:	fb02 f200 	mul.w	r2, r2, r0
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	440b      	add	r3, r1
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	69f9      	ldr	r1, [r7, #28]
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd fbd2 	bl	80049d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	7d1b      	ldrb	r3, [r3, #20]
 8007238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800723c:	b2da      	uxtb	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	4413      	add	r3, r2
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	619a      	str	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	429a      	cmp	r2, r3
 8007260:	bf38      	it	cc
 8007262:	461a      	movcc	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	60da      	str	r2, [r3, #12]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	441a      	add	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f47f aeb5 	bne.w	8006fee <f_write+0x76>
 8007284:	e000      	b.n	8007288 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007286:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	7d1b      	ldrb	r3, [r3, #20]
 800728c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3730      	adds	r7, #48	; 0x30
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f107 0208 	add.w	r2, r7, #8
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff fc19 	bl	8006ae8 <validate>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d168      	bne.n	8007392 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	7d1b      	ldrb	r3, [r3, #20]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d062      	beq.n	8007392 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	7d1b      	ldrb	r3, [r3, #20]
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	da15      	bge.n	8007302 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	7858      	ldrb	r0, [r3, #1]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1a      	ldr	r2, [r3, #32]
 80072e4:	2301      	movs	r3, #1
 80072e6:	f7fd fab7 	bl	8004858 <disk_write>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <f_sync+0x54>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e04f      	b.n	8007394 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7d1b      	ldrb	r3, [r3, #20]
 80072f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007302:	f7fc fff9 	bl	80042f8 <get_fattime>
 8007306:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	4619      	mov	r1, r3
 8007310:	4610      	mov	r0, r2
 8007312:	f7fd fd8f 	bl	8004e34 <move_window>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d138      	bne.n	8007392 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	330b      	adds	r3, #11
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	330b      	adds	r3, #11
 8007330:	f042 0220 	orr.w	r2, r2, #32
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	461a      	mov	r2, r3
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	f7fe fb1d 	bl	8005982 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f103 021c 	add.w	r2, r3, #28
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f7fd fb13 	bl	8004980 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3316      	adds	r3, #22
 800735e:	6939      	ldr	r1, [r7, #16]
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd fb0d 	bl	8004980 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3312      	adds	r3, #18
 800736a:	2100      	movs	r1, #0
 800736c:	4618      	mov	r0, r3
 800736e:	f7fd faec 	bl	800494a <st_word>
					fs->wflag = 1;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2201      	movs	r2, #1
 8007376:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd fd88 	bl	8004e90 <sync_fs>
 8007380:	4603      	mov	r3, r0
 8007382:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7d1b      	ldrb	r3, [r3, #20]
 8007388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007392:	7dfb      	ldrb	r3, [r7, #23]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff ff7b 	bl	80072a0 <f_sync>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d118      	bne.n	80073e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f107 0208 	add.w	r2, r7, #8
 80073ba:	4611      	mov	r1, r2
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fb93 	bl	8006ae8 <validate>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd fc8b 	bl	8004cec <dec_lock>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b09d      	sub	sp, #116	; 0x74
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	607a      	str	r2, [r7, #4]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	460b      	mov	r3, r1
 80073fe:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8007400:	2301      	movs	r3, #1
 8007402:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8007404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007408:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800740a:	f107 030c 	add.w	r3, r7, #12
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff f848 	bl	80064a4 <get_ldnumber>
 8007414:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	da02      	bge.n	8007422 <f_mkfs+0x32>
 800741c:	230b      	movs	r3, #11
 800741e:	f000 bc31 	b.w	8007c84 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8007422:	4aa5      	ldr	r2, [pc, #660]	; (80076b8 <f_mkfs+0x2c8>)
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <f_mkfs+0x4a>
 800742e:	4aa2      	ldr	r2, [pc, #648]	; (80076b8 <f_mkfs+0x2c8>)
 8007430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800743a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8007440:	2300      	movs	r3, #0
 8007442:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8007446:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800744a:	4618      	mov	r0, r3
 800744c:	f7fd f9be 	bl	80047cc <disk_initialize>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8007456:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <f_mkfs+0x78>
 8007462:	2303      	movs	r3, #3
 8007464:	f000 bc0e 	b.w	8007c84 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007468:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <f_mkfs+0x8a>
 8007474:	230a      	movs	r3, #10
 8007476:	f000 bc05 	b.w	8007c84 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800747a:	f107 0214 	add.w	r2, r7, #20
 800747e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007482:	2103      	movs	r1, #3
 8007484:	4618      	mov	r0, r3
 8007486:	f7fd fa07 	bl	8004898 <disk_ioctl>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10c      	bne.n	80074aa <f_mkfs+0xba>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <f_mkfs+0xba>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800749c:	d805      	bhi.n	80074aa <f_mkfs+0xba>
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	1e5a      	subs	r2, r3, #1
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <f_mkfs+0xbe>
 80074aa:	2301      	movs	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 80074ae:	f107 021a 	add.w	r2, r7, #26
 80074b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074b6:	2102      	movs	r1, #2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fd f9ed 	bl	8004898 <disk_ioctl>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <f_mkfs+0xd8>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e3dd      	b.n	8007c84 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 80074c8:	8b7b      	ldrh	r3, [r7, #26]
 80074ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ce:	d80a      	bhi.n	80074e6 <f_mkfs+0xf6>
 80074d0:	8b7b      	ldrh	r3, [r7, #26]
 80074d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d6:	d306      	bcc.n	80074e6 <f_mkfs+0xf6>
 80074d8:	8b7b      	ldrh	r3, [r7, #26]
 80074da:	461a      	mov	r2, r3
 80074dc:	8b7b      	ldrh	r3, [r7, #26]
 80074de:	3b01      	subs	r3, #1
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <f_mkfs+0xfa>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e3cc      	b.n	8007c84 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <f_mkfs+0x10a>
 80074f0:	8b7b      	ldrh	r3, [r7, #26]
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d309      	bcc.n	800750e <f_mkfs+0x11e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007500:	d805      	bhi.n	800750e <f_mkfs+0x11e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1e5a      	subs	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <f_mkfs+0x122>
 800750e:	2313      	movs	r3, #19
 8007510:	e3b8      	b.n	8007c84 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 8007512:	8b7b      	ldrh	r3, [r7, #26]
 8007514:	461a      	mov	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	fbb3 f3f2 	udiv	r3, r3, r2
 800751c:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8007522:	8b7b      	ldrh	r3, [r7, #26]
 8007524:	461a      	mov	r2, r3
 8007526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800752a:	fbb3 f3f2 	udiv	r3, r3, r2
 800752e:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8007530:	8b7b      	ldrh	r3, [r7, #26]
 8007532:	461a      	mov	r2, r3
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <f_mkfs+0x156>
 8007542:	230e      	movs	r3, #14
 8007544:	e39e      	b.n	8007c84 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8007546:	f107 0210 	add.w	r2, r7, #16
 800754a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800754e:	2101      	movs	r1, #1
 8007550:	4618      	mov	r0, r3
 8007552:	f7fd f9a1 	bl	8004898 <disk_ioctl>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <f_mkfs+0x170>
 800755c:	2301      	movs	r3, #1
 800755e:	e391      	b.n	8007c84 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <f_mkfs+0x17e>
 800756a:	2300      	movs	r3, #0
 800756c:	e000      	b.n	8007570 <f_mkfs+0x180>
 800756e:	233f      	movs	r3, #63	; 0x3f
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007576:	429a      	cmp	r2, r3
 8007578:	d901      	bls.n	800757e <f_mkfs+0x18e>
 800757a:	230e      	movs	r3, #14
 800757c:	e382      	b.n	8007c84 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b7f      	cmp	r3, #127	; 0x7f
 800758a:	d801      	bhi.n	8007590 <f_mkfs+0x1a0>
 800758c:	230e      	movs	r3, #14
 800758e:	e379      	b.n	8007c84 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d901      	bls.n	800759a <f_mkfs+0x1aa>
 8007596:	2313      	movs	r3, #19
 8007598:	e374      	b.n	8007c84 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00d      	beq.n	80075c0 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d004      	beq.n	80075b8 <f_mkfs+0x1c8>
 80075ae:	7afb      	ldrb	r3, [r7, #11]
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d103      	bne.n	80075c0 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 80075b8:	2303      	movs	r3, #3
 80075ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80075be:	e009      	b.n	80075d4 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <f_mkfs+0x1de>
 80075ca:	2313      	movs	r3, #19
 80075cc:	e35a      	b.n	8007c84 <f_mkfs+0x894>
		fmt = FS_FAT16;
 80075ce:	2302      	movs	r3, #2
 80075d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80075d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d13c      	bne.n	800765a <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 80075e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d11b      	bne.n	800761e <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	0c5b      	lsrs	r3, r3, #17
 80075ea:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80075ec:	2300      	movs	r3, #0
 80075ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f0:	2301      	movs	r3, #1
 80075f2:	653b      	str	r3, [r7, #80]	; 0x50
 80075f4:	e005      	b.n	8007602 <f_mkfs+0x212>
 80075f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f8:	3301      	adds	r3, #1
 80075fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80075fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	653b      	str	r3, [r7, #80]	; 0x50
 8007602:	4a2e      	ldr	r2, [pc, #184]	; (80076bc <f_mkfs+0x2cc>)
 8007604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <f_mkfs+0x22e>
 800760e:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <f_mkfs+0x2cc>)
 8007610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007616:	461a      	mov	r2, r3
 8007618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800761a:	4293      	cmp	r3, r2
 800761c:	d2eb      	bcs.n	80075f6 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007622:	fbb2 f3f3 	udiv	r3, r2, r3
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	3302      	adds	r3, #2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	8b7a      	ldrh	r2, [r7, #26]
 8007630:	4413      	add	r3, r2
 8007632:	3b01      	subs	r3, #1
 8007634:	8b7a      	ldrh	r2, [r7, #26]
 8007636:	fbb3 f3f2 	udiv	r3, r3, r2
 800763a:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800763c:	2320      	movs	r3, #32
 800763e:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8007640:	2300      	movs	r3, #0
 8007642:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800764a:	4293      	cmp	r3, r2
 800764c:	d903      	bls.n	8007656 <f_mkfs+0x266>
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <f_mkfs+0x2d0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d954      	bls.n	8007700 <f_mkfs+0x310>
 8007656:	230e      	movs	r3, #14
 8007658:	e314      	b.n	8007c84 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800765a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11b      	bne.n	8007698 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	0b1b      	lsrs	r3, r3, #12
 8007664:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007666:	2300      	movs	r3, #0
 8007668:	64bb      	str	r3, [r7, #72]	; 0x48
 800766a:	2301      	movs	r3, #1
 800766c:	653b      	str	r3, [r7, #80]	; 0x50
 800766e:	e005      	b.n	800767c <f_mkfs+0x28c>
 8007670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007672:	3301      	adds	r3, #1
 8007674:	64bb      	str	r3, [r7, #72]	; 0x48
 8007676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	653b      	str	r3, [r7, #80]	; 0x50
 800767c:	4a11      	ldr	r2, [pc, #68]	; (80076c4 <f_mkfs+0x2d4>)
 800767e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <f_mkfs+0x2a8>
 8007688:	4a0e      	ldr	r2, [pc, #56]	; (80076c4 <f_mkfs+0x2d4>)
 800768a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007690:	461a      	mov	r2, r3
 8007692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007694:	4293      	cmp	r3, r2
 8007696:	d2eb      	bcs.n	8007670 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d90d      	bls.n	80076c8 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	3302      	adds	r3, #2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b4:	e013      	b.n	80076de <f_mkfs+0x2ee>
 80076b6:	bf00      	nop
 80076b8:	20000030 	.word	0x20000030
 80076bc:	08008070 	.word	0x08008070
 80076c0:	0ffffff5 	.word	0x0ffffff5
 80076c4:	08008080 	.word	0x08008080
				} else {
					fmt = FS_FAT12;
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80076ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d0:	4613      	mov	r3, r2
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	4413      	add	r3, r2
 80076d6:	3301      	adds	r3, #1
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	3303      	adds	r3, #3
 80076dc:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80076de:	8b7b      	ldrh	r3, [r7, #26]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076e4:	4413      	add	r3, r2
 80076e6:	3b01      	subs	r3, #1
 80076e8:	8b7a      	ldrh	r2, [r7, #26]
 80076ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ee:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80076f0:	2301      	movs	r3, #1
 80076f2:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80076f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f6:	015b      	lsls	r3, r3, #5
 80076f8:	8b7a      	ldrh	r2, [r7, #26]
 80076fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fe:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007704:	4413      	add	r3, r2
 8007706:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8007708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800770a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800770c:	fb02 f203 	mul.w	r2, r2, r3
 8007710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007712:	4413      	add	r3, r2
 8007714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007716:	4413      	add	r3, r2
 8007718:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	4413      	add	r3, r2
 8007720:	1e5a      	subs	r2, r3, #1
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	425b      	negs	r3, r3
 8007726:	401a      	ands	r2, r3
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800772e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007732:	2b03      	cmp	r3, #3
 8007734:	d108      	bne.n	8007748 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 8007736:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800773a:	4413      	add	r3, r2
 800773c:	657b      	str	r3, [r7, #84]	; 0x54
 800773e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007742:	4413      	add	r3, r2
 8007744:	65bb      	str	r3, [r7, #88]	; 0x58
 8007746:	e006      	b.n	8007756 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8007748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800774a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007752:	4413      	add	r3, r2
 8007754:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8007756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007758:	011a      	lsls	r2, r3, #4
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	441a      	add	r2, r3
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	1ad2      	subs	r2, r2, r3
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	429a      	cmp	r2, r3
 8007766:	d901      	bls.n	800776c <f_mkfs+0x37c>
 8007768:	230e      	movs	r3, #14
 800776a:	e28b      	b.n	8007c84 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007770:	1ad2      	subs	r2, r2, r3
 8007772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007774:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8007788:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800778c:	2b03      	cmp	r3, #3
 800778e:	d10f      	bne.n	80077b0 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007796:	4293      	cmp	r3, r2
 8007798:	d80a      	bhi.n	80077b0 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <f_mkfs+0x3bc>
 80077a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d144      	bne.n	8007836 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 80077ac:	230e      	movs	r3, #14
 80077ae:	e269      	b.n	8007c84 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 80077b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d133      	bne.n	8007820 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80077be:	4293      	cmp	r3, r2
 80077c0:	d91e      	bls.n	8007800 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d107      	bne.n	80077d8 <f_mkfs+0x3e8>
 80077c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	d803      	bhi.n	80077d8 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80077d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	607b      	str	r3, [r7, #4]
 80077d6:	e033      	b.n	8007840 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80077e2:	2303      	movs	r3, #3
 80077e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80077e8:	e02a      	b.n	8007840 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <f_mkfs+0x40c>
 80077f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	607b      	str	r3, [r7, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b80      	cmp	r3, #128	; 0x80
 80077fa:	d91e      	bls.n	800783a <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 80077fc:	230e      	movs	r3, #14
 80077fe:	e241      	b.n	8007c84 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007806:	4293      	cmp	r3, r2
 8007808:	d80a      	bhi.n	8007820 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d105      	bne.n	800781c <f_mkfs+0x42c>
 8007810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b80      	cmp	r3, #128	; 0x80
 800781a:	d910      	bls.n	800783e <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 800781c:	230e      	movs	r3, #14
 800781e:	e231      	b.n	8007c84 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8007820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007824:	2b01      	cmp	r3, #1
 8007826:	d10c      	bne.n	8007842 <f_mkfs+0x452>
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800782e:	4293      	cmp	r3, r2
 8007830:	d907      	bls.n	8007842 <f_mkfs+0x452>
 8007832:	230e      	movs	r3, #14
 8007834:	e226      	b.n	8007c84 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007836:	bf00      	nop
 8007838:	e6cc      	b.n	80075d4 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800783a:	bf00      	nop
 800783c:	e6ca      	b.n	80075d4 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800783e:	bf00      	nop
			pau = au;
 8007840:	e6c8      	b.n	80075d4 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 8007842:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8007844:	8b7b      	ldrh	r3, [r7, #26]
 8007846:	461a      	mov	r2, r3
 8007848:	2100      	movs	r1, #0
 800784a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800784c:	f7fd f8e5 	bl	8004a1a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8007850:	220b      	movs	r2, #11
 8007852:	49bd      	ldr	r1, [pc, #756]	; (8007b48 <f_mkfs+0x758>)
 8007854:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007856:	f7fd f8bf 	bl	80049d8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	330b      	adds	r3, #11
 800785e:	8b7a      	ldrh	r2, [r7, #26]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7fd f871 	bl	800494a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786a:	330d      	adds	r3, #13
 800786c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007874:	330e      	adds	r3, #14
 8007876:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007878:	b292      	uxth	r2, r2
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7fd f864 	bl	800494a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	3310      	adds	r3, #16
 8007886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800788c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788e:	f103 0211 	add.w	r2, r3, #17
 8007892:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007896:	2b03      	cmp	r3, #3
 8007898:	d002      	beq.n	80078a0 <f_mkfs+0x4b0>
 800789a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789c:	b29b      	uxth	r3, r3
 800789e:	e000      	b.n	80078a2 <f_mkfs+0x4b2>
 80078a0:	2300      	movs	r3, #0
 80078a2:	4619      	mov	r1, r3
 80078a4:	4610      	mov	r0, r2
 80078a6:	f7fd f850 	bl	800494a <st_word>
		if (sz_vol < 0x10000) {
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d208      	bcs.n	80078c4 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80078b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b4:	3313      	adds	r3, #19
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	b292      	uxth	r2, r2
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fd f844 	bl	800494a <st_word>
 80078c2:	e006      	b.n	80078d2 <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	3320      	adds	r3, #32
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fd f857 	bl	8004980 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80078d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d4:	3315      	adds	r3, #21
 80078d6:	22f8      	movs	r2, #248	; 0xf8
 80078d8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80078da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078dc:	3318      	adds	r3, #24
 80078de:	213f      	movs	r1, #63	; 0x3f
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fd f832 	bl	800494a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	331a      	adds	r3, #26
 80078ea:	21ff      	movs	r1, #255	; 0xff
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fd f82c 	bl	800494a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	331c      	adds	r3, #28
 80078f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fd f841 	bl	8004980 <st_dword>
		if (fmt == FS_FAT32) {
 80078fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007902:	2b03      	cmp	r3, #3
 8007904:	d131      	bne.n	800796a <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800790c:	f7fc fcf4 	bl	80042f8 <get_fattime>
 8007910:	4603      	mov	r3, r0
 8007912:	4619      	mov	r1, r3
 8007914:	4620      	mov	r0, r4
 8007916:	f7fd f833 	bl	8004980 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	3324      	adds	r3, #36	; 0x24
 800791e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd f82d 	bl	8004980 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	332c      	adds	r3, #44	; 0x2c
 800792a:	2102      	movs	r1, #2
 800792c:	4618      	mov	r0, r3
 800792e:	f7fd f827 	bl	8004980 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	3330      	adds	r3, #48	; 0x30
 8007936:	2101      	movs	r1, #1
 8007938:	4618      	mov	r0, r3
 800793a:	f7fd f806 	bl	800494a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	3332      	adds	r3, #50	; 0x32
 8007942:	2106      	movs	r1, #6
 8007944:	4618      	mov	r0, r3
 8007946:	f7fd f800 	bl	800494a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	3340      	adds	r3, #64	; 0x40
 800794e:	2280      	movs	r2, #128	; 0x80
 8007950:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	3342      	adds	r3, #66	; 0x42
 8007956:	2229      	movs	r2, #41	; 0x29
 8007958:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	3347      	adds	r3, #71	; 0x47
 800795e:	2213      	movs	r2, #19
 8007960:	497a      	ldr	r1, [pc, #488]	; (8007b4c <f_mkfs+0x75c>)
 8007962:	4618      	mov	r0, r3
 8007964:	f7fd f838 	bl	80049d8 <mem_cpy>
 8007968:	e020      	b.n	80079ac <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800796a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796c:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8007970:	f7fc fcc2 	bl	80042f8 <get_fattime>
 8007974:	4603      	mov	r3, r0
 8007976:	4619      	mov	r1, r3
 8007978:	4620      	mov	r0, r4
 800797a:	f7fd f801 	bl	8004980 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800797e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007980:	3316      	adds	r3, #22
 8007982:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007984:	b292      	uxth	r2, r2
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f7fc ffde 	bl	800494a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	3324      	adds	r3, #36	; 0x24
 8007992:	2280      	movs	r2, #128	; 0x80
 8007994:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007998:	3326      	adds	r3, #38	; 0x26
 800799a:	2229      	movs	r2, #41	; 0x29
 800799c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	332b      	adds	r3, #43	; 0x2b
 80079a2:	2213      	movs	r2, #19
 80079a4:	496a      	ldr	r1, [pc, #424]	; (8007b50 <f_mkfs+0x760>)
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd f816 	bl	80049d8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079b2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fc ffc7 	bl	800494a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80079bc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80079c0:	2301      	movs	r3, #1
 80079c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079c6:	f7fc ff47 	bl	8004858 <disk_write>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <f_mkfs+0x5e4>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e157      	b.n	8007c84 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80079d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d140      	bne.n	8007a5e <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	1d9a      	adds	r2, r3, #6
 80079e0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80079e4:	2301      	movs	r3, #1
 80079e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079e8:	f7fc ff36 	bl	8004858 <disk_write>
			mem_set(buf, 0, ss);
 80079ec:	8b7b      	ldrh	r3, [r7, #26]
 80079ee:	461a      	mov	r2, r3
 80079f0:	2100      	movs	r1, #0
 80079f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80079f4:	f7fd f811 	bl	8004a1a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80079f8:	4956      	ldr	r1, [pc, #344]	; (8007b54 <f_mkfs+0x764>)
 80079fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80079fc:	f7fc ffc0 	bl	8004980 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a06:	4954      	ldr	r1, [pc, #336]	; (8007b58 <f_mkfs+0x768>)
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fc ffb9 	bl	8004980 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	3b01      	subs	r3, #1
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fc ffb0 	bl	8004980 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8007a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a22:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007a26:	2102      	movs	r1, #2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fc ffa9 	bl	8004980 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fc ff86 	bl	800494a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	1dda      	adds	r2, r3, #7
 8007a42:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007a46:	2301      	movs	r3, #1
 8007a48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a4a:	f7fc ff05 	bl	8004858 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007a56:	2301      	movs	r3, #1
 8007a58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a5a:	f7fc fefd 	bl	8004858 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8007a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a60:	2100      	movs	r1, #0
 8007a62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a64:	f7fc ffd9 	bl	8004a1a <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a6a:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a70:	e04b      	b.n	8007b0a <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 8007a72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d113      	bne.n	8007aa2 <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007a7a:	f06f 0107 	mvn.w	r1, #7
 8007a7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a80:	f7fc ff7e 	bl	8004980 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	3304      	adds	r3, #4
 8007a88:	f04f 31ff 	mov.w	r1, #4294967295
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fc ff77 	bl	8004980 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a94:	3308      	adds	r3, #8
 8007a96:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fc ff70 	bl	8004980 <st_dword>
 8007aa0:	e00b      	b.n	8007aba <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8007aa2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <f_mkfs+0x6be>
 8007aaa:	4b2c      	ldr	r3, [pc, #176]	; (8007b5c <f_mkfs+0x76c>)
 8007aac:	e001      	b.n	8007ab2 <f_mkfs+0x6c2>
 8007aae:	f06f 0307 	mvn.w	r3, #7
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ab6:	f7fc ff63 	bl	8004980 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007abc:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007abe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	bf28      	it	cs
 8007ac6:	4613      	movcs	r3, r2
 8007ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007aca:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ad2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ad4:	f7fc fec0 	bl	8004858 <disk_write>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <f_mkfs+0x6f2>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0d0      	b.n	8007c84 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 8007ae2:	8b7b      	ldrh	r3, [r7, #26]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007aea:	f7fc ff96 	bl	8004a1a <mem_set>
				sect += n; nsect -= n;
 8007aee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007af2:	4413      	add	r3, r2
 8007af4:	667b      	str	r3, [r7, #100]	; 0x64
 8007af6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8007afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1dc      	bne.n	8007abe <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b06:	3301      	adds	r3, #1
 8007b08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d3af      	bcc.n	8007a72 <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007b12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d101      	bne.n	8007b1e <f_mkfs+0x72e>
 8007b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1c:	e000      	b.n	8007b20 <f_mkfs+0x730>
 8007b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b20:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007b22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bf28      	it	cs
 8007b2a:	4613      	movcs	r3, r2
 8007b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007b2e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b38:	f7fc fe8e 	bl	8004858 <disk_write>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00e      	beq.n	8007b60 <f_mkfs+0x770>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e09e      	b.n	8007c84 <f_mkfs+0x894>
 8007b46:	bf00      	nop
 8007b48:	08007f80 	.word	0x08007f80
 8007b4c:	08007f8c 	.word	0x08007f8c
 8007b50:	08007fa0 	.word	0x08007fa0
 8007b54:	41615252 	.word	0x41615252
 8007b58:	61417272 	.word	0x61417272
 8007b5c:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8007b60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b64:	4413      	add	r3, r2
 8007b66:	667b      	str	r3, [r7, #100]	; 0x64
 8007b68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8007b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1d5      	bne.n	8007b22 <f_mkfs+0x732>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007b76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d103      	bne.n	8007b86 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 8007b7e:	230c      	movs	r3, #12
 8007b80:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007b84:	e010      	b.n	8007ba8 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8c:	d303      	bcc.n	8007b96 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8007b8e:	2306      	movs	r3, #6
 8007b90:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007b94:	e008      	b.n	8007ba8 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007b96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d101      	bne.n	8007ba2 <f_mkfs+0x7b2>
 8007b9e:	2304      	movs	r3, #4
 8007ba0:	e000      	b.n	8007ba4 <f_mkfs+0x7b4>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d15b      	bne.n	8007c6a <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 8007bb2:	8b7b      	ldrh	r3, [r7, #26]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007bba:	f7fc ff2e 	bl	8004a1a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bc4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fc febe 	bl	800494a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bd4:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	2201      	movs	r2, #1
 8007be2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3302      	adds	r3, #2
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	3303      	adds	r3, #3
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007bfc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	441a      	add	r2, r3
 8007c04:	4b21      	ldr	r3, [pc, #132]	; (8007c8c <f_mkfs+0x89c>)
 8007c06:	fba3 1302 	umull	r1, r3, r3, r2
 8007c0a:	1ad2      	subs	r2, r2, r3
 8007c0c:	0852      	lsrs	r2, r2, #1
 8007c0e:	4413      	add	r3, r2
 8007c10:	0b5b      	lsrs	r3, r3, #13
 8007c12:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3305      	adds	r3, #5
 8007c18:	22fe      	movs	r2, #254	; 0xfe
 8007c1a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8007c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c1e:	089b      	lsrs	r3, r3, #2
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	3306      	adds	r3, #6
 8007c26:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	3307      	adds	r3, #7
 8007c32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fc fe9e 	bl	8004980 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	330c      	adds	r3, #12
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fc fe97 	bl	8004980 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007c52:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c56:	2301      	movs	r3, #1
 8007c58:	2200      	movs	r2, #0
 8007c5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c5c:	f7fc fdfc 	bl	8004858 <disk_write>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <f_mkfs+0x87a>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e00c      	b.n	8007c84 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007c6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fc fe10 	bl	8004898 <disk_ioctl>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <f_mkfs+0x892>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <f_mkfs+0x894>

	return FR_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3774      	adds	r7, #116	; 0x74
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd90      	pop	{r4, r7, pc}
 8007c8c:	0515565b 	.word	0x0515565b

08007c90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ca6:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007ca8:	7a5b      	ldrb	r3, [r3, #9]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d131      	bne.n	8007d14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cb0:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007cb2:	7a5b      	ldrb	r3, [r3, #9]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007cba:	2100      	movs	r1, #0
 8007cbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cbe:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007cc0:	7a5b      	ldrb	r3, [r3, #9]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007cd0:	7a5b      	ldrb	r3, [r3, #9]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007cd8:	4413      	add	r3, r2
 8007cda:	79fa      	ldrb	r2, [r7, #7]
 8007cdc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cde:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007ce0:	7a5b      	ldrb	r3, [r3, #9]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	b2d1      	uxtb	r1, r2
 8007ce8:	4a0e      	ldr	r2, [pc, #56]	; (8007d24 <FATFS_LinkDriverEx+0x94>)
 8007cea:	7251      	strb	r1, [r2, #9]
 8007cec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cee:	7dbb      	ldrb	r3, [r7, #22]
 8007cf0:	3330      	adds	r3, #48	; 0x30
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	223a      	movs	r2, #58	; 0x3a
 8007cfe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3302      	adds	r3, #2
 8007d04:	222f      	movs	r2, #47	; 0x2f
 8007d06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	3303      	adds	r3, #3
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000258 	.word	0x20000258

08007d28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d32:	2200      	movs	r2, #0
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ffaa 	bl	8007c90 <FATFS_LinkDriverEx>
 8007d3c:	4603      	mov	r3, r0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	6039      	str	r1, [r7, #0]
 8007d52:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	2b7f      	cmp	r3, #127	; 0x7f
 8007d58:	d802      	bhi.n	8007d60 <ff_convert+0x18>
		c = chr;
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	81fb      	strh	r3, [r7, #14]
 8007d5e:	e025      	b.n	8007dac <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00b      	beq.n	8007d7e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	2bff      	cmp	r3, #255	; 0xff
 8007d6a:	d805      	bhi.n	8007d78 <ff_convert+0x30>
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	3b80      	subs	r3, #128	; 0x80
 8007d70:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <ff_convert+0x74>)
 8007d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d76:	e000      	b.n	8007d7a <ff_convert+0x32>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	81fb      	strh	r3, [r7, #14]
 8007d7c:	e016      	b.n	8007dac <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007d7e:	2300      	movs	r3, #0
 8007d80:	81fb      	strh	r3, [r7, #14]
 8007d82:	e009      	b.n	8007d98 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007d84:	89fb      	ldrh	r3, [r7, #14]
 8007d86:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <ff_convert+0x74>)
 8007d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d006      	beq.n	8007da0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007d92:	89fb      	ldrh	r3, [r7, #14]
 8007d94:	3301      	adds	r3, #1
 8007d96:	81fb      	strh	r3, [r7, #14]
 8007d98:	89fb      	ldrh	r3, [r7, #14]
 8007d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d9c:	d9f2      	bls.n	8007d84 <ff_convert+0x3c>
 8007d9e:	e000      	b.n	8007da2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007da0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007da2:	89fb      	ldrh	r3, [r7, #14]
 8007da4:	3380      	adds	r3, #128	; 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007dac:	89fb      	ldrh	r3, [r7, #14]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	08008090 	.word	0x08008090

08007dc0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd0:	d201      	bcs.n	8007dd6 <ff_wtoupper+0x16>
 8007dd2:	4b3e      	ldr	r3, [pc, #248]	; (8007ecc <ff_wtoupper+0x10c>)
 8007dd4:	e000      	b.n	8007dd8 <ff_wtoupper+0x18>
 8007dd6:	4b3e      	ldr	r3, [pc, #248]	; (8007ed0 <ff_wtoupper+0x110>)
 8007dd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	1c9a      	adds	r2, r3, #2
 8007dde:	617a      	str	r2, [r7, #20]
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007de4:	8a7b      	ldrh	r3, [r7, #18]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d068      	beq.n	8007ebc <ff_wtoupper+0xfc>
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	8a7b      	ldrh	r3, [r7, #18]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d364      	bcc.n	8007ebc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	1c9a      	adds	r2, r3, #2
 8007df6:	617a      	str	r2, [r7, #20]
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	823b      	strh	r3, [r7, #16]
 8007dfc:	8a3b      	ldrh	r3, [r7, #16]
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	81fb      	strh	r3, [r7, #14]
 8007e02:	8a3b      	ldrh	r3, [r7, #16]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007e08:	88fa      	ldrh	r2, [r7, #6]
 8007e0a:	8a79      	ldrh	r1, [r7, #18]
 8007e0c:	8a3b      	ldrh	r3, [r7, #16]
 8007e0e:	440b      	add	r3, r1
 8007e10:	429a      	cmp	r2, r3
 8007e12:	da49      	bge.n	8007ea8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007e14:	89fb      	ldrh	r3, [r7, #14]
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d84f      	bhi.n	8007eba <ff_wtoupper+0xfa>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <ff_wtoupper+0x60>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e57 	.word	0x08007e57
 8007e28:	08007e6d 	.word	0x08007e6d
 8007e2c:	08007e75 	.word	0x08007e75
 8007e30:	08007e7d 	.word	0x08007e7d
 8007e34:	08007e85 	.word	0x08007e85
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	08007e9d 	.word	0x08007e9d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007e44:	88fa      	ldrh	r2, [r7, #6]
 8007e46:	8a7b      	ldrh	r3, [r7, #18]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	80fb      	strh	r3, [r7, #6]
 8007e54:	e027      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007e56:	88fa      	ldrh	r2, [r7, #6]
 8007e58:	8a7b      	ldrh	r3, [r7, #18]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	88fa      	ldrh	r2, [r7, #6]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	80fb      	strh	r3, [r7, #6]
 8007e6a:	e01c      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007e6c:	88fb      	ldrh	r3, [r7, #6]
 8007e6e:	3b10      	subs	r3, #16
 8007e70:	80fb      	strh	r3, [r7, #6]
 8007e72:	e018      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	3b20      	subs	r3, #32
 8007e78:	80fb      	strh	r3, [r7, #6]
 8007e7a:	e014      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	3b30      	subs	r3, #48	; 0x30
 8007e80:	80fb      	strh	r3, [r7, #6]
 8007e82:	e010      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	3b1a      	subs	r3, #26
 8007e88:	80fb      	strh	r3, [r7, #6]
 8007e8a:	e00c      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	80fb      	strh	r3, [r7, #6]
 8007e92:	e008      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	3b50      	subs	r3, #80	; 0x50
 8007e98:	80fb      	strh	r3, [r7, #6]
 8007e9a:	e004      	b.n	8007ea6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007ea2:	80fb      	strh	r3, [r7, #6]
 8007ea4:	bf00      	nop
			}
			break;
 8007ea6:	e008      	b.n	8007eba <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d195      	bne.n	8007dda <ff_wtoupper+0x1a>
 8007eae:	8a3b      	ldrh	r3, [r7, #16]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007eb8:	e78f      	b.n	8007dda <ff_wtoupper+0x1a>
			break;
 8007eba:	bf00      	nop
	}

	return chr;
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	08008190 	.word	0x08008190
 8007ed0:	08008384 	.word	0x08008384

08007ed4 <__libc_init_array>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	4d0d      	ldr	r5, [pc, #52]	; (8007f0c <__libc_init_array+0x38>)
 8007ed8:	4c0d      	ldr	r4, [pc, #52]	; (8007f10 <__libc_init_array+0x3c>)
 8007eda:	1b64      	subs	r4, r4, r5
 8007edc:	10a4      	asrs	r4, r4, #2
 8007ede:	2600      	movs	r6, #0
 8007ee0:	42a6      	cmp	r6, r4
 8007ee2:	d109      	bne.n	8007ef8 <__libc_init_array+0x24>
 8007ee4:	4d0b      	ldr	r5, [pc, #44]	; (8007f14 <__libc_init_array+0x40>)
 8007ee6:	4c0c      	ldr	r4, [pc, #48]	; (8007f18 <__libc_init_array+0x44>)
 8007ee8:	f000 f820 	bl	8007f2c <_init>
 8007eec:	1b64      	subs	r4, r4, r5
 8007eee:	10a4      	asrs	r4, r4, #2
 8007ef0:	2600      	movs	r6, #0
 8007ef2:	42a6      	cmp	r6, r4
 8007ef4:	d105      	bne.n	8007f02 <__libc_init_array+0x2e>
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efc:	4798      	blx	r3
 8007efe:	3601      	adds	r6, #1
 8007f00:	e7ee      	b.n	8007ee0 <__libc_init_array+0xc>
 8007f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f06:	4798      	blx	r3
 8007f08:	3601      	adds	r6, #1
 8007f0a:	e7f2      	b.n	8007ef2 <__libc_init_array+0x1e>
 8007f0c:	08008448 	.word	0x08008448
 8007f10:	08008448 	.word	0x08008448
 8007f14:	08008448 	.word	0x08008448
 8007f18:	0800844c 	.word	0x0800844c

08007f1c <memset>:
 8007f1c:	4402      	add	r2, r0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d100      	bne.n	8007f26 <memset+0xa>
 8007f24:	4770      	bx	lr
 8007f26:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2a:	e7f9      	b.n	8007f20 <memset+0x4>

08007f2c <_init>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	bf00      	nop
 8007f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f32:	bc08      	pop	{r3}
 8007f34:	469e      	mov	lr, r3
 8007f36:	4770      	bx	lr

08007f38 <_fini>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr
